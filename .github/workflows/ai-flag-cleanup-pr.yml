name: AI flag cleanup PR

on:
  workflow_call:
    inputs:
      issue-number:
        description: "Flag completed issue number"
        required: true
        type: number
      model:
        description: "Model to use"
        required: true
        type: string
      api_key_env_name:
        description: "The name of the API key environment variable. For example, OPENAI_API_KEY, ANTHROPIC_API_KEY, etc. See more info: https://aider.chat/docs/llms.html"
        required: true
        type: string
      base-branch:
        description: "Base branch to create PR against (e.g. main)"
        required: false
        type: string
        default: ${{ github.event.repository.default_branch }}
      chat-timeout:
        description: "Timeout for flag cleanup, in minutes"
        required: false
        type: number
        default: 10
    secrets:
      api_key_env_value:
        description: "The API key"
        required: true

permissions:
  pull-requests: write
  contents: write
  issues: write

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    steps:

      # 1. Initial checkout (to read the issue & create branch)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # 2. Fetch the issue title & body
      - name: Get issue
        uses: actions/github-script@v7
        id: get_issue
        with:
          script: |
            console.log('Fetching issue #${{ inputs.issue-number }}')
            const { repo, owner } = context.repo;
            const result = await github.rest.issues.get({
              owner,
              repo,
              issue_number: ${{ inputs.issue-number }}
            });
            console.log(`Fetched issue #${result.data.number}: ${result.data.title}`)
            return {
              title: result.data.title.replace(/"/g, "'").replace(/`/g, '\\`'),
              body: result.data.body.replace(/"/g, "'").replace(/`/g, '\\`'),
            };

      # 3. Parse the flag name from the title
      - name: Extract flag name
        id: extract_flag
        run: |
          TITLE="${{ fromJson(steps.get_issue.outputs.result).title }}"
          if [[ "$TITLE" =~ Flag[[:space:]]([a-zA-Z0-9_-]+)[[:space:]]marked ]]; then
            echo "flag-name=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "❌ Could not extract flag name from title: $TITLE"
            exit 1
          fi

      # 4. Create the new branch on GitHub
      - name: Create a new branch
        uses: actions/github-script@v7
        id: create_branch
        env:
          FLAG_NAME: ${{ steps.extract_flag.outputs.flag-name }}
        with:
          script: |
            const kebabCase = (str) => str
              .toLowerCase()
              .trim()
              .replace(/[^\w\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/^-+|-+$/g, '');
            const fixUrl = (url) => url
              .replace(/\/git\/commits/, '/commit')
              .replace(/api.github.com\/repos/, 'github.com');

            const base = '${{ inputs.base-branch }}';
            const baseBranch = await github.rest.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: base
            });

            const branchName = `chore/unleash-ai-${kebabCase(process.env.FLAG_NAME)}-flag-cleanup`;
            const ref = `refs/heads/${branchName}`;
            const short = `heads/${branchName}`;
            const { owner, repo } = context.repo;

            const existing = await github.rest.git.getRef({ owner, repo, ref: short })
              .catch(() => null);

            if (existing) {
              try {
                await github.rest.repos.getBranch({ owner, repo, branch: branchName });
                console.log(`Branch ${branchName} exists at ${existing.data.object.sha}`);
                return { ref: existing.data.ref };
              } catch {
                console.log(`Deleting stale ref ${short}`);
                await github.rest.git.deleteRef({ owner, repo, ref: short });
              }
            }

            const created = await github.rest.git.createRef({
              owner, repo, ref, sha: baseBranch.data.commit.sha
            });
            console.log(`Created ${branchName} @ ${created.data.object.sha}`);
            return { ref: created.data.ref };

      # 5. Checkout that new branch locally
      - name: Check out new branch
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.create_branch.outputs.ref) }}
          fetch-depth: 0

      # 6. Configure Git so Aider’s commit is valid
      - name: Configure Git
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name  "github-actions[bot]"

      # 7. Install ripgrep to find flag usages
      - name: Install ripgrep
        run: sudo apt-get update && sudo apt-get install -y ripgrep

      # 8. Find all files referencing the flag
      - name: Find files using the flag
        id: find_files
        run: |
          FLAG="${{ steps.extract_flag.outputs.flag-name }}"
          FILES=$(rg -0 -l "$FLAG" . | xargs -0 -I{} printf '"%s" ' "{}")
          if [[ -z "$FILES" ]]; then
            echo "❌ No files found for flag '$FLAG'"
            exit 1
          fi
          echo "file_args=$FILES" >> $GITHUB_OUTPUT

      # 9. Build the AI prompt
      - name: Create prompt
        uses: actions/github-script@v7
        id: create_prompt
        with:
          result-encoding: string
          script: |
            const body = `${{ fromJson(steps.get_issue.outputs.result).body }}`;
            return `Apply all necessary changes to clean up this feature flag based on the issue description below.

            After making the changes, provide a Markdown summary of what was changed, written for a developer reviewing the PR. Keep it clear, focused, and readable. Surround the summary with the following lines:

            === AI Flag Cleanup Summary Start ===
            (summary goes here)
            === AI Flag Cleanup Summary End ===

            Make sure to include:
            - What was removed
            - What was kept
            - Why the changes were made
            - Any other relevant information

            --- Issue Description ---
            ${body}`;

      # 10. Write that prompt to disk
      - name: Write prompt to file
        run: |
          cat <<EOF > cleanup_prompt.txt
          ${{ steps.create_prompt.outputs.result }}
          EOF

      # 11. Install Python & Aider CLI
      - name: Set up Python & install Aider
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Aider
        run: |
          python -m pip install --upgrade pip
          pip install aider-chat

      # 12. Run Aider, capture full output & extract summary
      - name: Run Aider CLI and capture summary
        id: run_aider
        timeout-minutes: ${{ inputs.chat-timeout }}
        env:
          ${{ inputs.api_key_env_name }}: ${{ secrets.api_key_env_value }}
        run: |
          FILE_ARGS=${{ steps.find_files.outputs.file_args }}
          OUTPUT=$(aider --model "${{ inputs.model }}" --yes $FILE_ARGS --message-file cleanup_prompt.txt)
          echo "$OUTPUT" > aider_output.txt

          SUMMARY=$(awk '
            /^=== AI Flag Cleanup Summary Start ===$/ {in=1; next}
            /^=== AI Flag Cleanup Summary End ===$/   {in=0}
            in { print }
          ' aider_output.txt)

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY"       >> $GITHUB_OUTPUT
          echo "EOF"            >> $GITHUB_OUTPUT

      # 13. Push the AI-made commit
      - name: Push Aider’s commit
        run: |
          git push -u origin HEAD

      # 14. Create or reuse the pull request
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { repo, owner } = context.repo;
            const branchRef = '${{ fromJson(steps.create_branch.outputs.ref) }}';
            const flagName  = '${{ steps.extract_flag.outputs.flag-name }}';
            const summary   = `\${{ steps.run_aider.outputs.summary }}`;

            // check for existing open PR
            const pulls = await github.rest.pulls.list({
              owner, repo, state: 'open', per_page: 100
            });
            const existing = pulls.data.find(p => p.head.ref === branchRef);
            if (existing) {
              console.log(`PR #${existing.number} already exists: ${existing.html_url}`);
              return existing;
            }

            // otherwise create a new one
            const body = [
              `This PR cleans up the ${flagName} flag. These changes were automatically generated by AI and should be reviewed carefully.`,
              '',
              `Fixes #${{ inputs.issue-number }}`,
              '',
              summary
            ].join('\n');

            const newPR = await github.rest.pulls.create({
              owner, repo,
              title: `[AI] ${flagName} flag cleanup`,
              head: branchRef,
              base: 'refs/heads/${{ inputs.base-branch }}',
              body
            });
            await github.rest.issues.addLabels({
              owner, repo,
              issue_number: newPR.data.number,
              labels: ['unleash-ai-flag-cleanup']
            });
            console.log(`Created PR #${newPR.data.number}: ${newPR.data.html_url}`);
