/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminPermissionsSchema,
  AdminSegmentSchema,
  ChangeProjectSchema,
  CreateEnvironmentSchema,
  CreateProjectSchema,
  CreateRoleWithPermissionsSchema,
  EnvironmentSchema,
  GoogleSettingsSchema,
  GroupSchema,
  GroupsSchema,
  NameSchema,
  OidcSettingsSchema,
  PasswordAuthSchema,
  PatSchema,
  PatsSchema,
  ProjectAccessSchema,
  ProjectUsers,
  RoleWithPermissionsSchema,
  RoleWithVersionSchema,
  RolesWithVersionSchema,
  SamlSettingsSchema,
  SegmentsSchema,
  UpdateEnvironmentSchema,
  UpdateFeatureStrategySegmentsSchema,
  UpdateProjectSchema,
  UpsertSegmentSchema,
  ValidateProjectSchema,
} from '../models';
import {
    AdminPermissionsSchemaFromJSON,
    AdminPermissionsSchemaToJSON,
    AdminSegmentSchemaFromJSON,
    AdminSegmentSchemaToJSON,
    ChangeProjectSchemaFromJSON,
    ChangeProjectSchemaToJSON,
    CreateEnvironmentSchemaFromJSON,
    CreateEnvironmentSchemaToJSON,
    CreateProjectSchemaFromJSON,
    CreateProjectSchemaToJSON,
    CreateRoleWithPermissionsSchemaFromJSON,
    CreateRoleWithPermissionsSchemaToJSON,
    EnvironmentSchemaFromJSON,
    EnvironmentSchemaToJSON,
    GoogleSettingsSchemaFromJSON,
    GoogleSettingsSchemaToJSON,
    GroupSchemaFromJSON,
    GroupSchemaToJSON,
    GroupsSchemaFromJSON,
    GroupsSchemaToJSON,
    NameSchemaFromJSON,
    NameSchemaToJSON,
    OidcSettingsSchemaFromJSON,
    OidcSettingsSchemaToJSON,
    PasswordAuthSchemaFromJSON,
    PasswordAuthSchemaToJSON,
    PatSchemaFromJSON,
    PatSchemaToJSON,
    PatsSchemaFromJSON,
    PatsSchemaToJSON,
    ProjectAccessSchemaFromJSON,
    ProjectAccessSchemaToJSON,
    ProjectUsersFromJSON,
    ProjectUsersToJSON,
    RoleWithPermissionsSchemaFromJSON,
    RoleWithPermissionsSchemaToJSON,
    RoleWithVersionSchemaFromJSON,
    RoleWithVersionSchemaToJSON,
    RolesWithVersionSchemaFromJSON,
    RolesWithVersionSchemaToJSON,
    SamlSettingsSchemaFromJSON,
    SamlSettingsSchemaToJSON,
    SegmentsSchemaFromJSON,
    SegmentsSchemaToJSON,
    UpdateEnvironmentSchemaFromJSON,
    UpdateEnvironmentSchemaToJSON,
    UpdateFeatureStrategySegmentsSchemaFromJSON,
    UpdateFeatureStrategySegmentsSchemaToJSON,
    UpdateProjectSchemaFromJSON,
    UpdateProjectSchemaToJSON,
    UpsertSegmentSchemaFromJSON,
    UpsertSegmentSchemaToJSON,
    ValidateProjectSchemaFromJSON,
    ValidateProjectSchemaToJSON,
} from '../models';

export interface AddAccessToProjectRequest {
    projectId: string;
    roleId: string;
}

export interface AddRoleToUserRequest {
    projectId: string;
    userId: string;
    roleId: string;
}

export interface ChangeProjectRequest {
    projectId: string;
    featureName: string;
    changeProjectSchema: ChangeProjectSchema;
}

export interface ChangeRoleForGroupRequest {
    projectId: string;
    groupId: string;
    roleId: string;
}

export interface ChangeRoleForUserRequest {
    projectId: string;
    userId: string;
    roleId: string;
}

export interface CreateEnvironmentRequest {
    createEnvironmentSchema: CreateEnvironmentSchema;
}

export interface CreateGroupRequest {
    requestBody: { [key: string]: any; };
}

export interface CreatePatRequest {
    patSchema: PatSchema;
}

export interface CreateProjectRequest {
    createProjectSchema: CreateProjectSchema;
}

export interface CreateRoleRequest {
    createRoleWithPermissionsSchema: CreateRoleWithPermissionsSchema;
}

export interface CreateSegmentRequest {
    upsertSegmentSchema: UpsertSegmentSchema;
}

export interface DeleteGroupRequest {
    groupId: string;
}

export interface DeletePatRequest {
    secret: string;
}

export interface DeleteProjectRequest {
    projectId: string;
}

export interface DeleteRoleRequest {
    roleId: string;
}

export interface GetGroupRequest {
    groupId: string;
}

export interface GetProjectAccessRequest {
    projectId: string;
}

export interface GetProjectUsersRequest {
    projectId: string;
}

export interface GetRoleByIdRequest {
    roleId: string;
}

export interface GetSegmentRequest {
    id: string;
}

export interface GetSegmentsByStrategyIdRequest {
    strategyId: string;
}

export interface GetStrategiesBySegmentIdRequest {
    id: string;
}

export interface RemoveEnvironmentRequest {
    name: string;
}

export interface RemoveRoleForUserRequest {
    projectId: string;
    userId: string;
    roleId: string;
}

export interface RemoveRoleFromGroupRequest {
    projectId: string;
    groupId: string;
    roleId: string;
}

export interface RemoveSegmentRequest {
    id: string;
}

export interface SetGoogleSettingsRequest {
    googleSettingsSchema: GoogleSettingsSchema;
}

export interface SetOidcSettingsRequest {
    oidcSettingsSchema: OidcSettingsSchema;
}

export interface SetSamlSettingsRequest {
    samlSettingsSchema: SamlSettingsSchema;
}

export interface SetSimpleSettingsRequest {
    passwordAuthSchema: PasswordAuthSchema;
}

export interface UpdateEnvironmentRequest {
    name: string;
    updateEnvironmentSchema: UpdateEnvironmentSchema;
}

export interface UpdateFeatureStrategySegmentsRequest {
    updateFeatureStrategySegmentsSchema: UpdateFeatureStrategySegmentsSchema;
}

export interface UpdateGroupRequest {
    groupId: string;
    requestBody: { [key: string]: any; };
}

export interface UpdateProjectRequest {
    projectId: string;
    updateProjectSchema: UpdateProjectSchema;
}

export interface UpdateRoleRequest {
    roleId: string;
    createRoleWithPermissionsSchema: CreateRoleWithPermissionsSchema;
}

export interface UpdateSegmentRequest {
    id: string;
}

export interface ValidateEnvironmentNameRequest {
    nameSchema: NameSchema;
}

export interface ValidateProjectRequest {
    validateProjectSchema: ValidateProjectSchema;
}

export interface ValidateRoleRequest {
    createRoleWithPermissionsSchema: CreateRoleWithPermissionsSchema;
}

export interface ValidateSegmentRequest {
    nameSchema: NameSchema;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     */
    async addAccessToProjectRaw(requestParameters: AddAccessToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling addAccessToProject.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addAccessToProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/role/{roleId}/access`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addAccessToProject(requestParameters: AddAccessToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addAccessToProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addRoleToUserRaw(requestParameters: AddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addRoleToUser.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling addRoleToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/users/{userId}/roles/{roleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addRoleToUser(requestParameters: AddRoleToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRoleToUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async changeProjectRaw(requestParameters: ChangeProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling changeProject.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling changeProject.');
        }

        if (requestParameters.changeProjectSchema === null || requestParameters.changeProjectSchema === undefined) {
            throw new runtime.RequiredError('changeProjectSchema','Required parameter requestParameters.changeProjectSchema was null or undefined when calling changeProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/changeProject`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeProjectSchemaToJSON(requestParameters.changeProjectSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeProject(requestParameters: ChangeProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async changeRoleForGroupRaw(requestParameters: ChangeRoleForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling changeRoleForGroup.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling changeRoleForGroup.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling changeRoleForGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/groups/{groupId}/roles/{roleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeRoleForGroup(requestParameters: ChangeRoleForGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeRoleForGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async changeRoleForUserRaw(requestParameters: ChangeRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling changeRoleForUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling changeRoleForUser.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling changeRoleForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/users/{userId}/roles/{roleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeRoleForUser(requestParameters: ChangeRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeRoleForUserRaw(requestParameters, initOverrides);
    }

    /**
     * Uses the details provided in the payload to create a new environment
     * Creates a new environment
     */
    async createEnvironmentRaw(requestParameters: CreateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvironmentSchema>> {
        if (requestParameters.createEnvironmentSchema === null || requestParameters.createEnvironmentSchema === undefined) {
            throw new runtime.RequiredError('createEnvironmentSchema','Required parameter requestParameters.createEnvironmentSchema was null or undefined when calling createEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/environments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEnvironmentSchemaToJSON(requestParameters.createEnvironmentSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentSchemaFromJSON(jsonValue));
    }

    /**
     * Uses the details provided in the payload to create a new environment
     * Creates a new environment
     */
    async createEnvironment(requestParameters: CreateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvironmentSchema> {
        const response = await this.createEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupSchema>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling createGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupSchema> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPatRaw(requestParameters: CreatePatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatSchema>> {
        if (requestParameters.patSchema === null || requestParameters.patSchema === undefined) {
            throw new runtime.RequiredError('patSchema','Required parameter requestParameters.patSchema was null or undefined when calling createPat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/user/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatSchemaToJSON(requestParameters.patSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createPat(requestParameters: CreatePatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatSchema> {
        const response = await this.createPatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createProjectSchema === null || requestParameters.createProjectSchema === undefined) {
            throw new runtime.RequiredError('createProjectSchema','Required parameter requestParameters.createProjectSchema was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectSchemaToJSON(requestParameters.createProjectSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createRoleRaw(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleWithVersionSchema>> {
        if (requestParameters.createRoleWithPermissionsSchema === null || requestParameters.createRoleWithPermissionsSchema === undefined) {
            throw new runtime.RequiredError('createRoleWithPermissionsSchema','Required parameter requestParameters.createRoleWithPermissionsSchema was null or undefined when calling createRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleWithPermissionsSchemaToJSON(requestParameters.createRoleWithPermissionsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleWithVersionSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createRole(requestParameters: CreateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleWithVersionSchema> {
        const response = await this.createRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new segment using the payload provided
     * Create a new segment
     */
    async createSegmentRaw(requestParameters: CreateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.upsertSegmentSchema === null || requestParameters.upsertSegmentSchema === undefined) {
            throw new runtime.RequiredError('upsertSegmentSchema','Required parameter requestParameters.upsertSegmentSchema was null or undefined when calling createSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertSegmentSchemaToJSON(requestParameters.upsertSegmentSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new segment using the payload provided
     * Create a new segment
     */
    async createSegment(requestParameters: CreateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createSegmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGroupRaw(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling deleteGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteGroup(requestParameters: DeleteGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGroupRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deletePatRaw(requestParameters: DeletePatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.secret === null || requestParameters.secret === undefined) {
            throw new runtime.RequiredError('secret','Required parameter requestParameters.secret was null or undefined when calling deletePat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/user/tokens/{secret}`.replace(`{${"secret"}}`, encodeURIComponent(String(requestParameters.secret))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePat(requestParameters: DeletePatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePatRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteProject(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling deleteRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRole(requestParameters: DeleteRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getGoogleSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleSettingsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/google/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getGoogleSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleSettingsSchema> {
        const response = await this.getGoogleSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupRaw(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupSchema>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getGroup(requestParameters: GetGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupSchema> {
        const response = await this.getGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getGroups(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupsSchema> {
        const response = await this.getGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOidcSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcSettingsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/oidc/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getOidcSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcSettingsSchema> {
        const response = await this.getOidcSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PatsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/user/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getPats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PatsSchema> {
        const response = await this.getPatsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPermissionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminPermissionsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminPermissionsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getPermissions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminPermissionsSchema> {
        const response = await this.getPermissionsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectAccessRaw(requestParameters: GetProjectAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectAccessSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectAccess.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/access`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectAccessSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getProjectAccess(requestParameters: GetProjectAccessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectAccessSchema> {
        const response = await this.getProjectAccessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectUsersRaw(requestParameters: GetProjectUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectUsers>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/users`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectUsersFromJSON(jsonValue));
    }

    /**
     */
    async getProjectUsers(requestParameters: GetProjectUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectUsers> {
        const response = await this.getProjectUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRoleByIdRaw(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleWithPermissionsSchema>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getRoleById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleWithPermissionsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getRoleById(requestParameters: GetRoleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleWithPermissionsSchema> {
        const response = await this.getRoleByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRolesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RolesWithVersionSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RolesWithVersionSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getRoles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RolesWithVersionSchema> {
        const response = await this.getRolesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSamlSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SamlSettingsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/saml/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SamlSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getSamlSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SamlSettingsSchema> {
        const response = await this.getSamlSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a segment by id
     */
    async getSegmentRaw(requestParameters: GetSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminSegmentSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminSegmentSchemaFromJSON(jsonValue));
    }

    /**
     * Get a segment by id
     */
    async getSegment(requestParameters: GetSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminSegmentSchema> {
        const response = await this.getSegmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all segments
     */
    async getSegmentsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SegmentsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentsSchemaFromJSON(jsonValue));
    }

    /**
     * Get all segments
     */
    async getSegments(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SegmentsSchema> {
        const response = await this.getSegmentsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getSegmentsByStrategyIdRaw(requestParameters: GetSegmentsByStrategyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SegmentsSchema>> {
        if (requestParameters.strategyId === null || requestParameters.strategyId === undefined) {
            throw new runtime.RequiredError('strategyId','Required parameter requestParameters.strategyId was null or undefined when calling getSegmentsByStrategyId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/strategies/{strategyId}`.replace(`{${"strategyId"}}`, encodeURIComponent(String(requestParameters.strategyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getSegmentsByStrategyId(requestParameters: GetSegmentsByStrategyIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SegmentsSchema> {
        const response = await this.getSegmentsByStrategyIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSimpleSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordAuthSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/simple/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordAuthSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getSimpleSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordAuthSchema> {
        const response = await this.getSimpleSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getStrategiesBySegmentIdRaw(requestParameters: GetStrategiesBySegmentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SegmentsSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStrategiesBySegmentId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/{id}/strategies`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SegmentsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getStrategiesBySegmentId(requestParameters: GetStrategiesBySegmentIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SegmentsSchema> {
        const response = await this.getStrategiesBySegmentIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given an existing environment by name, this endpoint will attempt to delete it
     * Deletes an environment by name
     */
    async removeEnvironmentRaw(requestParameters: RemoveEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling removeEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/environments/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Given an existing environment by name, this endpoint will attempt to delete it
     * Deletes an environment by name
     */
    async removeEnvironment(requestParameters: RemoveEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeEnvironmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeRoleForUserRaw(requestParameters: RemoveRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling removeRoleForUser.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeRoleForUser.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeRoleForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/users/{userId}/roles/{roleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeRoleForUser(requestParameters: RemoveRoleForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRoleForUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeRoleFromGroupRaw(requestParameters: RemoveRoleFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling removeRoleFromGroup.');
        }

        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling removeRoleFromGroup.');
        }

        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling removeRoleFromGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/groups/{groupId}/roles/{roleId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))).replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeRoleFromGroup(requestParameters: RemoveRoleFromGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRoleFromGroupRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a segment by its id, if not found returns a 409 error
     * Deletes a segment by id
     */
    async removeSegmentRaw(requestParameters: RemoveSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a segment by its id, if not found returns a 409 error
     * Deletes a segment by id
     */
    async removeSegment(requestParameters: RemoveSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeSegmentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setGoogleSettingsRaw(requestParameters: SetGoogleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GoogleSettingsSchema>> {
        if (requestParameters.googleSettingsSchema === null || requestParameters.googleSettingsSchema === undefined) {
            throw new runtime.RequiredError('googleSettingsSchema','Required parameter requestParameters.googleSettingsSchema was null or undefined when calling setGoogleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/google/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GoogleSettingsSchemaToJSON(requestParameters.googleSettingsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GoogleSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async setGoogleSettings(requestParameters: SetGoogleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GoogleSettingsSchema> {
        const response = await this.setGoogleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setOidcSettingsRaw(requestParameters: SetOidcSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OidcSettingsSchema>> {
        if (requestParameters.oidcSettingsSchema === null || requestParameters.oidcSettingsSchema === undefined) {
            throw new runtime.RequiredError('oidcSettingsSchema','Required parameter requestParameters.oidcSettingsSchema was null or undefined when calling setOidcSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/oidc/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OidcSettingsSchemaToJSON(requestParameters.oidcSettingsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OidcSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async setOidcSettings(requestParameters: SetOidcSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OidcSettingsSchema> {
        const response = await this.setOidcSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setSamlSettingsRaw(requestParameters: SetSamlSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SamlSettingsSchema>> {
        if (requestParameters.samlSettingsSchema === null || requestParameters.samlSettingsSchema === undefined) {
            throw new runtime.RequiredError('samlSettingsSchema','Required parameter requestParameters.samlSettingsSchema was null or undefined when calling setSamlSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/saml/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SamlSettingsSchemaToJSON(requestParameters.samlSettingsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SamlSettingsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async setSamlSettings(requestParameters: SetSamlSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SamlSettingsSchema> {
        const response = await this.setSamlSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setSimpleSettingsRaw(requestParameters: SetSimpleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordAuthSchema>> {
        if (requestParameters.passwordAuthSchema === null || requestParameters.passwordAuthSchema === undefined) {
            throw new runtime.RequiredError('passwordAuthSchema','Required parameter requestParameters.passwordAuthSchema was null or undefined when calling setSimpleSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/auth/simple/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordAuthSchemaToJSON(requestParameters.passwordAuthSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordAuthSchemaFromJSON(jsonValue));
    }

    /**
     */
    async setSimpleSettings(requestParameters: SetSimpleSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordAuthSchema> {
        const response = await this.setSimpleSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Given an environment by name updates the environment with the given payload. Note that `name`, `enabled` and `protected` cannot be changed by this API
     * Updates an environment by name
     */
    async updateEnvironmentRaw(requestParameters: UpdateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnvironmentSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateEnvironment.');
        }

        if (requestParameters.updateEnvironmentSchema === null || requestParameters.updateEnvironmentSchema === undefined) {
            throw new runtime.RequiredError('updateEnvironmentSchema','Required parameter requestParameters.updateEnvironmentSchema was null or undefined when calling updateEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/environments/update/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEnvironmentSchemaToJSON(requestParameters.updateEnvironmentSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnvironmentSchemaFromJSON(jsonValue));
    }

    /**
     * Given an environment by name updates the environment with the given payload. Note that `name`, `enabled` and `protected` cannot be changed by this API
     * Updates an environment by name
     */
    async updateEnvironment(requestParameters: UpdateEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnvironmentSchema> {
        const response = await this.updateEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets the segments of the strategy to be exactly the ones passed in the payload
     * Updates the segments of a strategy by id
     */
    async updateFeatureStrategySegmentsRaw(requestParameters: UpdateFeatureStrategySegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateFeatureStrategySegmentsSchema === null || requestParameters.updateFeatureStrategySegmentsSchema === undefined) {
            throw new runtime.RequiredError('updateFeatureStrategySegmentsSchema','Required parameter requestParameters.updateFeatureStrategySegmentsSchema was null or undefined when calling updateFeatureStrategySegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/strategies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureStrategySegmentsSchemaToJSON(requestParameters.updateFeatureStrategySegmentsSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the segments of the strategy to be exactly the ones passed in the payload
     * Updates the segments of a strategy by id
     */
    async updateFeatureStrategySegments(requestParameters: UpdateFeatureStrategySegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFeatureStrategySegmentsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupSchema>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling updateGroup.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/groups/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupSchema> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateProject.');
        }

        if (requestParameters.updateProjectSchema === null || requestParameters.updateProjectSchema === undefined) {
            throw new runtime.RequiredError('updateProjectSchema','Required parameter requestParameters.updateProjectSchema was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectSchemaToJSON(requestParameters.updateProjectSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleWithVersionSchema>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateRole.');
        }

        if (requestParameters.createRoleWithPermissionsSchema === null || requestParameters.createRoleWithPermissionsSchema === undefined) {
            throw new runtime.RequiredError('createRoleWithPermissionsSchema','Required parameter requestParameters.createRoleWithPermissionsSchema was null or undefined when calling updateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles/{roleId}`.replace(`{${"roleId"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleWithPermissionsSchemaToJSON(requestParameters.createRoleWithPermissionsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleWithVersionSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleWithVersionSchema> {
        const response = await this.updateRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the content of the segment with the provided payload
     * Update segment by id
     */
    async updateSegmentRaw(requestParameters: UpdateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the content of the segment with the provided payload
     * Update segment by id
     */
    async updateSegment(requestParameters: UpdateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSegmentRaw(requestParameters, initOverrides);
    }

    /**
     * Uses the name provided in the body of the request to validate if the given name exists or not
     * Validates if an environment name exists
     */
    async validateEnvironmentNameRaw(requestParameters: ValidateEnvironmentNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nameSchema === null || requestParameters.nameSchema === undefined) {
            throw new runtime.RequiredError('nameSchema','Required parameter requestParameters.nameSchema was null or undefined when calling validateEnvironmentName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/environments/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NameSchemaToJSON(requestParameters.nameSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uses the name provided in the body of the request to validate if the given name exists or not
     * Validates if an environment name exists
     */
    async validateEnvironmentName(requestParameters: ValidateEnvironmentNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateEnvironmentNameRaw(requestParameters, initOverrides);
    }

    /**
     */
    async validateProjectRaw(requestParameters: ValidateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.validateProjectSchema === null || requestParameters.validateProjectSchema === undefined) {
            throw new runtime.RequiredError('validateProjectSchema','Required parameter requestParameters.validateProjectSchema was null or undefined when calling validateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateProjectSchemaToJSON(requestParameters.validateProjectSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validateProject(requestParameters: ValidateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async validateRoleRaw(requestParameters: ValidateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createRoleWithPermissionsSchema === null || requestParameters.createRoleWithPermissionsSchema === undefined) {
            throw new runtime.RequiredError('createRoleWithPermissionsSchema','Required parameter requestParameters.createRoleWithPermissionsSchema was null or undefined when calling validateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/roles/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoleWithPermissionsSchemaToJSON(requestParameters.createRoleWithPermissionsSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validateRole(requestParameters: ValidateRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateRoleRaw(requestParameters, initOverrides);
    }

    /**
     * Uses the name provided in the body of the request to validate if the given name exists or not
     * Validates if a segment name exists
     */
    async validateSegmentRaw(requestParameters: ValidateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nameSchema === null || requestParameters.nameSchema === undefined) {
            throw new runtime.RequiredError('nameSchema','Required parameter requestParameters.nameSchema was null or undefined when calling validateSegment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/segments/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NameSchemaToJSON(requestParameters.nameSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uses the name provided in the body of the request to validate if the given name exists or not
     * Validates if a segment name exists
     */
    async validateSegment(requestParameters: ValidateSegmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateSegmentRaw(requestParameters, initOverrides);
    }

}
