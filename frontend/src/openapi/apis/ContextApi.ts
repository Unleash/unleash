/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContextFieldSchema,
  NameSchema,
  UpsertContextFieldSchema,
} from '../models';
import {
    ContextFieldSchemaFromJSON,
    ContextFieldSchemaToJSON,
    NameSchemaFromJSON,
    NameSchemaToJSON,
    UpsertContextFieldSchemaFromJSON,
    UpsertContextFieldSchemaToJSON,
} from '../models';

export interface CreateContextFieldRequest {
    upsertContextFieldSchema: UpsertContextFieldSchema;
}

export interface DeleteContextFieldRequest {
    contextField: string;
}

export interface GetContextFieldRequest {
    contextField: string;
}

export interface UpdateContextFieldRequest {
    contextField: string;
    upsertContextFieldSchema: UpsertContextFieldSchema;
}

export interface ValidateRequest {
    nameSchema: NameSchema;
}

/**
 * 
 */
export class ContextApi extends runtime.BaseAPI {

    /**
     */
    async createContextFieldRaw(requestParameters: CreateContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextFieldSchema>> {
        if (requestParameters.upsertContextFieldSchema === null || requestParameters.upsertContextFieldSchema === undefined) {
            throw new runtime.RequiredError('upsertContextFieldSchema','Required parameter requestParameters.upsertContextFieldSchema was null or undefined when calling createContextField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertContextFieldSchemaToJSON(requestParameters.upsertContextFieldSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFieldSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createContextField(requestParameters: CreateContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextFieldSchema> {
        const response = await this.createContextFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteContextFieldRaw(requestParameters: DeleteContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contextField === null || requestParameters.contextField === undefined) {
            throw new runtime.RequiredError('contextField','Required parameter requestParameters.contextField was null or undefined when calling deleteContextField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context/{contextField}`.replace(`{${"contextField"}}`, encodeURIComponent(String(requestParameters.contextField))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteContextField(requestParameters: DeleteContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteContextFieldRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getContextFieldRaw(requestParameters: GetContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextFieldSchema>> {
        if (requestParameters.contextField === null || requestParameters.contextField === undefined) {
            throw new runtime.RequiredError('contextField','Required parameter requestParameters.contextField was null or undefined when calling getContextField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context/{contextField}`.replace(`{${"contextField"}}`, encodeURIComponent(String(requestParameters.contextField))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextFieldSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getContextField(requestParameters: GetContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextFieldSchema> {
        const response = await this.getContextFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getContextFieldsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ContextFieldSchema>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ContextFieldSchemaFromJSON));
    }

    /**
     */
    async getContextFields(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ContextFieldSchema>> {
        const response = await this.getContextFieldsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateContextFieldRaw(requestParameters: UpdateContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contextField === null || requestParameters.contextField === undefined) {
            throw new runtime.RequiredError('contextField','Required parameter requestParameters.contextField was null or undefined when calling updateContextField.');
        }

        if (requestParameters.upsertContextFieldSchema === null || requestParameters.upsertContextFieldSchema === undefined) {
            throw new runtime.RequiredError('upsertContextFieldSchema','Required parameter requestParameters.upsertContextFieldSchema was null or undefined when calling updateContextField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context/{contextField}`.replace(`{${"contextField"}}`, encodeURIComponent(String(requestParameters.contextField))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertContextFieldSchemaToJSON(requestParameters.upsertContextFieldSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateContextField(requestParameters: UpdateContextFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateContextFieldRaw(requestParameters, initOverrides);
    }

    /**
     */
    async validateRaw(requestParameters: ValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nameSchema === null || requestParameters.nameSchema === undefined) {
            throw new runtime.RequiredError('nameSchema','Required parameter requestParameters.nameSchema was null or undefined when calling validate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/context/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NameSchemaToJSON(requestParameters.nameSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validate(requestParameters: ValidateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateRaw(requestParameters, initOverrides);
    }

}
