/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateInvitedUserSchema,
  PublicSignupTokenCreateSchema,
  PublicSignupTokenSchema,
  PublicSignupTokenUpdateSchema,
  PublicSignupTokensSchema,
  UserSchema,
} from '../models';
import {
    CreateInvitedUserSchemaFromJSON,
    CreateInvitedUserSchemaToJSON,
    PublicSignupTokenCreateSchemaFromJSON,
    PublicSignupTokenCreateSchemaToJSON,
    PublicSignupTokenSchemaFromJSON,
    PublicSignupTokenSchemaToJSON,
    PublicSignupTokenUpdateSchemaFromJSON,
    PublicSignupTokenUpdateSchemaToJSON,
    PublicSignupTokensSchemaFromJSON,
    PublicSignupTokensSchemaToJSON,
    UserSchemaFromJSON,
    UserSchemaToJSON,
} from '../models';

export interface AddPublicSignupTokenUserRequest {
    token: string;
    createInvitedUserSchema: CreateInvitedUserSchema;
}

export interface CreatePublicSignupTokenRequest {
    publicSignupTokenCreateSchema: PublicSignupTokenCreateSchema;
}

export interface GetPublicSignupTokenRequest {
    token: string;
}

export interface UpdatePublicSignupTokenRequest {
    token: string;
    publicSignupTokenUpdateSchema: PublicSignupTokenUpdateSchema;
}

export interface ValidatePublicSignupTokenRequest {
    token: string;
}

/**
 * 
 */
export class PublicSignupTokensApi extends runtime.BaseAPI {

    /**
     */
    async addPublicSignupTokenUserRaw(requestParameters: AddPublicSignupTokenUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSchema>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling addPublicSignupTokenUser.');
        }

        if (requestParameters.createInvitedUserSchema === null || requestParameters.createInvitedUserSchema === undefined) {
            throw new runtime.RequiredError('createInvitedUserSchema','Required parameter requestParameters.createInvitedUserSchema was null or undefined when calling addPublicSignupTokenUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/invite/{token}/signup`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvitedUserSchemaToJSON(requestParameters.createInvitedUserSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSchemaFromJSON(jsonValue));
    }

    /**
     */
    async addPublicSignupTokenUser(requestParameters: AddPublicSignupTokenUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSchema> {
        const response = await this.addPublicSignupTokenUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPublicSignupTokenRaw(requestParameters: CreatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSignupTokenSchema>> {
        if (requestParameters.publicSignupTokenCreateSchema === null || requestParameters.publicSignupTokenCreateSchema === undefined) {
            throw new runtime.RequiredError('publicSignupTokenCreateSchema','Required parameter requestParameters.publicSignupTokenCreateSchema was null or undefined when calling createPublicSignupToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/invite-link/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicSignupTokenCreateSchemaToJSON(requestParameters.publicSignupTokenCreateSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSignupTokenSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createPublicSignupToken(requestParameters: CreatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSignupTokenSchema> {
        const response = await this.createPublicSignupTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllPublicSignupTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSignupTokensSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/invite-link/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSignupTokensSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllPublicSignupTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSignupTokensSchema> {
        const response = await this.getAllPublicSignupTokensRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPublicSignupTokenRaw(requestParameters: GetPublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSignupTokenSchema>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getPublicSignupToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/invite-link/tokens/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSignupTokenSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getPublicSignupToken(requestParameters: GetPublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSignupTokenSchema> {
        const response = await this.getPublicSignupTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePublicSignupTokenRaw(requestParameters: UpdatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PublicSignupTokenSchema>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling updatePublicSignupToken.');
        }

        if (requestParameters.publicSignupTokenUpdateSchema === null || requestParameters.publicSignupTokenUpdateSchema === undefined) {
            throw new runtime.RequiredError('publicSignupTokenUpdateSchema','Required parameter requestParameters.publicSignupTokenUpdateSchema was null or undefined when calling updatePublicSignupToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/invite-link/tokens/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PublicSignupTokenUpdateSchemaToJSON(requestParameters.publicSignupTokenUpdateSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicSignupTokenSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updatePublicSignupToken(requestParameters: UpdatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PublicSignupTokenSchema> {
        const response = await this.updatePublicSignupTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validatePublicSignupTokenRaw(requestParameters: ValidatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling validatePublicSignupToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/invite/{token}/validate`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validatePublicSignupToken(requestParameters: ValidatePublicSignupTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validatePublicSignupTokenRaw(requestParameters, initOverrides);
    }

}
