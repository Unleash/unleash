/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StrategiesSchema,
  StrategySchema,
  UpsertStrategySchema,
} from '../models';
import {
    StrategiesSchemaFromJSON,
    StrategiesSchemaToJSON,
    StrategySchemaFromJSON,
    StrategySchemaToJSON,
    UpsertStrategySchemaFromJSON,
    UpsertStrategySchemaToJSON,
} from '../models';

export interface CreateStrategyRequest {
    upsertStrategySchema: UpsertStrategySchema;
}

export interface DeprecateStrategyRequest {
    strategyName: string;
}

export interface GetStrategyRequest {
    name: string;
}

export interface ReactivateStrategyRequest {
    strategyName: string;
}

export interface RemoveStrategyRequest {
    name: string;
}

export interface UpdateStrategyRequest {
    strategyName: string;
    upsertStrategySchema: UpsertStrategySchema;
}

/**
 * 
 */
export class StrategiesApi extends runtime.BaseAPI {

    /**
     */
    async createStrategyRaw(requestParameters: CreateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StrategySchema>> {
        if (requestParameters.upsertStrategySchema === null || requestParameters.upsertStrategySchema === undefined) {
            throw new runtime.RequiredError('upsertStrategySchema','Required parameter requestParameters.upsertStrategySchema was null or undefined when calling createStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertStrategySchemaToJSON(requestParameters.upsertStrategySchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async createStrategy(requestParameters: CreateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StrategySchema> {
        const response = await this.createStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deprecateStrategyRaw(requestParameters: DeprecateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.strategyName === null || requestParameters.strategyName === undefined) {
            throw new runtime.RequiredError('strategyName','Required parameter requestParameters.strategyName was null or undefined when calling deprecateStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies/{strategyName}/deprecate`.replace(`{${"strategyName"}}`, encodeURIComponent(String(requestParameters.strategyName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deprecateStrategy(requestParameters: DeprecateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deprecateStrategyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllStrategiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StrategiesSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StrategiesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllStrategies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StrategiesSchema> {
        const response = await this.getAllStrategiesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getStrategyRaw(requestParameters: GetStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StrategySchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async getStrategy(requestParameters: GetStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StrategySchema> {
        const response = await this.getStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reactivateStrategyRaw(requestParameters: ReactivateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.strategyName === null || requestParameters.strategyName === undefined) {
            throw new runtime.RequiredError('strategyName','Required parameter requestParameters.strategyName was null or undefined when calling reactivateStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies/{strategyName}/reactivate`.replace(`{${"strategyName"}}`, encodeURIComponent(String(requestParameters.strategyName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async reactivateStrategy(requestParameters: ReactivateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reactivateStrategyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeStrategyRaw(requestParameters: RemoveStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling removeStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeStrategy(requestParameters: RemoveStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeStrategyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateStrategyRaw(requestParameters: UpdateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.strategyName === null || requestParameters.strategyName === undefined) {
            throw new runtime.RequiredError('strategyName','Required parameter requestParameters.strategyName was null or undefined when calling updateStrategy.');
        }

        if (requestParameters.upsertStrategySchema === null || requestParameters.upsertStrategySchema === undefined) {
            throw new runtime.RequiredError('upsertStrategySchema','Required parameter requestParameters.upsertStrategySchema was null or undefined when calling updateStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/strategies/{strategyName}`.replace(`{${"strategyName"}}`, encodeURIComponent(String(requestParameters.strategyName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertStrategySchemaToJSON(requestParameters.upsertStrategySchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateStrategy(requestParameters: UpdateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateStrategyRaw(requestParameters, initOverrides);
    }

}
