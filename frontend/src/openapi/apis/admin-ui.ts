/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    UiConfigSchema,
    SetUiConfigSchema,
    FeedbackResponseSchema,
    FeedbackCreateSchema,
    FeedbackUpdateSchema,
    SplashResponseSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Retrieves the full configuration used to set up the Unleash Admin UI.
 * @summary Get UI configuration
 */
export const getUiConfig = () => {
    return fetcher<UiConfigSchema>({
        url: `/api/admin/ui-config`,
        method: 'get',
    });
};

export const getGetUiConfigKey = () => [`/api/admin/ui-config`] as const;

export type GetUiConfigQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUiConfig>>
>;
export type GetUiConfigQueryError = ErrorType<unknown>;

/**
 * @summary Get UI configuration
 */
export const useGetUiConfig = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUiConfig>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetUiConfigKey() : null));
    const swrFn = () => getUiConfig();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Sets the UI configuration for this Unleash instance.
 * @summary Set UI configuration
 */
export const setUiConfig = (setUiConfigSchema: BodyType<SetUiConfigSchema>) => {
    return fetcher<void>({
        url: `/api/admin/ui-config`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: setUiConfigSchema,
    });
};

/**
 * Sends feedback gathered from the Unleash UI to the Unleash server. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).
 * @summary Send Unleash feedback
 */
export const createFeedback = (
    feedbackCreateSchema: BodyType<FeedbackCreateSchema>
) => {
    return fetcher<FeedbackResponseSchema>({
        url: `/api/admin/feedback`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: feedbackCreateSchema,
    });
};

/**
 * Updates the feedback with the provided ID. Only provided fields are updated. Fields left out are left untouched. Must be called with a token with an identifiable user (either from being sent from the UI or from using a [PAT](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens)).
 * @summary Update Unleash feedback
 */
export const updateFeedback = (
    id: string,
    feedbackUpdateSchema: BodyType<FeedbackUpdateSchema>
) => {
    return fetcher<FeedbackResponseSchema>({
        url: `/api/admin/feedback/${id}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: feedbackUpdateSchema,
    });
};

/**
 * This operation updates splash settings for a user, indicating that they have seen a particualar splash screen.
 * @summary Update splash settings
 */
export const updateSplashSettings = (id: string) => {
    return fetcher<SplashResponseSchema>({
        url: `/api/admin/splash/${id}`,
        method: 'post',
    });
};
