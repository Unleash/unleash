/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ApiTokensSchema,
    GetAllApiTokens401,
    GetAllApiTokens403,
    ApiTokenSchema,
    CreateApiTokenSchema,
    GetApiTokensByName401,
    GetApiTokensByName403,
    UpdateApiTokenSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Retrieves all API tokens that exist in the Unleash instance.
 * @summary Get API tokens
 */
export const getAllApiTokens = () => {
    return fetcher<ApiTokensSchema>({
        url: `/api/admin/api-tokens`,
        method: 'get',
    });
};

export const getGetAllApiTokensKey = () => [`/api/admin/api-tokens`] as const;

export type GetAllApiTokensQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllApiTokens>>
>;
export type GetAllApiTokensQueryError = ErrorType<
    GetAllApiTokens401 | GetAllApiTokens403
>;

/**
 * @summary Get API tokens
 */
export const useGetAllApiTokens = <
    TError = ErrorType<GetAllApiTokens401 | GetAllApiTokens403>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllApiTokens>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllApiTokensKey() : null));
    const swrFn = () => getAllApiTokens();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create an API token of a specific type: one of client, admin, frontend.
 * @summary Create API token
 */
export const createApiToken = (
    createApiTokenSchema: BodyType<CreateApiTokenSchema>
) => {
    return fetcher<ApiTokenSchema>({
        url: `/api/admin/api-tokens`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createApiTokenSchema,
    });
};

/**
 * Retrieves all API tokens that match a given token name. Because token names are not unique, this endpoint will always return a list. If no tokens with the provided name exist, the list will be empty. Otherwise, it will contain all the tokens with the given name.
 * @summary Get API tokens by name
 */
export const getApiTokensByName = (name: string) => {
    return fetcher<ApiTokensSchema>({
        url: `/api/admin/api-tokens/${name}`,
        method: 'get',
    });
};

export const getGetApiTokensByNameKey = (name: string) =>
    [`/api/admin/api-tokens/${name}`] as const;

export type GetApiTokensByNameQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiTokensByName>>
>;
export type GetApiTokensByNameQueryError = ErrorType<
    GetApiTokensByName401 | GetApiTokensByName403
>;

/**
 * @summary Get API tokens by name
 */
export const useGetApiTokensByName = <
    TError = ErrorType<GetApiTokensByName401 | GetApiTokensByName403>
>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getApiTokensByName>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetApiTokensByNameKey(name) : null));
    const swrFn = () => getApiTokensByName(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Updates an existing API token with a new expiry date. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.
 * @summary Update API token
 */
export const updateApiToken = (
    token: string,
    updateApiTokenSchema: BodyType<UpdateApiTokenSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/api-tokens/${token}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateApiTokenSchema,
    });
};

/**
 * Deletes an existing API token. The `token` path parameter is the token's `secret`. If the token does not exist, this endpoint returns a 200 OK, but does nothing.
 * @summary Delete API token
 */
export const deleteApiToken = (token: string) => {
    return fetcher<void>({
        url: `/api/admin/api-tokens/${token}`,
        method: 'delete',
    });
};
