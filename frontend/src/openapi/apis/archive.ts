/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { FeaturesSchema, BatchFeaturesSchema } from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * @deprecated
 */
export const getArchivedFeatures = () => {
    return fetcher<FeaturesSchema>({
        url: `/api/admin/archive/features`,
        method: 'get',
    });
};

export const getGetArchivedFeaturesKey = () =>
    [`/api/admin/archive/features`] as const;

export type GetArchivedFeaturesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getArchivedFeatures>>
>;
export type GetArchivedFeaturesQueryError = ErrorType<unknown>;

/**
 * @deprecated
 */
export const useGetArchivedFeatures = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getArchivedFeatures>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetArchivedFeaturesKey() : null));
    const swrFn = () => getArchivedFeatures();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @deprecated
 */
export const getArchivedFeaturesByProjectId = (projectId: string) => {
    return fetcher<FeaturesSchema>({
        url: `/api/admin/archive/features/${projectId}`,
        method: 'get',
    });
};

export const getGetArchivedFeaturesByProjectIdKey = (projectId: string) =>
    [`/api/admin/archive/features/${projectId}`] as const;

export type GetArchivedFeaturesByProjectIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getArchivedFeaturesByProjectId>>
>;
export type GetArchivedFeaturesByProjectIdQueryError = ErrorType<unknown>;

/**
 * @deprecated
 */
export const useGetArchivedFeaturesByProjectId = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getArchivedFeaturesByProjectId>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled ? getGetArchivedFeaturesByProjectIdKey(projectId) : null);
    const swrFn = () => getArchivedFeaturesByProjectId(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const deleteFeature = (featureName: string) => {
    return fetcher<void>({
        url: `/api/admin/archive/${featureName}`,
        method: 'delete',
    });
};

export const reviveFeature = (featureName: string) => {
    return fetcher<void>({
        url: `/api/admin/archive/revive/${featureName}`,
        method: 'post',
    });
};

/**
 * This endpoint deletes the specified features, that are in archive.
 * @summary Deletes a list of features
 */
export const deleteFeatures = (
    projectId: string,
    batchFeaturesSchema: BodyType<BatchFeaturesSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/delete`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: batchFeaturesSchema,
    });
};

/**
 * This endpoint revives the specified features.
 * @summary Revives a list of features
 */
export const reviveFeatures = (
    projectId: string,
    batchFeaturesSchema: BodyType<BatchFeaturesSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/revive`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: batchFeaturesSchema,
    });
};
