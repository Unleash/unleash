/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    UserSchema,
    LoginSchema,
    GoogleSettingsSchema,
    GetGoogleSettings400,
    GetGoogleSettings401,
    GetGoogleSettings403,
    SamlSettingsSchema,
    GetSamlSettings400,
    GetSamlSettings401,
    GetSamlSettings403,
    OidcSettingsSchema,
    GetOidcSettings400,
    GetOidcSettings401,
    GetOidcSettings403,
    PasswordAuthSchema,
    GetSimpleSettings401,
    GetSimpleSettings403,
    AdminPermissionsSchema,
    TokenUserSchema,
    ValidateToken401,
    ValidateToken415,
    ChangePasswordSchema,
    ValidatePasswordSchema,
    EmailSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Logs in the user and creates an active session
 * @summary Log in
 */
export const login = (loginSchema: BodyType<LoginSchema>) => {
    return fetcher<UserSchema>({
        url: `/auth/simple/login`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: loginSchema,
    });
};

/**
 * Returns the current settings for Google Authentication (deprecated, please use OpenID instead)
 * @deprecated
 * @summary Get Google auth settings
 */
export const getGoogleSettings = () => {
    return fetcher<GoogleSettingsSchema>({
        url: `/api/admin/auth/google/settings`,
        method: 'get',
    });
};

export const getGetGoogleSettingsKey = () =>
    [`/api/admin/auth/google/settings`] as const;

export type GetGoogleSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGoogleSettings>>
>;
export type GetGoogleSettingsQueryError = ErrorType<
    GetGoogleSettings400 | GetGoogleSettings401 | GetGoogleSettings403
>;

/**
 * @deprecated
 * @summary Get Google auth settings
 */
export const useGetGoogleSettings = <
    TError = ErrorType<
        GetGoogleSettings400 | GetGoogleSettings401 | GetGoogleSettings403
    >
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getGoogleSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetGoogleSettingsKey() : null));
    const swrFn = () => getGoogleSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Updates the settings for Google Authentication (deprecated, please use OpenID instead)
 * @deprecated
 * @summary Set Google auth options
 */
export const setGoogleSettings = (
    googleSettingsSchema: BodyType<GoogleSettingsSchema>
) => {
    return fetcher<GoogleSettingsSchema>({
        url: `/api/admin/auth/google/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: googleSettingsSchema,
    });
};

/**
 * Returns the current settings for SAML authentication
 * @summary Get SAML auth settings
 */
export const getSamlSettings = () => {
    return fetcher<SamlSettingsSchema>({
        url: `/api/admin/auth/saml/settings`,
        method: 'get',
    });
};

export const getGetSamlSettingsKey = () =>
    [`/api/admin/auth/saml/settings`] as const;

export type GetSamlSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSamlSettings>>
>;
export type GetSamlSettingsQueryError = ErrorType<
    GetSamlSettings400 | GetSamlSettings401 | GetSamlSettings403
>;

/**
 * @summary Get SAML auth settings
 */
export const useGetSamlSettings = <
    TError = ErrorType<
        GetSamlSettings400 | GetSamlSettings401 | GetSamlSettings403
    >
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getSamlSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetSamlSettingsKey() : null));
    const swrFn = () => getSamlSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Updates the settings for SAML Authentication
 * @summary Update SAML auth settings
 */
export const setSamlSettings = (
    samlSettingsSchema: BodyType<SamlSettingsSchema>
) => {
    return fetcher<SamlSettingsSchema>({
        url: `/api/admin/auth/saml/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: samlSettingsSchema,
    });
};

/**
 * Returns the current settings for OIDC Authentication
 * @summary Get OIDC auth settings
 */
export const getOidcSettings = () => {
    return fetcher<OidcSettingsSchema>({
        url: `/api/admin/auth/oidc/settings`,
        method: 'get',
    });
};

export const getGetOidcSettingsKey = () =>
    [`/api/admin/auth/oidc/settings`] as const;

export type GetOidcSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOidcSettings>>
>;
export type GetOidcSettingsQueryError = ErrorType<
    GetOidcSettings400 | GetOidcSettings401 | GetOidcSettings403
>;

/**
 * @summary Get OIDC auth settings
 */
export const useGetOidcSettings = <
    TError = ErrorType<
        GetOidcSettings400 | GetOidcSettings401 | GetOidcSettings403
    >
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getOidcSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetOidcSettingsKey() : null));
    const swrFn = () => getOidcSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Configure OpenID Connect as a login provider for Unleash.
 * @summary Set OIDC settings
 */
export const setOidcSettings = (
    oidcSettingsSchema: BodyType<OidcSettingsSchema>
) => {
    return fetcher<OidcSettingsSchema>({
        url: `/api/admin/auth/oidc/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: oidcSettingsSchema,
    });
};

/**
 * Is simple authentication (username/password) enabled for this server
 * @summary Get Simple auth settings
 */
export const getSimpleSettings = () => {
    return fetcher<PasswordAuthSchema>({
        url: `/api/admin/auth/simple/settings`,
        method: 'get',
    });
};

export const getGetSimpleSettingsKey = () =>
    [`/api/admin/auth/simple/settings`] as const;

export type GetSimpleSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSimpleSettings>>
>;
export type GetSimpleSettingsQueryError = ErrorType<
    GetSimpleSettings401 | GetSimpleSettings403
>;

/**
 * @summary Get Simple auth settings
 */
export const useGetSimpleSettings = <
    TError = ErrorType<GetSimpleSettings401 | GetSimpleSettings403>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getSimpleSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetSimpleSettingsKey() : null));
    const swrFn = () => getSimpleSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Enable or disable simple authentication (username/password)
 * @summary Update Simple auth settings
 */
export const setSimpleSettings = (
    passwordAuthSchema: BodyType<PasswordAuthSchema>
) => {
    return fetcher<PasswordAuthSchema>({
        url: `/api/admin/auth/simple/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordAuthSchema,
    });
};

/**
 * Returns a list of available permissions
 * @summary Gets available permissions
 */
export const getPermissions = () => {
    return fetcher<AdminPermissionsSchema>({
        url: `/api/admin/permissions`,
        method: 'get',
    });
};

export const getGetPermissionsKey = () => [`/api/admin/permissions`] as const;

export type GetPermissionsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPermissions>>
>;
export type GetPermissionsQueryError = ErrorType<unknown>;

/**
 * @summary Gets available permissions
 */
export const useGetPermissions = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getPermissions>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetPermissionsKey() : null));
    const swrFn = () => getPermissions();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * If the token is valid returns the user that owns the token
 * @summary Validates a token
 */
export const validateToken = () => {
    return fetcher<TokenUserSchema>({
        url: `/auth/reset/validate`,
        method: 'get',
    });
};

export const getValidateTokenKey = () => [`/auth/reset/validate`] as const;

export type ValidateTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof validateToken>>
>;
export type ValidateTokenQueryError = ErrorType<
    ValidateToken401 | ValidateToken415
>;

/**
 * @summary Validates a token
 */
export const useValidateToken = <
    TError = ErrorType<ValidateToken401 | ValidateToken415>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof validateToken>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getValidateTokenKey() : null));
    const swrFn = () => validateToken();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Allows users with a valid reset token to reset their password without remembering their old password
 * @summary Changes a user password
 */
export const changePassword = (
    changePasswordSchema: BodyType<ChangePasswordSchema>
) => {
    return fetcher<void>({
        url: `/auth/reset/password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changePasswordSchema,
    });
};

/**
 * Verifies that the password adheres to the [Unleash password guidelines](https://docs.getunleash.io/reference/deploy/securing-unleash#password-requirements)
 * @summary Validates password
 */
export const validatePassword = (
    validatePasswordSchema: BodyType<ValidatePasswordSchema>
) => {
    return fetcher<void>({
        url: `/auth/reset/validate-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: validatePasswordSchema,
    });
};

/**
 * Requests a password reset email for the user. This email can be used to reset the password for a user that has forgotten their password
 * @summary Reset password
 */
export const sendResetPasswordEmail = (emailSchema: BodyType<EmailSchema>) => {
    return fetcher<void>({
        url: `/auth/reset/password-email`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: emailSchema,
    });
};
