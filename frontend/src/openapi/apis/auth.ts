/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.20.0-beta.2
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    AdminPermissionsSchema,
    UserSchema,
    LoginSchema,
    TokenUserSchema,
    ChangePasswordSchema,
    ValidatePasswordSchema,
    EmailSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getPermissions = () => {
    return fetcher<AdminPermissionsSchema>({
        url: `/api/admin/permissions`,
        method: 'get',
    });
};

export const getGetPermissionsKey = () => [`/api/admin/permissions`];

export type GetPermissionsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPermissions>>
>;
export type GetPermissionsQueryError = ErrorType<unknown>;

export const useGetPermissions = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getPermissions>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetPermissionsKey() : null));
    const swrFn = () => getPermissions();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const login = (loginSchema: BodyType<LoginSchema>) => {
    return fetcher<UserSchema>({
        url: `/demo2/auth/simple/login`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: loginSchema,
    });
};

export const validateToken = () => {
    return fetcher<TokenUserSchema>({
        url: `/demo2/auth/reset/validate`,
        method: 'get',
    });
};

export const getValidateTokenKey = () => [`/demo2/auth/reset/validate`];

export type ValidateTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof validateToken>>
>;
export type ValidateTokenQueryError = ErrorType<unknown>;

export const useValidateToken = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof validateToken>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getValidateTokenKey() : null));
    const swrFn = () => validateToken();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const changePassword = (
    changePasswordSchema: BodyType<ChangePasswordSchema>
) => {
    return fetcher<void>({
        url: `/demo2/auth/reset/password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changePasswordSchema,
    });
};

export const validatePassword = (
    validatePasswordSchema: BodyType<ValidatePasswordSchema>
) => {
    return fetcher<void>({
        url: `/demo2/auth/reset/validate-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: validatePasswordSchema,
    });
};

export const sendResetPasswordEmail = (emailSchema: BodyType<EmailSchema>) => {
    return fetcher<void>({
        url: `/demo2/auth/reset/password-email`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: emailSchema,
    });
};
