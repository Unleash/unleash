/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    UserSchema,
    LoginSchema,
    GoogleSettingsSchema,
    GetGoogleSettings400,
    GetGoogleSettings401,
    SamlSettingsSchema,
    GetSamlSettings400,
    GetSamlSettings401,
    OidcSettingsSchema,
    GetOidcSettings400,
    GetOidcSettings401,
    PasswordAuthSchema,
    AdminPermissionsSchema,
    TokenUserSchema,
    ChangePasswordSchema,
    ValidatePasswordSchema,
    EmailSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const login = (loginSchema: BodyType<LoginSchema>) => {
    return fetcher<UserSchema>({
        url: `/auth/simple/login`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: loginSchema,
    });
};

export const getGoogleSettings = () => {
    return fetcher<GoogleSettingsSchema>({
        url: `/api/admin/auth/google/settings`,
        method: 'get',
    });
};

export const getGetGoogleSettingsKey = () =>
    [`/api/admin/auth/google/settings`] as const;

export type GetGoogleSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGoogleSettings>>
>;
export type GetGoogleSettingsQueryError = ErrorType<
    GetGoogleSettings400 | GetGoogleSettings401
>;

export const useGetGoogleSettings = <
    TError = ErrorType<GetGoogleSettings400 | GetGoogleSettings401>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getGoogleSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetGoogleSettingsKey() : null));
    const swrFn = () => getGoogleSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const setGoogleSettings = (
    googleSettingsSchema: BodyType<GoogleSettingsSchema>
) => {
    return fetcher<GoogleSettingsSchema>({
        url: `/api/admin/auth/google/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: googleSettingsSchema,
    });
};

export const getSamlSettings = () => {
    return fetcher<SamlSettingsSchema>({
        url: `/api/admin/auth/saml/settings`,
        method: 'get',
    });
};

export const getGetSamlSettingsKey = () =>
    [`/api/admin/auth/saml/settings`] as const;

export type GetSamlSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSamlSettings>>
>;
export type GetSamlSettingsQueryError = ErrorType<
    GetSamlSettings400 | GetSamlSettings401
>;

export const useGetSamlSettings = <
    TError = ErrorType<GetSamlSettings400 | GetSamlSettings401>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getSamlSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetSamlSettingsKey() : null));
    const swrFn = () => getSamlSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const setSamlSettings = (
    samlSettingsSchema: BodyType<SamlSettingsSchema>
) => {
    return fetcher<SamlSettingsSchema>({
        url: `/api/admin/auth/saml/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: samlSettingsSchema,
    });
};

export const getOidcSettings = () => {
    return fetcher<OidcSettingsSchema>({
        url: `/api/admin/auth/oidc/settings`,
        method: 'get',
    });
};

export const getGetOidcSettingsKey = () =>
    [`/api/admin/auth/oidc/settings`] as const;

export type GetOidcSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOidcSettings>>
>;
export type GetOidcSettingsQueryError = ErrorType<
    GetOidcSettings400 | GetOidcSettings401
>;

export const useGetOidcSettings = <
    TError = ErrorType<GetOidcSettings400 | GetOidcSettings401>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getOidcSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetOidcSettingsKey() : null));
    const swrFn = () => getOidcSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const setOidcSettings = (
    oidcSettingsSchema: BodyType<OidcSettingsSchema>
) => {
    return fetcher<OidcSettingsSchema>({
        url: `/api/admin/auth/oidc/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: oidcSettingsSchema,
    });
};

export const getSimpleSettings = () => {
    return fetcher<PasswordAuthSchema>({
        url: `/api/admin/auth/simple/settings`,
        method: 'get',
    });
};

export const getGetSimpleSettingsKey = () =>
    [`/api/admin/auth/simple/settings`] as const;

export type GetSimpleSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSimpleSettings>>
>;
export type GetSimpleSettingsQueryError = ErrorType<unknown>;

export const useGetSimpleSettings = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getSimpleSettings>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetSimpleSettingsKey() : null));
    const swrFn = () => getSimpleSettings();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const setSimpleSettings = (
    passwordAuthSchema: BodyType<PasswordAuthSchema>
) => {
    return fetcher<PasswordAuthSchema>({
        url: `/api/admin/auth/simple/settings`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordAuthSchema,
    });
};

export const getPermissions = () => {
    return fetcher<AdminPermissionsSchema>({
        url: `/api/admin/permissions`,
        method: 'get',
    });
};

export const getGetPermissionsKey = () => [`/api/admin/permissions`] as const;

export type GetPermissionsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPermissions>>
>;
export type GetPermissionsQueryError = ErrorType<unknown>;

export const useGetPermissions = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getPermissions>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetPermissionsKey() : null));
    const swrFn = () => getPermissions();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const validateToken = () => {
    return fetcher<TokenUserSchema>({
        url: `/auth/reset/validate`,
        method: 'get',
    });
};

export const getValidateTokenKey = () => [`/auth/reset/validate`] as const;

export type ValidateTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof validateToken>>
>;
export type ValidateTokenQueryError = ErrorType<unknown>;

export const useValidateToken = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof validateToken>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getValidateTokenKey() : null));
    const swrFn = () => validateToken();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const changePassword = (
    changePasswordSchema: BodyType<ChangePasswordSchema>
) => {
    return fetcher<void>({
        url: `/auth/reset/password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changePasswordSchema,
    });
};

export const validatePassword = (
    validatePasswordSchema: BodyType<ValidatePasswordSchema>
) => {
    return fetcher<void>({
        url: `/auth/reset/validate-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: validatePasswordSchema,
    });
};

export const sendResetPasswordEmail = (emailSchema: BodyType<EmailSchema>) => {
    return fetcher<void>({
        url: `/auth/reset/password-email`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: emailSchema,
    });
};
