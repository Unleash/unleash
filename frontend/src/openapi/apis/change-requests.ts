/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ChangeRequestSchema,
    ChangeRequestOneOrManyCreateSchema,
    ChangeRequestConfigSchema,
    UpdateChangeRequestEnvironmentConfigSchema,
    ChangeRequestsSchema,
    GetChangeRequest404,
    ChangeRequestCreateSchema,
    ChangeRequestStateSchema,
    ChangeRequestAddCommentSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Given a change request exists, this endpoint will attempt to add a change to
                         an existing change request for the user. If a change request does not exist.
                         It will attempt to create it.
 * @summary Create/Add change to a change request
 */
export const changeRequest = (
    projectId: string,
    environment: string,
    changeRequestOneOrManyCreateSchema: BodyType<ChangeRequestOneOrManyCreateSchema>
) => {
    return fetcher<ChangeRequestSchema>({
        url: `/api/admin/projects/${projectId}/environments/${environment}/change-requests`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changeRequestOneOrManyCreateSchema,
    });
};

/**
 * Given a projectId, this endpoint will retrieve change request configuration for the project
 * @summary Retrieves change request configuration for a project
 */
export const getProjectChangeRequestConfig = (projectId: string) => {
    return fetcher<ChangeRequestConfigSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/config`,
        method: 'get',
    });
};

export const getGetProjectChangeRequestConfigKey = (projectId: string) =>
    [`/api/admin/projects/${projectId}/change-requests/config`] as const;

export type GetProjectChangeRequestConfigQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectChangeRequestConfig>>
>;
export type GetProjectChangeRequestConfigQueryError = ErrorType<unknown>;

/**
 * @summary Retrieves change request configuration for a project
 */
export const useGetProjectChangeRequestConfig = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectChangeRequestConfig>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled ? getGetProjectChangeRequestConfigKey(projectId) : null);
    const swrFn = () => getProjectChangeRequestConfig(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will change the change request configuration for a given environment, set it to either on/off and optionally configure the number of approvals needed. The minimum number of approvals is 1 and the maximum number is 10. If you provide a number higher than 10 or lower than 1, Unleash will clamp it to the allowed range.
 * @summary Updates change request configuration for an environment in the project
 */
export const updateProjectChangeRequestConfig = (
    projectId: string,
    environment: string,
    updateChangeRequestEnvironmentConfigSchema: BodyType<UpdateChangeRequestEnvironmentConfigSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/environments/${environment}/change-requests/config`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateChangeRequestEnvironmentConfigSchema,
    });
};

/**
 * This endpoint will retrieve the pending change requests in the configured environments for the project, for the current user performing the request.
 * @summary Retrieves pending change requests in configured environments
 */
export const getOpenChangeRequestsForUser = (projectId: string) => {
    return fetcher<ChangeRequestsSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/open`,
        method: 'get',
    });
};

export const getGetOpenChangeRequestsForUserKey = (projectId: string) =>
    [`/api/admin/projects/${projectId}/change-requests/open`] as const;

export type GetOpenChangeRequestsForUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOpenChangeRequestsForUser>>
>;
export type GetOpenChangeRequestsForUserQueryError = ErrorType<unknown>;

/**
 * @summary Retrieves pending change requests in configured environments
 */
export const useGetOpenChangeRequestsForUser = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getOpenChangeRequestsForUser>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled ? getGetOpenChangeRequestsForUserKey(projectId) : null);
    const swrFn = () => getOpenChangeRequestsForUser(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will retrieve the pending change requests in the configured environments for the project, for the current user performing the request.
 * @summary Retrieves pending change requests in configured environments
 */
export const getPendingChangeRequestsForUser = (projectId: string) => {
    return fetcher<ChangeRequestsSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/pending`,
        method: 'get',
    });
};

export const getGetPendingChangeRequestsForUserKey = (projectId: string) =>
    [`/api/admin/projects/${projectId}/change-requests/pending`] as const;

export type GetPendingChangeRequestsForUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPendingChangeRequestsForUser>>
>;
export type GetPendingChangeRequestsForUserQueryError = ErrorType<unknown>;

/**
 * @summary Retrieves pending change requests in configured environments
 */
export const useGetPendingChangeRequestsForUser = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getPendingChangeRequestsForUser>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetPendingChangeRequestsForUserKey(projectId)
                : null);
    const swrFn = () => getPendingChangeRequestsForUser(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will retrieve all change requests regardless of status for a given project. There's an upper limit of last 300 change requests ordered by creation date.
 * @summary Retrieves all change requests for a project
 */
export const getChangeRequestsForProject = (projectId: string) => {
    return fetcher<ChangeRequestsSchema>({
        url: `/api/admin/projects/${projectId}/change-requests`,
        method: 'get',
    });
};

export const getGetChangeRequestsForProjectKey = (projectId: string) =>
    [`/api/admin/projects/${projectId}/change-requests`] as const;

export type GetChangeRequestsForProjectQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangeRequestsForProject>>
>;
export type GetChangeRequestsForProjectQueryError = ErrorType<unknown>;

/**
 * @summary Retrieves all change requests for a project
 */
export const useGetChangeRequestsForProject = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getChangeRequestsForProject>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled ? getGetChangeRequestsForProjectKey(projectId) : null);
    const swrFn = () => getChangeRequestsForProject(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will retrieve all pending change requests (change requests with a status of Draft | In review | Approved) referencing the given feature toggle name.
 * @summary Retrieves all pending change requests referencing a feature in the project
 */
export const getPendingChangeRequestsForFeature = (
    projectId: string,
    featureName: string
) => {
    return fetcher<ChangeRequestsSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/pending/${featureName}`,
        method: 'get',
    });
};

export const getGetPendingChangeRequestsForFeatureKey = (
    projectId: string,
    featureName: string
) =>
    [
        `/api/admin/projects/${projectId}/change-requests/pending/${featureName}`,
    ] as const;

export type GetPendingChangeRequestsForFeatureQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPendingChangeRequestsForFeature>>
>;
export type GetPendingChangeRequestsForFeatureQueryError = ErrorType<unknown>;

/**
 * @summary Retrieves all pending change requests referencing a feature in the project
 */
export const useGetPendingChangeRequestsForFeature = <
    TError = ErrorType<unknown>
>(
    projectId: string,
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getPendingChangeRequestsForFeature>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false && !!(projectId && featureName);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetPendingChangeRequestsForFeatureKey(
                      projectId,
                      featureName
                  )
                : null);
    const swrFn = () =>
        getPendingChangeRequestsForFeature(projectId, featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will retrieve one change request if it matches the provided id.
 * @summary Retrieves one change request by id
 */
export const getChangeRequest = (projectId: string, id: string) => {
    return fetcher<ChangeRequestSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/${id}`,
        method: 'get',
    });
};

export const getGetChangeRequestKey = (projectId: string, id: string) =>
    [`/api/admin/projects/${projectId}/change-requests/${id}`] as const;

export type GetChangeRequestQueryResult = NonNullable<
    Awaited<ReturnType<typeof getChangeRequest>>
>;
export type GetChangeRequestQueryError = ErrorType<GetChangeRequest404>;

/**
 * @summary Retrieves one change request by id
 */
export const useGetChangeRequest = <TError = ErrorType<GetChangeRequest404>>(
    projectId: string,
    id: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getChangeRequest>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!(projectId && id);
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetChangeRequestKey(projectId, id) : null));
    const swrFn = () => getChangeRequest(projectId, id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * This endpoint will delete one change request if it matches the provided id.
 * @summary Deletes a change request by id
 */
export const deleteChangeRequest = (projectId: string, id: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/change-requests/${id}`,
        method: 'delete',
    });
};

/**
 * This endpoint will discard one change from a change request if it matches the provided id.
 * @summary Discards a change from a change request by change id
 */
export const deleteChange = (
    projectId: string,
    changeRequestId: string,
    changeId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/change-requests/${changeRequestId}/changes/${changeId}`,
        method: 'delete',
    });
};

/**
 * This endpoint will edit one change from a change request if it matches the provided id. The edit removes previous change and inserts a new one. You
                    should not rely on the changeId for subsequent edits and always check the most recent changeId.
 * @summary Edits a single change in a change request
 */
export const editChange = (
    projectId: string,
    changeRequestId: string,
    changeId: string,
    changeRequestCreateSchema: BodyType<ChangeRequestCreateSchema>
) => {
    return fetcher<ChangeRequestSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/${changeRequestId}/changes/${changeId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: changeRequestCreateSchema,
    });
};

/**
 * This endpoint will update the state of a change request if the business rules allow it. The state can be one of the following: Draft, In review, Approved, Cancelled, Applied. In order to be approved, the change request must have at least one change and the number of approvals must be greater than or equal to the number of approvals required for the environment.

                    Once a change request has been approved, it can be applied. Once a change request has been applied, it cannot be changed. Once a change request has been cancelled, it cannot be changed. Any change to a change request in the state of Approved will result in the state being set to In Review and the number of approvals will be reset.
 * @summary This endpoint will update the state of a change request
 */
export const updateChangeRequestState = (projectId: string, id: string) => {
    return fetcher<ChangeRequestStateSchema>({
        url: `/api/admin/projects/${projectId}/change-requests/${id}/state`,
        method: 'put',
    });
};

/**
 * Change requests get a default title e.g. Change Request #1. This endpoint allows to make the title
                    more meaningful and describe the intent behind the Change Request
 * @summary This endpoint will update the custom title of a change request
 */
export const updateChangeRequestTitle = (projectId: string, id: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/change-requests/${id}/title`,
        method: 'put',
    });
};

/**
 * This endpoint will add a comment to a change request for the user making the request.
 * @summary This endpoint will add a comment to a change request
 */
export const addChangeRequestComment = (
    projectId: string,
    id: string,
    changeRequestAddCommentSchema: BodyType<ChangeRequestAddCommentSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/change-requests/${id}/comments`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changeRequestAddCommentSchema,
    });
};
