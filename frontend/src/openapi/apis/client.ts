/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.19.1
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ClientFeaturesSchema,
    ClientMetricsSchema,
    ClientApplicationSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getClientFeature = (featureName: string) => {
    return fetcher<ClientFeaturesSchema>({
        url: `/api/client/features/${featureName}`,
        method: 'get',
    });
};

export const getGetClientFeatureKey = (featureName: string) => [
    `/api/client/features/${featureName}`,
];

export type GetClientFeatureQueryResult = NonNullable<
    Awaited<ReturnType<typeof getClientFeature>>
>;
export type GetClientFeatureQueryError = ErrorType<unknown>;

export const useGetClientFeature = <TError = ErrorType<unknown>>(
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getClientFeature>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!featureName;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetClientFeatureKey(featureName) : null));
    const swrFn = () => getClientFeature(featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getAllClientFeatures = () => {
    return fetcher<ClientFeaturesSchema>({
        url: `/api/client/features`,
        method: 'get',
    });
};

export const getGetAllClientFeaturesKey = () => [`/api/client/features`];

export type GetAllClientFeaturesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllClientFeatures>>
>;
export type GetAllClientFeaturesQueryError = ErrorType<unknown>;

export const useGetAllClientFeatures = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllClientFeatures>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllClientFeaturesKey() : null));
    const swrFn = () => getAllClientFeatures();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const registerClientMetrics = (
    clientMetricsSchema: BodyType<ClientMetricsSchema>
) => {
    return fetcher<void>({
        url: `/api/client/metrics`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: clientMetricsSchema,
    });
};

export const registerClientApplication = (
    clientApplicationSchema: BodyType<ClientApplicationSchema>
) => {
    return fetcher<void>({
        url: `/api/client/register`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: clientApplicationSchema,
    });
};
