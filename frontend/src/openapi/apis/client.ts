/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ClientFeatureSchema,
    ClientFeaturesSchema,
    ClientMetricsSchema,
    ClientApplicationSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Gets all the client data for a single toggle. Contains the exact same information about a toggle as the `/api/client/features` endpoint does, but only contains data about the specified toggle. All SDKs should use `/api/client/features`
 * @summary Get a single feature toggle
 */
export const getClientFeature = (featureName: string) => {
    return fetcher<ClientFeatureSchema>({
        url: `/api/client/features/${featureName}`,
        method: 'get',
    });
};

export const getGetClientFeatureKey = (featureName: string) =>
    [`/api/client/features/${featureName}`] as const;

export type GetClientFeatureQueryResult = NonNullable<
    Awaited<ReturnType<typeof getClientFeature>>
>;
export type GetClientFeatureQueryError = ErrorType<unknown>;

/**
 * @summary Get a single feature toggle
 */
export const useGetClientFeature = <TError = ErrorType<unknown>>(
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getClientFeature>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!featureName;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetClientFeatureKey(featureName) : null));
    const swrFn = () => getClientFeature(featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Returns the SDK configuration for all feature toggles that are available to the provided API key. Used by SDKs to configure local evaluation
 * @summary Get all toggles (SDK)
 */
export const getAllClientFeatures = () => {
    return fetcher<ClientFeaturesSchema>({
        url: `/api/client/features`,
        method: 'get',
    });
};

export const getGetAllClientFeaturesKey = () =>
    [`/api/client/features`] as const;

export type GetAllClientFeaturesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllClientFeatures>>
>;
export type GetAllClientFeaturesQueryError = ErrorType<unknown>;

/**
 * @summary Get all toggles (SDK)
 */
export const useGetAllClientFeatures = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllClientFeatures>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllClientFeaturesKey() : null));
    const swrFn = () => getAllClientFeatures();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Registers usage metrics. Stores information about how many times each toggle was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature toggle's variants were displayed to the end user.
 * @summary Register client usage metrics
 */
export const registerClientMetrics = (
    clientMetricsSchema: BodyType<ClientMetricsSchema>
) => {
    return fetcher<void>({
        url: `/api/client/metrics`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: clientMetricsSchema,
    });
};

/**
 * Register a client SDK with Unleash. SDKs call this endpoint on startup to tell Unleash about their existence. Used to track custom strategies in use as well as SDK versions.
 * @summary Register a client SDK
 */
export const registerClientApplication = (
    clientApplicationSchema: BodyType<ClientApplicationSchema>
) => {
    return fetcher<void>({
        url: `/api/client/register`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: clientApplicationSchema,
    });
};
