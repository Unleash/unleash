/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ContextFieldsSchema,
    ContextFieldSchema,
    UpsertContextFieldSchema,
    NameSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getContextFields = () => {
    return fetcher<ContextFieldsSchema>({
        url: `/api/admin/context`,
        method: 'get',
    });
};

export const getGetContextFieldsKey = () => [`/api/admin/context`] as const;

export type GetContextFieldsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getContextFields>>
>;
export type GetContextFieldsQueryError = ErrorType<unknown>;

export const useGetContextFields = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getContextFields>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetContextFieldsKey() : null));
    const swrFn = () => getContextFields();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createContextField = (
    upsertContextFieldSchema: BodyType<UpsertContextFieldSchema>
) => {
    return fetcher<ContextFieldSchema>({
        url: `/api/admin/context`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: upsertContextFieldSchema,
    });
};

export const getContextField = (contextField: string) => {
    return fetcher<ContextFieldSchema>({
        url: `/api/admin/context/${contextField}`,
        method: 'get',
    });
};

export const getGetContextFieldKey = (contextField: string) =>
    [`/api/admin/context/${contextField}`] as const;

export type GetContextFieldQueryResult = NonNullable<
    Awaited<ReturnType<typeof getContextField>>
>;
export type GetContextFieldQueryError = ErrorType<unknown>;

export const useGetContextField = <TError = ErrorType<unknown>>(
    contextField: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getContextField>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!contextField;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetContextFieldKey(contextField) : null));
    const swrFn = () => getContextField(contextField);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const updateContextField = (
    contextField: string,
    upsertContextFieldSchema: BodyType<UpsertContextFieldSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/context/${contextField}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: upsertContextFieldSchema,
    });
};

export const deleteContextField = (contextField: string) => {
    return fetcher<void>({
        url: `/api/admin/context/${contextField}`,
        method: 'delete',
    });
};

export const validate = (nameSchema: BodyType<NameSchema>) => {
    return fetcher<void>({
        url: `/api/admin/context/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: nameSchema,
    });
};
