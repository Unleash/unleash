/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.20.0-beta.2
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    EnvironmentSchema,
    EnvironmentsProjectSchema,
    SortOrderSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getAllEnvironments = () => {
    return fetcher<void>({
        url: `/api/admin/environments`,
        method: 'get',
    });
};

export const getGetAllEnvironmentsKey = () => [`/api/admin/environments`];

export type GetAllEnvironmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllEnvironments>>
>;
export type GetAllEnvironmentsQueryError = ErrorType<unknown>;

export const useGetAllEnvironments = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllEnvironments>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllEnvironmentsKey() : null));
    const swrFn = () => getAllEnvironments();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getEnvironment = (name: string) => {
    return fetcher<EnvironmentSchema>({
        url: `/api/admin/environments/${name}`,
        method: 'get',
    });
};

export const getGetEnvironmentKey = (name: string) => [
    `/api/admin/environments/${name}`,
];

export type GetEnvironmentQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEnvironment>>
>;
export type GetEnvironmentQueryError = ErrorType<unknown>;

export const useGetEnvironment = <TError = ErrorType<unknown>>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getEnvironment>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetEnvironmentKey(name) : null));
    const swrFn = () => getEnvironment(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getProjectEnvironments = (projectId: string) => {
    return fetcher<EnvironmentsProjectSchema>({
        url: `/api/admin/environments/project/${projectId}`,
        method: 'get',
    });
};

export const getGetProjectEnvironmentsKey = (projectId: string) => [
    `/api/admin/environments/project/${projectId}`,
];

export type GetProjectEnvironmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectEnvironments>>
>;
export type GetProjectEnvironmentsQueryError = ErrorType<unknown>;

export const useGetProjectEnvironments = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectEnvironments>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectEnvironmentsKey(projectId) : null));
    const swrFn = () => getProjectEnvironments(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const updateSortOrder = (sortOrderSchema: BodyType<SortOrderSchema>) => {
    return fetcher<void>({
        url: `/api/admin/environments/sort-order`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: sortOrderSchema,
    });
};

export const toggleEnvironmentOn = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}/on`,
        method: 'post',
    });
};

export const toggleEnvironmentOff = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}/off`,
        method: 'post',
    });
};
