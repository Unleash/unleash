/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    EnvironmentSchema,
    CreateEnvironmentSchema,
    EnvironmentsSchema,
    GetAllEnvironments401,
    GetAllEnvironments403,
    NameSchema,
    UpdateEnvironmentSchema,
    GetEnvironment401,
    GetEnvironment403,
    GetEnvironment404,
    EnvironmentsProjectSchema,
    GetProjectEnvironments401,
    GetProjectEnvironments403,
    GetProjectEnvironments404,
    SortOrderSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Uses the details provided in the payload to create a new environment
 * @summary Creates a new environment
 */
export const createEnvironment = (
    createEnvironmentSchema: BodyType<CreateEnvironmentSchema>
) => {
    return fetcher<EnvironmentSchema>({
        url: `/api/admin/environments`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createEnvironmentSchema,
    });
};

/**
 * Retrieves all environments that exist in this Unleash instance.
 * @summary Get all environments
 */
export const getAllEnvironments = () => {
    return fetcher<EnvironmentsSchema>({
        url: `/api/admin/environments`,
        method: 'get',
    });
};

export const getGetAllEnvironmentsKey = () =>
    [`/api/admin/environments`] as const;

export type GetAllEnvironmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllEnvironments>>
>;
export type GetAllEnvironmentsQueryError = ErrorType<
    GetAllEnvironments401 | GetAllEnvironments403
>;

/**
 * @summary Get all environments
 */
export const useGetAllEnvironments = <
    TError = ErrorType<GetAllEnvironments401 | GetAllEnvironments403>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllEnvironments>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllEnvironmentsKey() : null));
    const swrFn = () => getAllEnvironments();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Uses the name provided in the body of the request to validate if the given name exists or not
 * @summary Validates if an environment name exists
 */
export const validateEnvironmentName = (nameSchema: BodyType<NameSchema>) => {
    return fetcher<void>({
        url: `/api/admin/environments/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: nameSchema,
    });
};

/**
 * Given an environment by name updates the environment with the given payload. Note that `name`, `enabled` and `protected` cannot be changed by this API
 * @summary Updates an environment by name
 */
export const updateEnvironment = (
    name: string,
    updateEnvironmentSchema: BodyType<UpdateEnvironmentSchema>
) => {
    return fetcher<EnvironmentSchema>({
        url: `/api/admin/environments/update/${name}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateEnvironmentSchema,
    });
};

/**
 * Given an existing environment by name, this endpoint will attempt to delete it
 * @summary Deletes an environment by name
 */
export const removeEnvironment = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}`,
        method: 'delete',
    });
};

/**
 * Retrieves the environment with `name` if it exists in this Unleash instance
 * @summary Get the environment with `name`
 */
export const getEnvironment = (name: string) => {
    return fetcher<EnvironmentSchema>({
        url: `/api/admin/environments/${name}`,
        method: 'get',
    });
};

export const getGetEnvironmentKey = (name: string) =>
    [`/api/admin/environments/${name}`] as const;

export type GetEnvironmentQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEnvironment>>
>;
export type GetEnvironmentQueryError = ErrorType<
    GetEnvironment401 | GetEnvironment403 | GetEnvironment404
>;

/**
 * @summary Get the environment with `name`
 */
export const useGetEnvironment = <
    TError = ErrorType<
        GetEnvironment401 | GetEnvironment403 | GetEnvironment404
    >
>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getEnvironment>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetEnvironmentKey(name) : null));
    const swrFn = () => getEnvironment(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Given an existing environment name and a set of options, this will create a copy of that environment
 * @summary Clones an environment
 */
export const cloneEnvironment = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}/clone`,
        method: 'post',
    });
};

/**
 * Gets the environments that are available for this project. An environment is available for a project if enabled in the [project configuration](https://docs.getunleash.io/reference/environments#step-1-enable-new-environments-for-your-project)
 * @summary Get the environments available to a project
 */
export const getProjectEnvironments = (projectId: string) => {
    return fetcher<EnvironmentsProjectSchema>({
        url: `/api/admin/environments/project/${projectId}`,
        method: 'get',
    });
};

export const getGetProjectEnvironmentsKey = (projectId: string) =>
    [`/api/admin/environments/project/${projectId}`] as const;

export type GetProjectEnvironmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectEnvironments>>
>;
export type GetProjectEnvironmentsQueryError = ErrorType<
    | GetProjectEnvironments401
    | GetProjectEnvironments403
    | GetProjectEnvironments404
>;

/**
 * @summary Get the environments available to a project
 */
export const useGetProjectEnvironments = <
    TError = ErrorType<
        | GetProjectEnvironments401
        | GetProjectEnvironments403
        | GetProjectEnvironments404
    >
>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectEnvironments>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectEnvironmentsKey(projectId) : null));
    const swrFn = () => getProjectEnvironments(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Updates sort orders for the named environments. Environments not specified are unaffected.
 * @summary Update environment sort orders
 */
export const updateSortOrder = (sortOrderSchema: BodyType<SortOrderSchema>) => {
    return fetcher<void>({
        url: `/api/admin/environments/sort-order`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: sortOrderSchema,
    });
};

/**
 * Makes it possible to enable this environment for a project. An environment must first be globally enabled using this endpoint before it can be enabled for a project
 * @summary Toggle the environment with `name` on
 */
export const toggleEnvironmentOn = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}/on`,
        method: 'post',
    });
};

/**
 * Removes this environment from the list of available environments for projects to use
 * @summary Toggle the environment with `name` off
 */
export const toggleEnvironmentOff = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/environments/${name}/off`,
        method: 'post',
    });
};
