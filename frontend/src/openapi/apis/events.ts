/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    EventsSchema,
    GetEvents401,
    GetEventsParams,
    FeatureEventsSchema,
    GetEventsForToggle401,
    SearchEventsSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Returns **the last 100** events from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.

If the provided project does not exist, the list of events will be empty.
 * @summary Get the most recent events from the Unleash instance or all events related to a project.
 */
export const getEvents = (params?: GetEventsParams) => {
    return fetcher<EventsSchema>({
        url: `/api/admin/events`,
        method: 'get',
        params,
    });
};

export const getGetEventsKey = (params?: GetEventsParams) =>
    [`/api/admin/events`, ...(params ? [params] : [])] as const;

export type GetEventsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEvents>>
>;
export type GetEventsQueryError = ErrorType<GetEvents401>;

/**
 * @summary Get the most recent events from the Unleash instance or all events related to a project.
 */
export const useGetEvents = <TError = ErrorType<GetEvents401>>(
    params?: GetEventsParams,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getEvents>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetEventsKey(params) : null));
    const swrFn = () => getEvents(params);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Returns all events related to the specified feature toggle. If the feature toggle does not exist, the list of events will be empty.
 * @summary Get all events related to a specific feature toggle.
 */
export const getEventsForToggle = (featureName: string) => {
    return fetcher<FeatureEventsSchema>({
        url: `/api/admin/events/${featureName}`,
        method: 'get',
    });
};

export const getGetEventsForToggleKey = (featureName: string) =>
    [`/api/admin/events/${featureName}`] as const;

export type GetEventsForToggleQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEventsForToggle>>
>;
export type GetEventsForToggleQueryError = ErrorType<GetEventsForToggle401>;

/**
 * @summary Get all events related to a specific feature toggle.
 */
export const useGetEventsForToggle = <
    TError = ErrorType<GetEventsForToggle401>
>(
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getEventsForToggle>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!featureName;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetEventsForToggleKey(featureName) : null));
    const swrFn = () => getEventsForToggle(featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Allows searching for events matching the search criteria in the request body
 * @summary Search for events
 */
export const searchEvents = (
    searchEventsSchema: BodyType<SearchEventsSchema>
) => {
    return fetcher<EventsSchema>({
        url: `/api/admin/events/search`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: searchEventsSchema,
    });
};
