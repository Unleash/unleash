/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    FeatureTypesSchema,
    GetAllFeatureTypes401,
    FeatureTypeSchema,
    UpdateFeatureTypeLifetimeSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Retrieves all feature types that exist in this Unleash instance, along with their descriptions and lifetimes.
 * @summary Get all feature types
 */
export const getAllFeatureTypes = () => {
    return fetcher<FeatureTypesSchema>({
        url: `/api/admin/feature-types`,
        method: 'get',
    });
};

export const getGetAllFeatureTypesKey = () =>
    [`/api/admin/feature-types`] as const;

export type GetAllFeatureTypesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllFeatureTypes>>
>;
export type GetAllFeatureTypesQueryError = ErrorType<GetAllFeatureTypes401>;

/**
 * @summary Get all feature types
 */
export const useGetAllFeatureTypes = <
    TError = ErrorType<GetAllFeatureTypes401>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllFeatureTypes>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllFeatureTypesKey() : null));
    const swrFn = () => getAllFeatureTypes();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Updates the lifetime configuration for the specified [feature toggle type](https://docs.getunleash.io/reference/feature-toggle-types). The expected lifetime is an integer representing the number of days before Unleash marks a feature toggle of that type as potentially stale. If set to `null` or `0`, then feature toggles of that particular type will never be marked as potentially stale.

When a feature toggle type's expected lifetime is changed, this will also cause any feature toggles of this type to be reevaluated for potential staleness.
 * @summary Update feature type lifetime
 */
export const updateFeatureTypeLifetime = (
    id: string,
    updateFeatureTypeLifetimeSchema: BodyType<UpdateFeatureTypeLifetimeSchema>
) => {
    return fetcher<FeatureTypeSchema>({
        url: `/api/admin/feature-types/${id}/lifetime`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateFeatureTypeLifetimeSchema,
    });
};
