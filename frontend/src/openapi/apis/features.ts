/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.19.1
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ChangeProjectSchema,
    FeaturesSchema,
    TagsSchema,
    TagSchema,
    FeatureTypesSchema,
    FeatureEnvironmentSchema,
    FeatureSchema,
    FeatureStrategySchema,
    CreateFeatureStrategySchema,
    UpdateFeatureStrategySchema,
    PatchesSchema,
    SetStrategySortOrderSchema,
    CreateFeatureSchema,
    CloneFeatureSchema,
    UpdateFeatureSchema,
    FeatureVariantsSchema,
    VariantsSchema,
    ConstraintSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const changeProject = (
    projectId: string,
    featureName: string,
    changeProjectSchema: BodyType<ChangeProjectSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/changeProject`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: changeProjectSchema,
    });
};

/**
 * @deprecated
 */
export const getAllToggles = () => {
    return fetcher<FeaturesSchema>({
        url: `/api/admin/features`,
        method: 'get',
    });
};

export const getGetAllTogglesKey = () => [`/api/admin/features`];

export type GetAllTogglesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllToggles>>
>;
export type GetAllTogglesQueryError = ErrorType<unknown>;

export const useGetAllToggles = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllToggles>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllTogglesKey() : null));
    const swrFn = () => getAllToggles();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const validateFeature = () => {
    return fetcher<void>({
        url: `/api/admin/features/validate`,
        method: 'post',
    });
};

export const listTags = (featureName: string) => {
    return fetcher<TagsSchema>({
        url: `/api/admin/features/${featureName}/tags`,
        method: 'get',
    });
};

export const getListTagsKey = (featureName: string) => [
    `/api/admin/features/${featureName}/tags`,
];

export type ListTagsQueryResult = NonNullable<
    Awaited<ReturnType<typeof listTags>>
>;
export type ListTagsQueryError = ErrorType<unknown>;

export const useListTags = <TError = ErrorType<unknown>>(
    featureName: string,
    options?: {
        swr?: SWRConfiguration<Awaited<ReturnType<typeof listTags>>, TError> & {
            swrKey?: Key;
            enabled?: boolean;
        };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!featureName;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getListTagsKey(featureName) : null));
    const swrFn = () => listTags(featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const addTag = (featureName: string, tagSchema: BodyType<TagSchema>) => {
    return fetcher<TagSchema>({
        url: `/api/admin/features/${featureName}/tags`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: tagSchema,
    });
};

export const removeTag = (featureName: string, type: string, value: string) => {
    return fetcher<void>({
        url: `/api/admin/features/${featureName}/tags/${type}/${value}`,
        method: 'delete',
    });
};

export const getAllFeatureTypes = () => {
    return fetcher<FeatureTypesSchema>({
        url: `/api/admin/feature-types`,
        method: 'get',
    });
};

export const getGetAllFeatureTypesKey = () => [`/api/admin/feature-types`];

export type GetAllFeatureTypesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllFeatureTypes>>
>;
export type GetAllFeatureTypesQueryError = ErrorType<unknown>;

export const useGetAllFeatureTypes = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllFeatureTypes>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllFeatureTypesKey() : null));
    const swrFn = () => getAllFeatureTypes();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getFeatureEnvironment = (
    projectId: string,
    featureName: string,
    environment: string
) => {
    return fetcher<FeatureEnvironmentSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}`,
        method: 'get',
    });
};

export const getGetFeatureEnvironmentKey = (
    projectId: string,
    featureName: string,
    environment: string
) => [
    `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}`,
];

export type GetFeatureEnvironmentQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatureEnvironment>>
>;
export type GetFeatureEnvironmentQueryError = ErrorType<unknown>;

export const useGetFeatureEnvironment = <TError = ErrorType<unknown>>(
    projectId: string,
    featureName: string,
    environment: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatureEnvironment>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false &&
        !!(projectId && featureName && environment);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetFeatureEnvironmentKey(
                      projectId,
                      featureName,
                      environment
                  )
                : null);
    const swrFn = () =>
        getFeatureEnvironment(projectId, featureName, environment);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const toggleFeatureEnvironmentOff = (
    projectId: string,
    featureName: string,
    environment: string
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/off`,
        method: 'post',
    });
};

export const toggleFeatureEnvironmentOn = (
    projectId: string,
    featureName: string,
    environment: string
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/on`,
        method: 'post',
    });
};

export const getFeatureStrategies = (
    projectId: string,
    featureName: string,
    environment: string
) => {
    return fetcher<FeatureStrategySchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies`,
        method: 'get',
    });
};

export const getGetFeatureStrategiesKey = (
    projectId: string,
    featureName: string,
    environment: string
) => [
    `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies`,
];

export type GetFeatureStrategiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatureStrategies>>
>;
export type GetFeatureStrategiesQueryError = ErrorType<unknown>;

export const useGetFeatureStrategies = <TError = ErrorType<unknown>>(
    projectId: string,
    featureName: string,
    environment: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatureStrategies>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false &&
        !!(projectId && featureName && environment);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetFeatureStrategiesKey(
                      projectId,
                      featureName,
                      environment
                  )
                : null);
    const swrFn = () =>
        getFeatureStrategies(projectId, featureName, environment);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const addFeatureStrategy = (
    projectId: string,
    featureName: string,
    environment: string,
    createFeatureStrategySchema: BodyType<CreateFeatureStrategySchema>
) => {
    return fetcher<FeatureStrategySchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createFeatureStrategySchema,
    });
};

export const getFeatureStrategy = (
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string
) => {
    return fetcher<FeatureStrategySchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/${strategyId}`,
        method: 'get',
    });
};

export const getGetFeatureStrategyKey = (
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string
) => [
    `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/${strategyId}`,
];

export type GetFeatureStrategyQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatureStrategy>>
>;
export type GetFeatureStrategyQueryError = ErrorType<unknown>;

export const useGetFeatureStrategy = <TError = ErrorType<unknown>>(
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatureStrategy>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false &&
        !!(projectId && featureName && environment && strategyId);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetFeatureStrategyKey(
                      projectId,
                      featureName,
                      environment,
                      strategyId
                  )
                : null);
    const swrFn = () =>
        getFeatureStrategy(projectId, featureName, environment, strategyId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const updateFeatureStrategy = (
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string,
    updateFeatureStrategySchema: BodyType<UpdateFeatureStrategySchema>
) => {
    return fetcher<FeatureStrategySchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/${strategyId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateFeatureStrategySchema,
    });
};

export const patchFeatureStrategy = (
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string,
    patchesSchema: BodyType<PatchesSchema>
) => {
    return fetcher<FeatureStrategySchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/${strategyId}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: patchesSchema,
    });
};

export const deleteFeatureStrategy = (
    projectId: string,
    featureName: string,
    environment: string,
    strategyId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/${strategyId}`,
        method: 'delete',
    });
};

export const setStrategySortOrder = (
    projectId: string,
    featureName: string,
    environment: string,
    setStrategySortOrderSchema: BodyType<SetStrategySortOrderSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/strategies/set-sort-order`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: setStrategySortOrderSchema,
    });
};

export const getFeatures = (projectId: string) => {
    return fetcher<FeaturesSchema>({
        url: `/api/admin/projects/${projectId}/features`,
        method: 'get',
    });
};

export const getGetFeaturesKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/features`,
];

export type GetFeaturesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatures>>
>;
export type GetFeaturesQueryError = ErrorType<unknown>;

export const useGetFeatures = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatures>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetFeaturesKey(projectId) : null));
    const swrFn = () => getFeatures(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createFeature = (
    projectId: string,
    createFeatureSchema: BodyType<CreateFeatureSchema>
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createFeatureSchema,
    });
};

export const cloneFeature = (
    projectId: string,
    featureName: string,
    cloneFeatureSchema: BodyType<CloneFeatureSchema>
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/clone`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: cloneFeatureSchema,
    });
};

/**
 * This endpoint returns the information about the requested feature if the feature belongs to the specified project.
 * @summary Get a feature.
 */
export const getFeature = (projectId: string, featureName: string) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}`,
        method: 'get',
    });
};

export const getGetFeatureKey = (projectId: string, featureName: string) => [
    `/api/admin/projects/${projectId}/features/${featureName}`,
];

export type GetFeatureQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeature>>
>;
export type GetFeatureQueryError = ErrorType<void>;

export const useGetFeature = <TError = ErrorType<void>>(
    projectId: string,
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeature>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false && !!(projectId && featureName);
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetFeatureKey(projectId, featureName) : null));
    const swrFn = () => getFeature(projectId, featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const updateFeature = (
    projectId: string,
    featureName: string,
    updateFeatureSchema: BodyType<UpdateFeatureSchema>
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateFeatureSchema,
    });
};

export const patchFeature = (
    projectId: string,
    featureName: string,
    patchesSchema: BodyType<PatchesSchema>
) => {
    return fetcher<FeatureSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: patchesSchema,
    });
};

/**
 * This endpoint archives the specified feature if the feature belongs to the specified project.
 * @summary Archive a feature.
 */
export const archiveFeature = (projectId: string, featureName: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/features/${featureName}`,
        method: 'delete',
    });
};

export const getFeatureVariants = (projectId: string, featureName: string) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/variants`,
        method: 'get',
    });
};

export const getGetFeatureVariantsKey = (
    projectId: string,
    featureName: string
) => [`/api/admin/projects/${projectId}/features/${featureName}/variants`];

export type GetFeatureVariantsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatureVariants>>
>;
export type GetFeatureVariantsQueryError = ErrorType<unknown>;

export const useGetFeatureVariants = <TError = ErrorType<unknown>>(
    projectId: string,
    featureName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatureVariants>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false && !!(projectId && featureName);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetFeatureVariantsKey(projectId, featureName)
                : null);
    const swrFn = () => getFeatureVariants(projectId, featureName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const patchFeatureVariants = (
    projectId: string,
    featureName: string,
    patchesSchema: BodyType<PatchesSchema>
) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/variants`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: patchesSchema,
    });
};

export const overwriteFeatureVariants = (
    projectId: string,
    featureName: string,
    variantsSchema: BodyType<VariantsSchema>
) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/variants`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: variantsSchema,
    });
};

export const getEnvironmentFeatureVariants = (
    projectId: string,
    featureName: string,
    environment: string
) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/variants`,
        method: 'get',
    });
};

export const getGetEnvironmentFeatureVariantsKey = (
    projectId: string,
    featureName: string,
    environment: string
) => [
    `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/variants`,
];

export type GetEnvironmentFeatureVariantsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getEnvironmentFeatureVariants>>
>;
export type GetEnvironmentFeatureVariantsQueryError = ErrorType<unknown>;

export const useGetEnvironmentFeatureVariants = <TError = ErrorType<unknown>>(
    projectId: string,
    featureName: string,
    environment: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getEnvironmentFeatureVariants>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled =
        swrOptions?.enabled !== false &&
        !!(projectId && featureName && environment);
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled
                ? getGetEnvironmentFeatureVariantsKey(
                      projectId,
                      featureName,
                      environment
                  )
                : null);
    const swrFn = () =>
        getEnvironmentFeatureVariants(projectId, featureName, environment);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const patchEnvironmentsFeatureVariants = (
    projectId: string,
    featureName: string,
    environment: string,
    patchesSchema: BodyType<PatchesSchema>
) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/variants`,
        method: 'patch',
        headers: { 'Content-Type': 'application/json' },
        data: patchesSchema,
    });
};

export const overwriteEnvironmentFeatureVariants = (
    projectId: string,
    featureName: string,
    environment: string,
    variantsSchema: BodyType<VariantsSchema>
) => {
    return fetcher<FeatureVariantsSchema>({
        url: `/api/admin/projects/${projectId}/features/${featureName}/environments/${environment}/variants`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: variantsSchema,
    });
};

export const validateConstraint = (
    constraintSchema: BodyType<ConstraintSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/constraints/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: constraintSchema,
    });
};
