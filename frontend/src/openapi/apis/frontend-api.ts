/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ProxyFeaturesSchema,
    GetFrontendFeatures401,
    GetFrontendFeatures404,
    ClientMetricsSchema,
    ProxyClientSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * This endpoint returns the list of feature toggles that the proxy evaluates to enabled for the given context. Context values are provided as query parameters. If the Frontend API is disabled 404 is returned.
 * @summary Retrieve enabled feature toggles for the provided context.
 */
export const getFrontendFeatures = () => {
    return fetcher<ProxyFeaturesSchema>({
        url: `/api/frontend`,
        method: 'get',
    });
};

export const getGetFrontendFeaturesKey = () => [`/api/frontend`] as const;

export type GetFrontendFeaturesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFrontendFeatures>>
>;
export type GetFrontendFeaturesQueryError = ErrorType<
    GetFrontendFeatures401 | GetFrontendFeatures404
>;

/**
 * @summary Retrieve enabled feature toggles for the provided context.
 */
export const useGetFrontendFeatures = <
    TError = ErrorType<GetFrontendFeatures401 | GetFrontendFeatures404>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getFrontendFeatures>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetFrontendFeaturesKey() : null));
    const swrFn = () => getFrontendFeatures();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Registers usage metrics. Stores information about how many times each toggle was evaluated to enabled and disabled within a time frame. If provided, this operation will also store data on how many times each feature toggle's variants were displayed to the end user. If the Frontend API is disabled 404 is returned.
 * @summary Register client usage metrics
 */
export const registerFrontendMetrics = (
    clientMetricsSchema: BodyType<ClientMetricsSchema>
) => {
    return fetcher<void>({
        url: `/api/frontend/client/metrics`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: clientMetricsSchema,
    });
};

/**
 * This is for future use. Currently Frontend client registration is not supported. Returning 200 for clients that expect this status code. If the Frontend API is disabled 404 is returned.
 * @summary Register a client SDK
 */
export const registerFrontendClient = (
    proxyClientSchema: BodyType<ProxyClientSchema>
) => {
    return fetcher<void>({
        url: `/api/frontend/client/register`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: proxyClientSchema,
    });
};
