/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    LoginHistorySchema,
    GetLoginHistory401,
    GetLoginHistory404,
    InstanceAdminStatsSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType } from '../fetcher';

/**
 * Returns **all** login events in the Unleash system. You can optionally get them in CSV format by specifying the `Accept` header as `text/csv`.
 * @summary Get all login events.
 */
export const getLoginHistory = () => {
    return fetcher<LoginHistorySchema | string | void>({
        url: `/api/admin/logins`,
        method: 'get',
    });
};

export const getGetLoginHistoryKey = () => [`/api/admin/logins`] as const;

export type GetLoginHistoryQueryResult = NonNullable<
    Awaited<ReturnType<typeof getLoginHistory>>
>;
export type GetLoginHistoryQueryError = ErrorType<
    GetLoginHistory401 | GetLoginHistory404
>;

/**
 * @summary Get all login events.
 */
export const useGetLoginHistory = <
    TError = ErrorType<GetLoginHistory401 | GetLoginHistory404>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getLoginHistory>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetLoginHistoryKey() : null));
    const swrFn = () => getLoginHistory();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.
 * @summary Instance usage statistics
 */
export const getInstanceAdminStatsCsv = () => {
    return fetcher<string>({
        url: `/api/admin/instance-admin/statistics/csv`,
        method: 'get',
    });
};

export const getGetInstanceAdminStatsCsvKey = () =>
    [`/api/admin/instance-admin/statistics/csv`] as const;

export type GetInstanceAdminStatsCsvQueryResult = NonNullable<
    Awaited<ReturnType<typeof getInstanceAdminStatsCsv>>
>;
export type GetInstanceAdminStatsCsvQueryError = ErrorType<unknown>;

/**
 * @summary Instance usage statistics
 */
export const useGetInstanceAdminStatsCsv = <
    TError = ErrorType<unknown>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getInstanceAdminStatsCsv>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetInstanceAdminStatsCsvKey() : null));
    const swrFn = () => getInstanceAdminStatsCsv();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Provides statistics about various features of Unleash to allow for reporting of usage for self-hosted customers. The response contains data such as the number of users, groups, features, strategies, versions, etc.
 * @deprecated
 * @summary Instance usage statistics
 */
export const getInstanceAdminStats = () => {
    return fetcher<InstanceAdminStatsSchema>({
        url: `/api/admin/instance-admin/statistics`,
        method: 'get',
    });
};

export const getGetInstanceAdminStatsKey = () =>
    [`/api/admin/instance-admin/statistics`] as const;

export type GetInstanceAdminStatsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getInstanceAdminStats>>
>;
export type GetInstanceAdminStatsQueryError = ErrorType<unknown>;

/**
 * @deprecated
 * @summary Instance usage statistics
 */
export const useGetInstanceAdminStats = <
    TError = ErrorType<unknown>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getInstanceAdminStats>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetInstanceAdminStatsKey() : null));
    const swrFn = () => getInstanceAdminStats();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};
