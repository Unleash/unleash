/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    RequestsPerSecondSegmentedSchema,
    CreateApplicationSchema,
    ApplicationSchema,
    GetApplication404,
    ApplicationsSchema,
    FeatureMetricsSchema,
    GetRawFeatureMetrics401,
    GetRawFeatureMetrics403,
    GetRawFeatureMetrics404,
    FeatureUsageSchema,
    GetFeatureUsageSummary401,
    GetFeatureUsageSummary403,
    GetFeatureUsageSummary404,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Gets usage data per app/endpoint from a prometheus compatible metrics endpoint
 * @summary Gets usage data
 */
export const getRequestsPerSecond = () => {
    return fetcher<RequestsPerSecondSegmentedSchema>({
        url: `/api/admin/metrics/rps`,
        method: 'get',
    });
};

export const getGetRequestsPerSecondKey = () =>
    [`/api/admin/metrics/rps`] as const;

export type GetRequestsPerSecondQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRequestsPerSecond>>
>;
export type GetRequestsPerSecondQueryError = ErrorType<unknown>;

/**
 * @summary Gets usage data
 */
export const useGetRequestsPerSecond = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getRequestsPerSecond>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetRequestsPerSecondKey() : null));
    const swrFn = () => getRequestsPerSecond();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Is used to report usage as well which sdk the application uses
 * @summary Create an application to connect reported metrics
 */
export const createApplication = (
    appName: string,
    createApplicationSchema: BodyType<CreateApplicationSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/metrics/applications/${appName}`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createApplicationSchema,
    });
};

/**
 * Delete the application specified in the request URL. Returns 200 OK if the application was successfully deleted or if it didn't exist
 * @summary Delete an application
 */
export const deleteApplication = (appName: string) => {
    return fetcher<void>({
        url: `/api/admin/metrics/applications/${appName}`,
        method: 'delete',
    });
};

/**
 * Returns data about the specified application (`appName`). The data contains information on the name of the application, sdkVersion (which sdk reported these metrics, typically `unleash-client-node:3.4.1` or `unleash-client-java:7.1.0`), as well as data about how to display this application in a list.
 * @summary Get application data
 */
export const getApplication = (appName: string) => {
    return fetcher<ApplicationSchema>({
        url: `/api/admin/metrics/applications/${appName}`,
        method: 'get',
    });
};

export const getGetApplicationKey = (appName: string) =>
    [`/api/admin/metrics/applications/${appName}`] as const;

export type GetApplicationQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApplication>>
>;
export type GetApplicationQueryError = ErrorType<GetApplication404>;

/**
 * @summary Get application data
 */
export const useGetApplication = <TError = ErrorType<GetApplication404>>(
    appName: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getApplication>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!appName;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetApplicationKey(appName) : null));
    const swrFn = () => getApplication(appName);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Returns all applications registered with Unleash. Applications can be created via metrics reporting or manual creation
 * @summary Get all applications
 */
export const getApplications = () => {
    return fetcher<ApplicationsSchema>({
        url: `/api/admin/metrics/applications`,
        method: 'get',
    });
};

export const getGetApplicationsKey = () =>
    [`/api/admin/metrics/applications`] as const;

export type GetApplicationsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApplications>>
>;
export type GetApplicationsQueryError = ErrorType<unknown>;

/**
 * @summary Get all applications
 */
export const useGetApplications = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getApplications>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetApplicationsKey() : null));
    const swrFn = () => getApplications();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Get usage metrics for a specific feature for the last 48 hours, grouped by hour
 * @summary Get feature metrics
 */
export const getRawFeatureMetrics = (name: string) => {
    return fetcher<FeatureMetricsSchema>({
        url: `/api/admin/client-metrics/features/${name}/raw`,
        method: 'get',
    });
};

export const getGetRawFeatureMetricsKey = (name: string) =>
    [`/api/admin/client-metrics/features/${name}/raw`] as const;

export type GetRawFeatureMetricsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRawFeatureMetrics>>
>;
export type GetRawFeatureMetricsQueryError = ErrorType<
    GetRawFeatureMetrics401 | GetRawFeatureMetrics403 | GetRawFeatureMetrics404
>;

/**
 * @summary Get feature metrics
 */
export const useGetRawFeatureMetrics = <
    TError = ErrorType<
        | GetRawFeatureMetrics401
        | GetRawFeatureMetrics403
        | GetRawFeatureMetrics404
    >
>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getRawFeatureMetrics>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetRawFeatureMetricsKey(name) : null));
    const swrFn = () => getRawFeatureMetrics(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Separate counts for yes (enabled), no (disabled), as well as how many times each variant was selected during the last hour
 * @summary Last hour of usage and a list of applications that have reported seeing this feature toggle
 */
export const getFeatureUsageSummary = (name: string) => {
    return fetcher<FeatureUsageSchema>({
        url: `/api/admin/client-metrics/features/${name}`,
        method: 'get',
    });
};

export const getGetFeatureUsageSummaryKey = (name: string) =>
    [`/api/admin/client-metrics/features/${name}`] as const;

export type GetFeatureUsageSummaryQueryResult = NonNullable<
    Awaited<ReturnType<typeof getFeatureUsageSummary>>
>;
export type GetFeatureUsageSummaryQueryError = ErrorType<
    | GetFeatureUsageSummary401
    | GetFeatureUsageSummary403
    | GetFeatureUsageSummary404
>;

/**
 * @summary Last hour of usage and a list of applications that have reported seeing this feature toggle
 */
export const useGetFeatureUsageSummary = <
    TError = ErrorType<
        | GetFeatureUsageSummary401
        | GetFeatureUsageSummary403
        | GetFeatureUsageSummary404
    >
>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getFeatureUsageSummary>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetFeatureUsageSummaryKey(name) : null));
    const swrFn = () => getFeatureUsageSummary(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};
