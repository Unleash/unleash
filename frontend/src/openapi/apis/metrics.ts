/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.19.1
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ApplicationSchema,
  ApplicationsSchema,
  RequestsPerSecondSegmentedSchema,
  FeatureMetricsSchema,
  FeatureUsageSchema
} from '../models'
import { fetcher } from '../fetcher'
import type { ErrorType, BodyType } from '../fetcher'



  
  export const createApplication = (
    appName: string,
    applicationSchema: BodyType<ApplicationSchema>,
 ) => {
      return fetcher<void>(
      {url: `/api/admin/metrics/applications/${appName}`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: applicationSchema
    },
      );
    }
  

export const deleteApplication = (
    appName: string,
 ) => {
      return fetcher<void>(
      {url: `/api/admin/metrics/applications/${appName}`, method: 'delete'
    },
      );
    }
  

export const getApplication = (
    appName: string,
 ) => {
      return fetcher<ApplicationSchema>(
      {url: `/api/admin/metrics/applications/${appName}`, method: 'get'
    },
      );
    }
  

export const getGetApplicationKey = (appName: string,) => [`/api/admin/metrics/applications/${appName}`];

    
export type GetApplicationQueryResult = NonNullable<Awaited<ReturnType<typeof getApplication>>>
export type GetApplicationQueryError = ErrorType<unknown>

export const useGetApplication = <TError = ErrorType<unknown>>(
 appName: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApplication>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(appName)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApplicationKey(appName) : null);
  const swrFn = () => getApplication(appName, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export const getApplications = (
    
 ) => {
      return fetcher<ApplicationsSchema>(
      {url: `/api/admin/metrics/applications`, method: 'get'
    },
      );
    }
  

export const getGetApplicationsKey = () => [`/api/admin/metrics/applications`];

    
export type GetApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getApplications>>>
export type GetApplicationsQueryError = ErrorType<unknown>

export const useGetApplications = <TError = ErrorType<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApplications>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApplicationsKey() : null);
  const swrFn = () => getApplications();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export const getRequestsPerSecond = (
    
 ) => {
      return fetcher<RequestsPerSecondSegmentedSchema>(
      {url: `/api/admin/metrics/rps`, method: 'get'
    },
      );
    }
  

export const getGetRequestsPerSecondKey = () => [`/api/admin/metrics/rps`];

    
export type GetRequestsPerSecondQueryResult = NonNullable<Awaited<ReturnType<typeof getRequestsPerSecond>>>
export type GetRequestsPerSecondQueryError = ErrorType<unknown>

export const useGetRequestsPerSecond = <TError = ErrorType<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getRequestsPerSecond>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetRequestsPerSecondKey() : null);
  const swrFn = () => getRequestsPerSecond();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export const getRawFeatureMetrics = (
    name: string,
 ) => {
      return fetcher<FeatureMetricsSchema>(
      {url: `/api/admin/client-metrics/features/${name}/raw`, method: 'get'
    },
      );
    }
  

export const getGetRawFeatureMetricsKey = (name: string,) => [`/api/admin/client-metrics/features/${name}/raw`];

    
export type GetRawFeatureMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof getRawFeatureMetrics>>>
export type GetRawFeatureMetricsQueryError = ErrorType<unknown>

export const useGetRawFeatureMetrics = <TError = ErrorType<unknown>>(
 name: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getRawFeatureMetrics>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(name)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetRawFeatureMetricsKey(name) : null);
  const swrFn = () => getRawFeatureMetrics(name, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

export const getFeatureUsageSummary = (
    name: string,
 ) => {
      return fetcher<FeatureUsageSchema>(
      {url: `/api/admin/client-metrics/features/${name}`, method: 'get'
    },
      );
    }
  

export const getGetFeatureUsageSummaryKey = (name: string,) => [`/api/admin/client-metrics/features/${name}`];

    
export type GetFeatureUsageSummaryQueryResult = NonNullable<Awaited<ReturnType<typeof getFeatureUsageSummary>>>
export type GetFeatureUsageSummaryQueryError = ErrorType<unknown>

export const useGetFeatureUsageSummary = <TError = ErrorType<unknown>>(
 name: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getFeatureUsageSummary>>, TError> & { swrKey?: Key, enabled?: boolean },  }

  ) => {

  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(name)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetFeatureUsageSummaryKey(name) : null);
  const swrFn = () => getFeatureUsageSummary(name, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

