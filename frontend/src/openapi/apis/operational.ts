/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.20.0-beta.2
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { InvoicesSchema, HealthCheckSchema } from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType } from '../fetcher';

export const getInvoices = () => {
    return fetcher<InvoicesSchema>({
        url: `/demo2/api/admin/invoices`,
        method: 'get',
    });
};

export const getGetInvoicesKey = () => [`/demo2/api/admin/invoices`];

export type GetInvoicesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getInvoices>>
>;
export type GetInvoicesQueryError = ErrorType<unknown>;

export const useGetInvoices = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getInvoices>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetInvoicesKey() : null));
    const swrFn = () => getInvoices();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getHealth = () => {
    return fetcher<HealthCheckSchema>({ url: `/demo2/health`, method: 'get' });
};

export const getGetHealthKey = () => [`/demo2/health`];

export type GetHealthQueryResult = NonNullable<
    Awaited<ReturnType<typeof getHealth>>
>;
export type GetHealthQueryError = ErrorType<unknown>;

export const useGetHealth = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getHealth>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetHealthKey() : null));
    const swrFn = () => getHealth();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};
