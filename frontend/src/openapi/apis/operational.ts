/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type { HealthCheckSchema } from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType } from '../fetcher';

/**
 * This operation returns information about whether this Unleash instance is healthy and ready to serve requests or not. Typically used by your deployment orchestrator (e.g. Kubernetes, Docker Swarm, Mesos, et al.).
 * @summary Get instance operational status
 */
export const getHealth = () => {
    return fetcher<HealthCheckSchema>({ url: `/health`, method: 'get' });
};

export const getGetHealthKey = () => [`/health`] as const;

export type GetHealthQueryResult = NonNullable<
    Awaited<ReturnType<typeof getHealth>>
>;
export type GetHealthQueryError = ErrorType<unknown>;

/**
 * @summary Get instance operational status
 */
export const useGetHealth = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getHealth>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetHealthKey() : null));
    const swrFn = () => getHealth();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};
