/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ProjectsSchema,
    ProjectCreatedSchema,
    CreateProjectSchema,
    ValidateProjectSchema,
    UpdateProjectSchema,
    ProjectOverviewSchema,
    ProjectUsers,
    ProjectAccessSchema,
    ProjectSettingsSchema,
    ProjectEnvironmentSchema,
    HealthReportSchema,
    ApiTokensSchema,
    ApiTokenSchema,
    CreateApiTokenSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getProjects = () => {
    return fetcher<ProjectsSchema>({
        url: `/api/admin/projects`,
        method: 'get',
    });
};

export const getGetProjectsKey = () => [`/api/admin/projects`];

export type GetProjectsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjects>>
>;
export type GetProjectsQueryError = ErrorType<unknown>;

export const useGetProjects = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProjects>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetProjectsKey() : null));
    const swrFn = () => getProjects();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createProject = (
    createProjectSchema: BodyType<CreateProjectSchema>
) => {
    return fetcher<ProjectCreatedSchema>({
        url: `/api/admin/projects`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createProjectSchema,
    });
};

export const validateProject = (
    validateProjectSchema: BodyType<ValidateProjectSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: validateProjectSchema,
    });
};

export const updateProject = (
    projectId: string,
    updateProjectSchema: BodyType<UpdateProjectSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateProjectSchema,
    });
};

export const deleteProject = (projectId: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}`,
        method: 'delete',
    });
};

export const getProjectOverview = (projectId: string) => {
    return fetcher<ProjectOverviewSchema>({
        url: `/api/admin/projects/${projectId}`,
        method: 'get',
    });
};

export const getGetProjectOverviewKey = (projectId: string) => [
    `/api/admin/projects/${projectId}`,
];

export type GetProjectOverviewQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectOverview>>
>;
export type GetProjectOverviewQueryError = ErrorType<unknown>;

export const useGetProjectOverview = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectOverview>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectOverviewKey(projectId) : null));
    const swrFn = () => getProjectOverview(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * @deprecated
 */
export const getProjectUsers = (projectId: string) => {
    return fetcher<ProjectUsers>({
        url: `/api/admin/projects/${projectId}/users`,
        method: 'get',
    });
};

export const getGetProjectUsersKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/users`,
];

export type GetProjectUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectUsers>>
>;
export type GetProjectUsersQueryError = ErrorType<unknown>;

export const useGetProjectUsers = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectUsers>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectUsersKey(projectId) : null));
    const swrFn = () => getProjectUsers(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getProjectAccess = (projectId: string) => {
    return fetcher<ProjectAccessSchema>({
        url: `/api/admin/projects/${projectId}/access`,
        method: 'get',
    });
};

export const getGetProjectAccessKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/access`,
];

export type GetProjectAccessQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectAccess>>
>;
export type GetProjectAccessQueryError = ErrorType<unknown>;

export const useGetProjectAccess = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectAccess>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectAccessKey(projectId) : null));
    const swrFn = () => getProjectAccess(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const addRoleToUser = (
    projectId: string,
    userId: string,
    roleId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/users/${userId}/roles/${roleId}`,
        method: 'post',
    });
};

export const removeRoleForUser = (
    projectId: string,
    userId: string,
    roleId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/users/${userId}/roles/${roleId}`,
        method: 'delete',
    });
};

export const changeRoleForUser = (
    projectId: string,
    userId: string,
    roleId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/users/${userId}/roles/${roleId}`,
        method: 'put',
    });
};

export const changeRoleForGroup = (
    projectId: string,
    groupId: string,
    roleId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/groups/${groupId}/roles/${roleId}`,
        method: 'put',
    });
};

export const removeRoleFromGroup = (
    projectId: string,
    groupId: string,
    roleId: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/groups/${groupId}/roles/${roleId}`,
        method: 'delete',
    });
};

export const addAccessToProject = (projectId: string, roleId: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/role/${roleId}/access`,
        method: 'post',
    });
};

export const getProjectSettings = (projectId: string) => {
    return fetcher<ProjectSettingsSchema>({
        url: `/api/admin/projects/${projectId}/settings`,
        method: 'get',
    });
};

export const getGetProjectSettingsKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/settings`,
];

export type GetProjectSettingsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectSettings>>
>;
export type GetProjectSettingsQueryError = ErrorType<void>;

export const useGetProjectSettings = <TError = ErrorType<void>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectSettings>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectSettingsKey(projectId) : null));
    const swrFn = () => getProjectSettings(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const addEnvironmentToProject = (
    projectId: string,
    projectEnvironmentSchema: BodyType<ProjectEnvironmentSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/environments`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: projectEnvironmentSchema,
    });
};

export const removeEnvironmentFromProject = (
    projectId: string,
    environment: string
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/environments/${environment}`,
        method: 'delete',
    });
};

export const getProjectHealthReport = (projectId: string) => {
    return fetcher<HealthReportSchema>({
        url: `/api/admin/projects/${projectId}/health-report`,
        method: 'get',
    });
};

export const getGetProjectHealthReportKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/health-report`,
];

export type GetProjectHealthReportQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectHealthReport>>
>;
export type GetProjectHealthReportQueryError = ErrorType<unknown>;

export const useGetProjectHealthReport = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectHealthReport>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectHealthReportKey(projectId) : null));
    const swrFn = () => getProjectHealthReport(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getProjectApiTokens = (projectId: string) => {
    return fetcher<ApiTokensSchema>({
        url: `/api/admin/projects/${projectId}/api-tokens`,
        method: 'get',
    });
};

export const getGetProjectApiTokensKey = (projectId: string) => [
    `/api/admin/projects/${projectId}/api-tokens`,
];

export type GetProjectApiTokensQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectApiTokens>>
>;
export type GetProjectApiTokensQueryError = ErrorType<unknown>;

export const useGetProjectApiTokens = <TError = ErrorType<unknown>>(
    projectId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getProjectApiTokens>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!projectId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetProjectApiTokensKey(projectId) : null));
    const swrFn = () => getProjectApiTokens(projectId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createProjectApiToken = (
    projectId: string,
    createApiTokenSchema: BodyType<CreateApiTokenSchema>
) => {
    return fetcher<ApiTokenSchema>({
        url: `/api/admin/projects/${projectId}/api-tokens`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createApiTokenSchema,
    });
};

export const deleteProjectApiToken = (projectId: string, token: string) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/api-tokens/${token}`,
        method: 'delete',
    });
};
