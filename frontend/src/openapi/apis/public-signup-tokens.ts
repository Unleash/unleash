/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ValidatePublicSignupToken400,
    UserSchema,
    CreateInvitedUserSchema,
    PublicSignupTokensSchema,
    PublicSignupTokenSchema,
    PublicSignupTokenCreateSchema,
    GetPublicSignupToken401,
    GetPublicSignupToken403,
    PublicSignupTokenUpdateSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Check whether the provided public sign-up token exists, has not expired and is enabled
 * @summary Validate signup token
 */
export const validatePublicSignupToken = (token: string) => {
    return fetcher<void>({ url: `/invite/${token}/validate`, method: 'get' });
};

export const getValidatePublicSignupTokenKey = (token: string) =>
    [`/invite/${token}/validate`] as const;

export type ValidatePublicSignupTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof validatePublicSignupToken>>
>;
export type ValidatePublicSignupTokenQueryError =
    ErrorType<ValidatePublicSignupToken400>;

/**
 * @summary Validate signup token
 */
export const useValidatePublicSignupToken = <
    TError = ErrorType<ValidatePublicSignupToken400>
>(
    token: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof validatePublicSignupToken>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!token;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getValidatePublicSignupTokenKey(token) : null));
    const swrFn = () => validatePublicSignupToken(token);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create a user with the viewer root role and link them to the provided signup token
 * @summary Add a user via a signup token
 */
export const addPublicSignupTokenUser = (
    token: string,
    createInvitedUserSchema: BodyType<CreateInvitedUserSchema>
) => {
    return fetcher<UserSchema>({
        url: `/invite/${token}/signup`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createInvitedUserSchema,
    });
};

/**
 * Retrieves all existing public signup tokens.
 * @summary Get public signup tokens
 */
export const getAllPublicSignupTokens = () => {
    return fetcher<PublicSignupTokensSchema>({
        url: `/api/admin/invite-link/tokens`,
        method: 'get',
    });
};

export const getGetAllPublicSignupTokensKey = () =>
    [`/api/admin/invite-link/tokens`] as const;

export type GetAllPublicSignupTokensQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllPublicSignupTokens>>
>;
export type GetAllPublicSignupTokensQueryError = ErrorType<unknown>;

/**
 * @summary Get public signup tokens
 */
export const useGetAllPublicSignupTokens = <
    TError = ErrorType<unknown>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllPublicSignupTokens>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllPublicSignupTokensKey() : null));
    const swrFn = () => getAllPublicSignupTokens();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Lets administrators create a invite link to share with colleagues.  People that join using the public invite are assigned the `Viewer` role
 * @summary Create a public signup token
 */
export const createPublicSignupToken = (
    publicSignupTokenCreateSchema: BodyType<PublicSignupTokenCreateSchema>
) => {
    return fetcher<PublicSignupTokenSchema>({
        url: `/api/admin/invite-link/tokens`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: publicSignupTokenCreateSchema,
    });
};

/**
 * Get information about a specific token. The `:token` part of the URL should be the token's secret.
 * @summary Retrieve a token
 */
export const getPublicSignupToken = (token: string) => {
    return fetcher<PublicSignupTokenSchema>({
        url: `/api/admin/invite-link/tokens/${token}`,
        method: 'get',
    });
};

export const getGetPublicSignupTokenKey = (token: string) =>
    [`/api/admin/invite-link/tokens/${token}`] as const;

export type GetPublicSignupTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getPublicSignupToken>>
>;
export type GetPublicSignupTokenQueryError = ErrorType<
    GetPublicSignupToken401 | GetPublicSignupToken403
>;

/**
 * @summary Retrieve a token
 */
export const useGetPublicSignupToken = <
    TError = ErrorType<GetPublicSignupToken401 | GetPublicSignupToken403>
>(
    token: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getPublicSignupToken>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!token;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetPublicSignupTokenKey(token) : null));
    const swrFn = () => getPublicSignupToken(token);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Update information about a specific token. The `:token` part of the URL should be the token's secret.
 * @summary Update a public signup token
 */
export const updatePublicSignupToken = (
    token: string,
    publicSignupTokenUpdateSchema: BodyType<PublicSignupTokenUpdateSchema>
) => {
    return fetcher<PublicSignupTokenSchema>({
        url: `/api/admin/invite-link/tokens/${token}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: publicSignupTokenUpdateSchema,
    });
};
