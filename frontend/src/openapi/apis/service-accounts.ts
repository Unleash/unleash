/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    ServiceAccountsSchema,
    ServiceAccountSchema,
    CreateServiceAccountSchema,
    UpdateServiceAccountSchema,
    PatsSchema,
    PatSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getServiceAccounts = () => {
    return fetcher<ServiceAccountsSchema>({
        url: `/api/admin/service-account`,
        method: 'get',
    });
};

export const getGetServiceAccountsKey = () => [`/api/admin/service-account`];

export type GetServiceAccountsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getServiceAccounts>>
>;
export type GetServiceAccountsQueryError = ErrorType<unknown>;

export const useGetServiceAccounts = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getServiceAccounts>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetServiceAccountsKey() : null));
    const swrFn = () => getServiceAccounts();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createServiceAccount = (
    createServiceAccountSchema: BodyType<CreateServiceAccountSchema>
) => {
    return fetcher<ServiceAccountSchema>({
        url: `/api/admin/service-account`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createServiceAccountSchema,
    });
};

export const updateServiceAccount = (
    id: string,
    updateServiceAccountSchema: BodyType<UpdateServiceAccountSchema>
) => {
    return fetcher<ServiceAccountSchema>({
        url: `/api/admin/service-account/${id}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateServiceAccountSchema,
    });
};

export const deleteServiceAccount = (id: string) => {
    return fetcher<void>({
        url: `/api/admin/service-account/${id}`,
        method: 'delete',
    });
};

export const getServiceAccountTokens = (id: string) => {
    return fetcher<PatsSchema>({
        url: `/api/admin/service-account/${id}/token`,
        method: 'get',
    });
};

export const getGetServiceAccountTokensKey = (id: string) => [
    `/api/admin/service-account/${id}/token`,
];

export type GetServiceAccountTokensQueryResult = NonNullable<
    Awaited<ReturnType<typeof getServiceAccountTokens>>
>;
export type GetServiceAccountTokensQueryError = ErrorType<unknown>;

export const useGetServiceAccountTokens = <TError = ErrorType<unknown>>(
    id: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getServiceAccountTokens>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!id;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetServiceAccountTokensKey(id) : null));
    const swrFn = () => getServiceAccountTokens(id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createServiceAccountToken = (
    id: string,
    patSchema: BodyType<PatSchema>
) => {
    return fetcher<PatSchema>({
        url: `/api/admin/service-account/${id}/token`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: patSchema,
    });
};

export const deleteServiceAccountToken = (id: string, tokenId: string) => {
    return fetcher<void>({
        url: `/api/admin/service-account/${id}/token/${tokenId}`,
        method: 'delete',
    });
};
