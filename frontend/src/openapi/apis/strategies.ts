/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    NameSchema,
    SegmentsSchema,
    UpdateFeatureStrategySegmentsSchema,
    AdminSegmentSchema,
    GetSegment404,
    UpsertSegmentSchema,
    StrategiesSchema,
    StrategySchema,
    UpsertStrategySchema,
    ContextFieldStrategiesSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Uses the name provided in the body of the request to validate if the given name exists or not
 * @summary Validates if a segment name exists
 */
export const validateSegment = (nameSchema: BodyType<NameSchema>) => {
    return fetcher<void>({
        url: `/api/admin/segments/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: nameSchema,
    });
};

export const getSegmentsByStrategyId = (strategyId: string) => {
    return fetcher<SegmentsSchema>({
        url: `/api/admin/segments/strategies/${strategyId}`,
        method: 'get',
    });
};

export const getGetSegmentsByStrategyIdKey = (strategyId: string) =>
    [`/api/admin/segments/strategies/${strategyId}`] as const;

export type GetSegmentsByStrategyIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSegmentsByStrategyId>>
>;
export type GetSegmentsByStrategyIdQueryError = ErrorType<unknown>;

export const useGetSegmentsByStrategyId = <TError = ErrorType<unknown>>(
    strategyId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getSegmentsByStrategyId>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!strategyId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetSegmentsByStrategyIdKey(strategyId) : null));
    const swrFn = () => getSegmentsByStrategyId(strategyId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Sets the segments of the strategy to be exactly the ones passed in the payload
 * @summary Updates the segments of a strategy by id
 */
export const updateFeatureStrategySegments = (
    updateFeatureStrategySegmentsSchema: BodyType<UpdateFeatureStrategySegmentsSchema>
) => {
    return fetcher<UpdateFeatureStrategySegmentsSchema>({
        url: `/api/admin/segments/strategies`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: updateFeatureStrategySegmentsSchema,
    });
};

export const getStrategiesBySegmentId = (id: string) => {
    return fetcher<SegmentsSchema>({
        url: `/api/admin/segments/${id}/strategies`,
        method: 'get',
    });
};

export const getGetStrategiesBySegmentIdKey = (id: string) =>
    [`/api/admin/segments/${id}/strategies`] as const;

export type GetStrategiesBySegmentIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getStrategiesBySegmentId>>
>;
export type GetStrategiesBySegmentIdQueryError = ErrorType<unknown>;

export const useGetStrategiesBySegmentId = <TError = ErrorType<unknown>>(
    id: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getStrategiesBySegmentId>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!id;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetStrategiesBySegmentIdKey(id) : null));
    const swrFn = () => getStrategiesBySegmentId(id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Deletes a segment by its id, if not found returns a 409 error
 * @summary Deletes a segment by id
 */
export const removeSegment = (id: string) => {
    return fetcher<void>({
        url: `/api/admin/segments/${id}`,
        method: 'delete',
    });
};

/**
 * Updates the content of the segment with the provided payload
 * @summary Update segment by id
 */
export const updateSegment = (id: string) => {
    return fetcher<void>({ url: `/api/admin/segments/${id}`, method: 'put' });
};

/**
 * @summary Get a segment by id
 */
export const getSegment = (id: string) => {
    return fetcher<AdminSegmentSchema>({
        url: `/api/admin/segments/${id}`,
        method: 'get',
    });
};

export const getGetSegmentKey = (id: string) =>
    [`/api/admin/segments/${id}`] as const;

export type GetSegmentQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSegment>>
>;
export type GetSegmentQueryError = ErrorType<GetSegment404>;

/**
 * @summary Get a segment by id
 */
export const useGetSegment = <TError = ErrorType<GetSegment404>>(
    id: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getSegment>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!id;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetSegmentKey(id) : null));
    const swrFn = () => getSegment(id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Creates a new segment using the payload provided
 * @summary Create a new segment
 */
export const createSegment = (
    upsertSegmentSchema: BodyType<UpsertSegmentSchema>
) => {
    return fetcher<AdminSegmentSchema>({
        url: `/api/admin/segments`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: upsertSegmentSchema,
    });
};

/**
 * @summary Get all segments
 */
export const getSegments = () => {
    return fetcher<SegmentsSchema>({
        url: `/api/admin/segments`,
        method: 'get',
    });
};

export const getGetSegmentsKey = () => [`/api/admin/segments`] as const;

export type GetSegmentsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getSegments>>
>;
export type GetSegmentsQueryError = ErrorType<unknown>;

/**
 * @summary Get all segments
 */
export const useGetSegments = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getSegments>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetSegmentsKey() : null));
    const swrFn = () => getSegments();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getAllStrategies = () => {
    return fetcher<StrategiesSchema>({
        url: `/api/admin/strategies`,
        method: 'get',
    });
};

export const getGetAllStrategiesKey = () => [`/api/admin/strategies`] as const;

export type GetAllStrategiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllStrategies>>
>;
export type GetAllStrategiesQueryError = ErrorType<unknown>;

export const useGetAllStrategies = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllStrategies>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllStrategiesKey() : null));
    const swrFn = () => getAllStrategies();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createStrategy = (
    upsertStrategySchema: BodyType<UpsertStrategySchema>
) => {
    return fetcher<StrategySchema>({
        url: `/api/admin/strategies`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: upsertStrategySchema,
    });
};

export const getStrategy = (name: string) => {
    return fetcher<StrategySchema>({
        url: `/api/admin/strategies/${name}`,
        method: 'get',
    });
};

export const getGetStrategyKey = (name: string) =>
    [`/api/admin/strategies/${name}`] as const;

export type GetStrategyQueryResult = NonNullable<
    Awaited<ReturnType<typeof getStrategy>>
>;
export type GetStrategyQueryError = ErrorType<unknown>;

export const useGetStrategy = <TError = ErrorType<unknown>>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getStrategy>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetStrategyKey(name) : null));
    const swrFn = () => getStrategy(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const removeStrategy = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${name}`,
        method: 'delete',
    });
};

export const updateStrategy = (
    strategyName: string,
    upsertStrategySchema: BodyType<UpsertStrategySchema>
) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: upsertStrategySchema,
    });
};

export const deprecateStrategy = (strategyName: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}/deprecate`,
        method: 'post',
    });
};

export const reactivateStrategy = (strategyName: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}/reactivate`,
        method: 'post',
    });
};

export const getStrategiesByContextField = (contextField: string) => {
    return fetcher<ContextFieldStrategiesSchema>({
        url: `/api/admin/context/${contextField}/strategies`,
        method: 'get',
    });
};

export const getGetStrategiesByContextFieldKey = (contextField: string) =>
    [`/api/admin/context/${contextField}/strategies`] as const;

export type GetStrategiesByContextFieldQueryResult = NonNullable<
    Awaited<ReturnType<typeof getStrategiesByContextField>>
>;
export type GetStrategiesByContextFieldQueryError = ErrorType<unknown>;

export const useGetStrategiesByContextField = <TError = ErrorType<unknown>>(
    contextField: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getStrategiesByContextField>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!contextField;
    const swrKey =
        swrOptions?.swrKey ??
        (() =>
            isEnabled ? getGetStrategiesByContextFieldKey(contextField) : null);
    const swrFn = () => getStrategiesByContextField(contextField);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};
