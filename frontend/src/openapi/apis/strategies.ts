/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.22.0-beta.45
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    StrategiesSchema,
    StrategySchema,
    UpsertStrategySchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getAllStrategies = () => {
    return fetcher<StrategiesSchema>({
        url: `/api/admin/strategies`,
        method: 'get',
    });
};

export const getGetAllStrategiesKey = () => [`/api/admin/strategies`];

export type GetAllStrategiesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAllStrategies>>
>;
export type GetAllStrategiesQueryError = ErrorType<unknown>;

export const useGetAllStrategies = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAllStrategies>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAllStrategiesKey() : null));
    const swrFn = () => getAllStrategies();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createStrategy = (
    upsertStrategySchema: BodyType<UpsertStrategySchema>
) => {
    return fetcher<StrategySchema>({
        url: `/api/admin/strategies`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: upsertStrategySchema,
    });
};

export const getStrategy = (name: string) => {
    return fetcher<StrategySchema>({
        url: `/api/admin/strategies/${name}`,
        method: 'get',
    });
};

export const getGetStrategyKey = (name: string) => [
    `/api/admin/strategies/${name}`,
];

export type GetStrategyQueryResult = NonNullable<
    Awaited<ReturnType<typeof getStrategy>>
>;
export type GetStrategyQueryError = ErrorType<unknown>;

export const useGetStrategy = <TError = ErrorType<unknown>>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getStrategy>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetStrategyKey(name) : null));
    const swrFn = () => getStrategy(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const removeStrategy = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${name}`,
        method: 'delete',
    });
};

export const updateStrategy = (
    strategyName: string,
    upsertStrategySchema: BodyType<UpsertStrategySchema>
) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: upsertStrategySchema,
    });
};

export const deprecateStrategy = (strategyName: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}/deprecate`,
        method: 'post',
    });
};

export const reactivateStrategy = (strategyName: string) => {
    return fetcher<void>({
        url: `/api/admin/strategies/${strategyName}/reactivate`,
        method: 'post',
    });
};
