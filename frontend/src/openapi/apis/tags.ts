/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    TagsSchema,
    GetTags401,
    GetTags403,
    TagWithVersionSchema,
    TagSchema,
    GetTagsByType401,
    GetTagsByType403,
    GetTag401,
    GetTag403,
    GetTag404,
    TagTypesSchema,
    GetTagTypes401,
    GetTagTypes403,
    TagTypeSchema,
    ValidateTagTypeSchema,
    GetTagType401,
    GetTagType403,
    UpdateTagTypeSchema,
    TagsBulkAddSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * List all tags available in Unleash.
 * @summary List all tags.
 */
export const getTags = () => {
    return fetcher<TagsSchema>({ url: `/api/admin/tags`, method: 'get' });
};

export const getGetTagsKey = () => [`/api/admin/tags`] as const;

export type GetTagsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTags>>
>;
export type GetTagsQueryError = ErrorType<GetTags401 | GetTags403>;

/**
 * @summary List all tags.
 */
export const useGetTags = <
    TError = ErrorType<GetTags401 | GetTags403>
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getTags>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetTagsKey() : null));
    const swrFn = () => getTags();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create a new tag with the specified data.
 * @summary Create a new tag.
 */
export const createTag = (tagSchema: BodyType<TagSchema>) => {
    return fetcher<TagWithVersionSchema>({
        url: `/api/admin/tags`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: tagSchema,
    });
};

/**
 * List all tags of a given type. If the tag type does not exist it returns an empty list.
 * @summary List all tags of a given type.
 */
export const getTagsByType = (type: string) => {
    return fetcher<TagsSchema>({
        url: `/api/admin/tags/${type}`,
        method: 'get',
    });
};

export const getGetTagsByTypeKey = (type: string) =>
    [`/api/admin/tags/${type}`] as const;

export type GetTagsByTypeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTagsByType>>
>;
export type GetTagsByTypeQueryError = ErrorType<
    GetTagsByType401 | GetTagsByType403
>;

/**
 * @summary List all tags of a given type.
 */
export const useGetTagsByType = <
    TError = ErrorType<GetTagsByType401 | GetTagsByType403>
>(
    type: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getTagsByType>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!type;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetTagsByTypeKey(type) : null));
    const swrFn = () => getTagsByType(type);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Get a tag by type and value. Can be used to check whether a given tag already exists in Unleash or not.
 * @summary Get a tag by type and value.
 */
export const getTag = (type: string, value: string) => {
    return fetcher<TagWithVersionSchema>({
        url: `/api/admin/tags/${type}/${value}`,
        method: 'get',
    });
};

export const getGetTagKey = (type: string, value: string) =>
    [`/api/admin/tags/${type}/${value}`] as const;

export type GetTagQueryResult = NonNullable<Awaited<ReturnType<typeof getTag>>>;
export type GetTagQueryError = ErrorType<GetTag401 | GetTag403 | GetTag404>;

/**
 * @summary Get a tag by type and value.
 */
export const useGetTag = <
    TError = ErrorType<GetTag401 | GetTag403 | GetTag404>
>(
    type: string,
    value: string,
    options?: {
        swr?: SWRConfiguration<Awaited<ReturnType<typeof getTag>>, TError> & {
            swrKey?: Key;
            enabled?: boolean;
        };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!(type && value);
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetTagKey(type, value) : null));
    const swrFn = () => getTag(type, value);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Delete a tag by type and value. When a tag is deleted all references to the tag are removed.
 * @summary Delete a tag.
 */
export const deleteTag = (type: string, value: string) => {
    return fetcher<void>({
        url: `/api/admin/tags/${type}/${value}`,
        method: 'delete',
    });
};

/**
 * Get a list of all available tag types.
 * @summary Get all tag types
 */
export const getTagTypes = () => {
    return fetcher<TagTypesSchema>({
        url: `/api/admin/tag-types`,
        method: 'get',
    });
};

export const getGetTagTypesKey = () => [`/api/admin/tag-types`] as const;

export type GetTagTypesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTagTypes>>
>;
export type GetTagTypesQueryError = ErrorType<GetTagTypes401 | GetTagTypes403>;

/**
 * @summary Get all tag types
 */
export const useGetTagTypes = <
    TError = ErrorType<GetTagTypes401 | GetTagTypes403>
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getTagTypes>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetTagTypesKey() : null));
    const swrFn = () => getTagTypes();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create a new tag type.
 * @summary Create a tag type
 */
export const createTagType = (tagTypeSchema: BodyType<TagTypeSchema>) => {
    return fetcher<TagTypeSchema>({
        url: `/api/admin/tag-types`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: tagTypeSchema,
    });
};

/**
 * Validates whether if the body of the request is a valid tag and whether the a tag type with that name already exists or not. If a tag type with the same name exists, this operation will return a 409 status code.
 * @summary Validate a tag type
 */
export const validateTagType = (tagTypeSchema: BodyType<TagTypeSchema>) => {
    return fetcher<ValidateTagTypeSchema>({
        url: `/api/admin/tag-types/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: tagTypeSchema,
    });
};

/**
 * Get a tag type by name.
 * @summary Get a tag type
 */
export const getTagType = (name: string) => {
    return fetcher<TagTypeSchema>({
        url: `/api/admin/tag-types/${name}`,
        method: 'get',
    });
};

export const getGetTagTypeKey = (name: string) =>
    [`/api/admin/tag-types/${name}`] as const;

export type GetTagTypeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getTagType>>
>;
export type GetTagTypeQueryError = ErrorType<GetTagType401 | GetTagType403>;

/**
 * @summary Get a tag type
 */
export const useGetTagType = <
    TError = ErrorType<GetTagType401 | GetTagType403>
>(
    name: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getTagType>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!name;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetTagTypeKey(name) : null));
    const swrFn = () => getTagType(name);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Update the configuration for the specified tag type.
 * @summary Update a tag type
 */
export const updateTagType = (
    name: string,
    updateTagTypeSchema: BodyType<UpdateTagTypeSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/tag-types/${name}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateTagTypeSchema,
    });
};

/**
 * Deletes a tag type. If any features have tags of this type, those tags will be deleted.
 * @summary Delete a tag type
 */
export const deleteTagType = (name: string) => {
    return fetcher<void>({
        url: `/api/admin/tag-types/${name}`,
        method: 'delete',
    });
};

/**
 * Add a tag to a list of features. Create tags if needed.
 * @summary Adds a tag to the specified features
 */
export const addTagToFeatures = (
    projectId: string,
    tagsBulkAddSchema: BodyType<TagsBulkAddSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/projects/${projectId}/tags`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: tagsBulkAddSchema,
    });
};
