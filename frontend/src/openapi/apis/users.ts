/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * Unleash API
 * OpenAPI spec version: 4.20.0-beta.2
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    MeSchema,
    ProfileSchema,
    PasswordSchema,
    ResetPasswordSchema,
    IdSchema,
    UsersSchema,
    UserSchema,
    CreateUserSchema,
    UsersGroupsBaseSchema,
    UpdateUserSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

export const getMe = () => {
    return fetcher<MeSchema>({ url: `/api/admin/user`, method: 'get' });
};

export const getGetMeKey = () => [`/api/admin/user`];

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = ErrorType<unknown>;

export const useGetMe = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getMe>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetMeKey() : null));
    const swrFn = () => getMe();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getProfile = () => {
    return fetcher<ProfileSchema>({
        url: `/api/admin/user/profile`,
        method: 'get',
    });
};

export const getGetProfileKey = () => [`/api/admin/user/profile`];

export type GetProfileQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProfile>>
>;
export type GetProfileQueryError = ErrorType<unknown>;

export const useGetProfile = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProfile>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetProfileKey() : null));
    const swrFn = () => getProfile();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const changeMyPassword = (passwordSchema: BodyType<PasswordSchema>) => {
    return fetcher<void>({
        url: `/api/admin/user/change-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

export const validateUserPassword = (
    passwordSchema: BodyType<PasswordSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/validate-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

export const changeUserPassword = (
    id: string,
    passwordSchema: BodyType<PasswordSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/${id}/change-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

export const resetUserPassword = (idSchema: BodyType<IdSchema>) => {
    return fetcher<ResetPasswordSchema>({
        url: `/api/admin/user-admin/reset-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: idSchema,
    });
};

export const getUsers = () => {
    return fetcher<UsersSchema>({
        url: `/api/admin/user-admin`,
        method: 'get',
    });
};

export const getGetUsersKey = () => [`/api/admin/user-admin`];

export type GetUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = ErrorType<unknown>;

export const useGetUsers = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetUsersKey() : null));
    const swrFn = () => getUsers();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const createUser = (createUserSchema: BodyType<CreateUserSchema>) => {
    return fetcher<UserSchema>({
        url: `/api/admin/user-admin`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createUserSchema,
    });
};

export const searchUsers = () => {
    return fetcher<UsersSchema>({
        url: `/api/admin/user-admin/search`,
        method: 'get',
    });
};

export const getSearchUsersKey = () => [`/api/admin/user-admin/search`];

export type SearchUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchUsers>>
>;
export type SearchUsersQueryError = ErrorType<unknown>;

export const useSearchUsers = <TError = ErrorType<unknown>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof searchUsers>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getSearchUsersKey() : null));
    const swrFn = () => searchUsers();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getBaseUsersAndGroups = () => {
    return fetcher<UsersGroupsBaseSchema>({
        url: `/api/admin/user-admin/access`,
        method: 'get',
    });
};

export const getGetBaseUsersAndGroupsKey = () => [
    `/api/admin/user-admin/access`,
];

export type GetBaseUsersAndGroupsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBaseUsersAndGroups>>
>;
export type GetBaseUsersAndGroupsQueryError = ErrorType<unknown>;

export const useGetBaseUsersAndGroups = <
    TError = ErrorType<unknown>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getBaseUsersAndGroups>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetBaseUsersAndGroupsKey() : null));
    const swrFn = () => getBaseUsersAndGroups();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const getUser = (id: string) => {
    return fetcher<UserSchema>({
        url: `/api/admin/user-admin/${id}`,
        method: 'get',
    });
};

export const getGetUserKey = (id: string) => [`/api/admin/user-admin/${id}`];

export type GetUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = ErrorType<unknown>;

export const useGetUser = <TError = ErrorType<unknown>>(
    id: string,
    options?: {
        swr?: SWRConfiguration<Awaited<ReturnType<typeof getUser>>, TError> & {
            swrKey?: Key;
            enabled?: boolean;
        };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!id;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserKey(id) : null));
    const swrFn = () => getUser(id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

export const updateUser = (
    id: string,
    updateUserSchema: BodyType<UpdateUserSchema>
) => {
    return fetcher<UserSchema>({
        url: `/api/admin/user-admin/${id}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateUserSchema,
    });
};

export const deleteUser = (id: string) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/${id}`,
        method: 'delete',
    });
};
