/**
 * Generated by Orval
 * Do not edit manually.
 * See `gen:api` script in package.json
 */
import useSwr from 'swr';
import type { SWRConfiguration, Key } from 'swr';
import type {
    GroupsSchema,
    GetGroups401,
    GetGroups403,
    GroupSchema,
    CreateGroupSchema,
    GetGroup400,
    GetGroup401,
    GetGroup403,
    GetGroup404,
    RolesWithVersionSchema,
    GetRoles401,
    GetRoles403,
    RoleWithVersionSchema,
    CreateRoleWithPermissionsSchema,
    RoleWithPermissionsSchema,
    GetRoleById400,
    GetRoleById401,
    GetRoleById404,
    MeSchema,
    GetMe401,
    ProfileSchema,
    GetProfile401,
    PasswordSchema,
    ResetPasswordSchema,
    IdSchema,
    UsersSchema,
    GetUsers401,
    GetUsers403,
    CreateUserResponseSchema,
    CreateUserSchema,
    SearchUsers401,
    SearchUsersParams,
    UsersGroupsBaseSchema,
    GetBaseUsersAndGroups401,
    AdminCountSchema,
    GetAdminCount401,
    GetAdminCount403,
    UserSchema,
    GetUser400,
    GetUser401,
    GetUser404,
    UpdateUserSchema,
} from '../models';
import { fetcher } from '../fetcher';
import type { ErrorType, BodyType } from '../fetcher';

/**
 * Get a list of user groups for Role-Based Access Control
 * @summary Get a list of groups
 */
export const getGroups = () => {
    return fetcher<GroupsSchema>({ url: `/api/admin/groups`, method: 'get' });
};

export const getGetGroupsKey = () => [`/api/admin/groups`] as const;

export type GetGroupsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGroups>>
>;
export type GetGroupsQueryError = ErrorType<GetGroups401 | GetGroups403>;

/**
 * @summary Get a list of groups
 */
export const useGetGroups = <
    TError = ErrorType<GetGroups401 | GetGroups403>
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getGroups>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetGroupsKey() : null));
    const swrFn = () => getGroups();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create a new user group for Role-Based Access Control
 * @summary Create a new group
 */
export const createGroup = (createGroupSchema: BodyType<CreateGroupSchema>) => {
    return fetcher<GroupSchema>({
        url: `/api/admin/groups`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createGroupSchema,
    });
};

/**
 * Get a single user group by group id
 * @summary Get a single group
 */
export const getGroup = (groupId: string) => {
    return fetcher<GroupSchema>({
        url: `/api/admin/groups/${groupId}`,
        method: 'get',
    });
};

export const getGetGroupKey = (groupId: string) =>
    [`/api/admin/groups/${groupId}`] as const;

export type GetGroupQueryResult = NonNullable<
    Awaited<ReturnType<typeof getGroup>>
>;
export type GetGroupQueryError = ErrorType<
    GetGroup400 | GetGroup401 | GetGroup403 | GetGroup404
>;

/**
 * @summary Get a single group
 */
export const useGetGroup = <
    TError = ErrorType<GetGroup400 | GetGroup401 | GetGroup403 | GetGroup404>
>(
    groupId: string,
    options?: {
        swr?: SWRConfiguration<Awaited<ReturnType<typeof getGroup>>, TError> & {
            swrKey?: Key;
            enabled?: boolean;
        };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!groupId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetGroupKey(groupId) : null));
    const swrFn = () => getGroup(groupId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Update existing user group by group id. It overrides previous group details.
 * @summary Update a group
 */
export const updateGroup = (
    groupId: string,
    createGroupSchema: BodyType<CreateGroupSchema>
) => {
    return fetcher<GroupSchema>({
        url: `/api/admin/groups/${groupId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: createGroupSchema,
    });
};

/**
 * Delete a single user group by group id
 * @summary Delete a single group
 */
export const deleteGroup = (groupId: string) => {
    return fetcher<void>({
        url: `/api/admin/groups/${groupId}`,
        method: 'delete',
    });
};

/**
 * Get a list of project, root and custom roles for Role-Based Access Control
 * @summary Get a list of roles
 */
export const getRoles = () => {
    return fetcher<RolesWithVersionSchema>({
        url: `/api/admin/roles`,
        method: 'get',
    });
};

export const getGetRolesKey = () => [`/api/admin/roles`] as const;

export type GetRolesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoles>>
>;
export type GetRolesQueryError = ErrorType<GetRoles401 | GetRoles403>;

/**
 * @summary Get a list of roles
 */
export const useGetRoles = <
    TError = ErrorType<GetRoles401 | GetRoles403>
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getRoles>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetRolesKey() : null));
    const swrFn = () => getRoles();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Create a new custom role for Role-Based Access Control
 * @summary Create a new role
 */
export const createRole = (
    createRoleWithPermissionsSchema: BodyType<CreateRoleWithPermissionsSchema>
) => {
    return fetcher<RoleWithVersionSchema>({
        url: `/api/admin/roles`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createRoleWithPermissionsSchema,
    });
};

/**
 * Get a single role by role id
 * @summary Get a single role
 */
export const getRoleById = (roleId: string) => {
    return fetcher<RoleWithPermissionsSchema>({
        url: `/api/admin/roles/${roleId}`,
        method: 'get',
    });
};

export const getGetRoleByIdKey = (roleId: string) =>
    [`/api/admin/roles/${roleId}`] as const;

export type GetRoleByIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getRoleById>>
>;
export type GetRoleByIdQueryError = ErrorType<
    GetRoleById400 | GetRoleById401 | GetRoleById404
>;

/**
 * @summary Get a single role
 */
export const useGetRoleById = <
    TError = ErrorType<GetRoleById400 | GetRoleById401 | GetRoleById404>
>(
    roleId: string,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof getRoleById>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!roleId;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetRoleByIdKey(roleId) : null));
    const swrFn = () => getRoleById(roleId);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Update a custom role by role id
 * @summary Update a role
 */
export const updateRole = (
    roleId: string,
    createRoleWithPermissionsSchema: BodyType<CreateRoleWithPermissionsSchema>
) => {
    return fetcher<RoleWithVersionSchema>({
        url: `/api/admin/roles/${roleId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: createRoleWithPermissionsSchema,
    });
};

/**
 * Delete a custom role by id. You cannot delete built-in roles or roles that are in use.
 * @summary Delete a custom role
 */
export const deleteRole = (roleId: string) => {
    return fetcher<void>({
        url: `/api/admin/roles/${roleId}`,
        method: 'delete',
    });
};

/**
 * Check if the role matches schema and has a unique name
 * @summary Validate a role
 */
export const validateRole = (
    createRoleWithPermissionsSchema: BodyType<CreateRoleWithPermissionsSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/roles/validate`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createRoleWithPermissionsSchema,
    });
};

/**
 * Detailed information about the current user, user permissions and user feedback
 * @summary Get your own user details
 */
export const getMe = () => {
    return fetcher<MeSchema>({ url: `/api/admin/user`, method: 'get' });
};

export const getGetMeKey = () => [`/api/admin/user`] as const;

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>;
export type GetMeQueryError = ErrorType<GetMe401>;

/**
 * @summary Get your own user details
 */
export const useGetMe = <TError = ErrorType<GetMe401>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getMe>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetMeKey() : null));
    const swrFn = () => getMe();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Detailed information about the current user root role and project membership
 * @summary Get your own user profile
 */
export const getProfile = () => {
    return fetcher<ProfileSchema>({
        url: `/api/admin/user/profile`,
        method: 'get',
    });
};

export const getGetProfileKey = () => [`/api/admin/user/profile`] as const;

export type GetProfileQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProfile>>
>;
export type GetProfileQueryError = ErrorType<GetProfile401>;

/**
 * @summary Get your own user profile
 */
export const useGetProfile = <TError = ErrorType<GetProfile401>>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getProfile>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetProfileKey() : null));
    const swrFn = () => getProfile();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Requires specifying old password and confirming new password
 * @summary Change your own password
 */
export const changeMyPassword = (passwordSchema: BodyType<PasswordSchema>) => {
    return fetcher<void>({
        url: `/api/admin/user/change-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

/**
 * Validate the password strength. Minimum 10 characters, uppercase letter, number, special character.
 * @summary Validate password for a user
 */
export const validateUserPassword = (
    passwordSchema: BodyType<PasswordSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/validate-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

/**
 * Change password for a user as an admin
 * @summary Change password for a user
 */
export const changeUserPassword = (
    id: string,
    passwordSchema: BodyType<PasswordSchema>
) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/${id}/change-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: passwordSchema,
    });
};

/**
 * Reset user password as an admin
 * @summary Reset user password
 */
export const resetUserPassword = (idSchema: BodyType<IdSchema>) => {
    return fetcher<ResetPasswordSchema>({
        url: `/api/admin/user-admin/reset-password`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: idSchema,
    });
};

/**
 * Will return all users and all available root roles for the Unleash instance.
 * @summary Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)
 */
export const getUsers = () => {
    return fetcher<UsersSchema>({
        url: `/api/admin/user-admin`,
        method: 'get',
    });
};

export const getGetUsersKey = () => [`/api/admin/user-admin`] as const;

export type GetUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = ErrorType<GetUsers401 | GetUsers403>;

/**
 * @summary Get all users and [root roles](https://docs.getunleash.io/reference/rbac#predefined-roles)
 */
export const useGetUsers = <
    TError = ErrorType<GetUsers401 | GetUsers403>
>(options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & {
        swrKey?: Key;
        enabled?: boolean;
    };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetUsersKey() : null));
    const swrFn = () => getUsers();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Creates a new user with the given root role.
 * @summary Create a new user
 */
export const createUser = (createUserSchema: BodyType<CreateUserSchema>) => {
    return fetcher<CreateUserResponseSchema>({
        url: `/api/admin/user-admin`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createUserSchema,
    });
};

/**
 *  It will preform a simple search based on name and email matching the given query. Requires minimum 2 characters
 * @summary Search users
 */
export const searchUsers = (params?: SearchUsersParams) => {
    return fetcher<UsersSchema>({
        url: `/api/admin/user-admin/search`,
        method: 'get',
        params,
    });
};

export const getSearchUsersKey = (params?: SearchUsersParams) =>
    [`/api/admin/user-admin/search`, ...(params ? [params] : [])] as const;

export type SearchUsersQueryResult = NonNullable<
    Awaited<ReturnType<typeof searchUsers>>
>;
export type SearchUsersQueryError = ErrorType<SearchUsers401>;

/**
 * @summary Search users
 */
export const useSearchUsers = <TError = ErrorType<SearchUsers401>>(
    params?: SearchUsersParams,
    options?: {
        swr?: SWRConfiguration<
            Awaited<ReturnType<typeof searchUsers>>,
            TError
        > & { swrKey?: Key; enabled?: boolean };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getSearchUsersKey(params) : null));
    const swrFn = () => searchUsers(params);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Get a subset of user and group information eligible even for non-admin users
 * @summary Get basic user and group information
 */
export const getBaseUsersAndGroups = () => {
    return fetcher<UsersGroupsBaseSchema>({
        url: `/api/admin/user-admin/access`,
        method: 'get',
    });
};

export const getGetBaseUsersAndGroupsKey = () =>
    [`/api/admin/user-admin/access`] as const;

export type GetBaseUsersAndGroupsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getBaseUsersAndGroups>>
>;
export type GetBaseUsersAndGroupsQueryError =
    ErrorType<GetBaseUsersAndGroups401>;

/**
 * @summary Get basic user and group information
 */
export const useGetBaseUsersAndGroups = <
    TError = ErrorType<GetBaseUsersAndGroups401>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getBaseUsersAndGroups>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetBaseUsersAndGroupsKey() : null));
    const swrFn = () => getBaseUsersAndGroups();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Get a total count of admins with password, without password and admin service accounts
 * @summary Get total count of admin accounts
 */
export const getAdminCount = () => {
    return fetcher<AdminCountSchema>({
        url: `/api/admin/user-admin/admin-count`,
        method: 'get',
    });
};

export const getGetAdminCountKey = () =>
    [`/api/admin/user-admin/admin-count`] as const;

export type GetAdminCountQueryResult = NonNullable<
    Awaited<ReturnType<typeof getAdminCount>>
>;
export type GetAdminCountQueryError = ErrorType<
    GetAdminCount401 | GetAdminCount403
>;

/**
 * @summary Get total count of admin accounts
 */
export const useGetAdminCount = <
    TError = ErrorType<GetAdminCount401 | GetAdminCount403>
>(options?: {
    swr?: SWRConfiguration<
        Awaited<ReturnType<typeof getAdminCount>>,
        TError
    > & { swrKey?: Key; enabled?: boolean };
}) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false;
    const swrKey =
        swrOptions?.swrKey ??
        (() => (isEnabled ? getGetAdminCountKey() : null));
    const swrFn = () => getAdminCount();

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Will return a single user by id
 * @summary Get user
 */
export const getUser = (id: string) => {
    return fetcher<UserSchema>({
        url: `/api/admin/user-admin/${id}`,
        method: 'get',
    });
};

export const getGetUserKey = (id: string) =>
    [`/api/admin/user-admin/${id}`] as const;

export type GetUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = ErrorType<GetUser400 | GetUser401 | GetUser404>;

/**
 * @summary Get user
 */
export const useGetUser = <
    TError = ErrorType<GetUser400 | GetUser401 | GetUser404>
>(
    id: string,
    options?: {
        swr?: SWRConfiguration<Awaited<ReturnType<typeof getUser>>, TError> & {
            swrKey?: Key;
            enabled?: boolean;
        };
    }
) => {
    const { swr: swrOptions } = options ?? {};

    const isEnabled = swrOptions?.enabled !== false && !!id;
    const swrKey =
        swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserKey(id) : null));
    const swrFn = () => getUser(id);

    const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
        swrKey,
        swrFn,
        swrOptions
    );

    return {
        swrKey,
        ...query,
    };
};

/**
 * Only the explicitly specified fields get updated.
 * @summary Update a user
 */
export const updateUser = (
    id: string,
    updateUserSchema: BodyType<UpdateUserSchema>
) => {
    return fetcher<CreateUserResponseSchema>({
        url: `/api/admin/user-admin/${id}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateUserSchema,
    });
};

/**
 * Deletes the user with the given userId
 * @summary Delete a user
 */
export const deleteUser = (id: string) => {
    return fetcher<void>({
        url: `/api/admin/user-admin/${id}`,
        method: 'delete',
    });
};
