/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ApiTokenSchema
 */
export interface ApiTokenSchema {
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    secret?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    type: ApiTokenSchemaTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    environment?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    project?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiTokenSchema
     */
    projects?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof ApiTokenSchema
     */
    expiresAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ApiTokenSchema
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof ApiTokenSchema
     */
    seenAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ApiTokenSchema
     */
    alias?: string | null;
}


/**
 * @export
 */
export const ApiTokenSchemaTypeEnum = {
    Client: 'client',
    Admin: 'admin',
    Frontend: 'frontend'
} as const;
export type ApiTokenSchemaTypeEnum = typeof ApiTokenSchemaTypeEnum[keyof typeof ApiTokenSchemaTypeEnum];


/**
 * Check if a given object implements the ApiTokenSchema interface.
 */
export function instanceOfApiTokenSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ApiTokenSchemaFromJSON(json: any): ApiTokenSchema {
    return ApiTokenSchemaFromJSONTyped(json, false);
}

export function ApiTokenSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiTokenSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'secret': !exists(json, 'secret') ? undefined : json['secret'],
        'username': json['username'],
        'type': json['type'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'project': !exists(json, 'project') ? undefined : json['project'],
        'projects': !exists(json, 'projects') ? undefined : json['projects'],
        'expiresAt': !exists(json, 'expiresAt') ? undefined : (json['expiresAt'] === null ? null : new Date(json['expiresAt'])),
        'createdAt': !exists(json, 'createdAt') ? undefined : (json['createdAt'] === null ? null : new Date(json['createdAt'])),
        'seenAt': !exists(json, 'seenAt') ? undefined : (json['seenAt'] === null ? null : new Date(json['seenAt'])),
        'alias': !exists(json, 'alias') ? undefined : json['alias'],
    };
}

export function ApiTokenSchemaToJSON(value?: ApiTokenSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'secret': value.secret,
        'username': value.username,
        'type': value.type,
        'environment': value.environment,
        'project': value.project,
        'projects': value.projects,
        'expiresAt': value.expiresAt === undefined ? undefined : (value.expiresAt === null ? null : value.expiresAt.toISOString()),
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt === null ? null : value.createdAt.toISOString()),
        'seenAt': value.seenAt === undefined ? undefined : (value.seenAt === null ? null : value.seenAt.toISOString()),
        'alias': value.alias,
    };
}

