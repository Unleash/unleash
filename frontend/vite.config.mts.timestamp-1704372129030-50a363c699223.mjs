// vite.config.mts
import { defineConfig, mergeConfig } from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/vite/dist/node/index.js";
import {
  configDefaults,
  defineConfig as vitestDefineConfig
} from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/vitest/dist/config.js";
import tsconfigPaths from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/vite-tsconfig-paths/dist/index.mjs";
import react from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/@vitejs/plugin-react/dist/index.mjs";
import svgr from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/vite-plugin-svgr/dist/index.js";
import envCompatible from "file:///Users/foseberg/unleashReps/unleash/frontend/node_modules/vite-plugin-env-compatible/dist/index.mjs";
var UNLEASH_API = process.env.UNLEASH_API || "http://localhost:4242";
var UNLEASH_BASE_PATH = process.env.UNLEASH_BASE_PATH || "/";
if (!UNLEASH_BASE_PATH.startsWith("/") || !UNLEASH_BASE_PATH.endsWith("/")) {
  console.error("UNLEASH_BASE_PATH must both start and end with /");
  process.exit(1);
}
var vitestConfig = vitestDefineConfig({
  test: {
    globals: true,
    setupFiles: "src/setupTests.ts",
    environment: "jsdom",
    exclude: [...configDefaults.exclude, "**/cypress/**"]
  }
});
var vite_config_default = mergeConfig(
  defineConfig({
    base: UNLEASH_BASE_PATH,
    build: {
      outDir: "build",
      assetsDir: "static",
      assetsInlineLimit: 0,
      modulePreload: false,
      cssCodeSplit: false
    },
    server: {
      open: true,
      host: true,
      port: 3e3,
      proxy: {
        [`${UNLEASH_BASE_PATH}api`]: {
          target: UNLEASH_API,
          changeOrigin: true
        },
        [`${UNLEASH_BASE_PATH}auth`]: {
          target: UNLEASH_API,
          changeOrigin: true
        },
        [`${UNLEASH_BASE_PATH}logout`]: {
          target: UNLEASH_API,
          changeOrigin: true
        },
        [`${UNLEASH_BASE_PATH}health`]: {
          target: UNLEASH_API,
          changeOrigin: true
        },
        [`${UNLEASH_BASE_PATH}invite`]: {
          target: UNLEASH_API,
          changeOrigin: true
        },
        [`${UNLEASH_BASE_PATH}edge`]: {
          target: UNLEASH_API,
          changeOrigin: true
        }
      },
      fs: {
        allow: [".."]
      }
    },
    plugins: [react(), tsconfigPaths(), svgr(), envCompatible()],
    esbuild: {
      logOverride: { "this-is-undefined-in-esm": "silent" }
    }
  }),
  vitestConfig
);
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2Zvc2ViZXJnL3VubGVhc2hSZXBzL3VubGVhc2gvZnJvbnRlbmRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9mb3NlYmVyZy91bmxlYXNoUmVwcy91bmxlYXNoL2Zyb250ZW5kL3ZpdGUuY29uZmlnLm10c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvZm9zZWJlcmcvdW5sZWFzaFJlcHMvdW5sZWFzaC9mcm9udGVuZC92aXRlLmNvbmZpZy5tdHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIG1lcmdlQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5pbXBvcnQge1xuICAgIGNvbmZpZ0RlZmF1bHRzLFxuICAgIGRlZmluZUNvbmZpZyBhcyB2aXRlc3REZWZpbmVDb25maWcsXG59IGZyb20gJ3ZpdGVzdC9jb25maWcnO1xuaW1wb3J0IHRzY29uZmlnUGF0aHMgZnJvbSAndml0ZS10c2NvbmZpZy1wYXRocyc7XG5pbXBvcnQgcmVhY3QgZnJvbSAnQHZpdGVqcy9wbHVnaW4tcmVhY3QnO1xuaW1wb3J0IHN2Z3IgZnJvbSAndml0ZS1wbHVnaW4tc3Zncic7XG5pbXBvcnQgZW52Q29tcGF0aWJsZSBmcm9tICd2aXRlLXBsdWdpbi1lbnYtY29tcGF0aWJsZSc7XG5cbmNvbnN0IFVOTEVBU0hfQVBJID0gcHJvY2Vzcy5lbnYuVU5MRUFTSF9BUEkgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6NDI0Mic7XG5jb25zdCBVTkxFQVNIX0JBU0VfUEFUSCA9IHByb2Nlc3MuZW52LlVOTEVBU0hfQkFTRV9QQVRIIHx8ICcvJztcblxuaWYgKCFVTkxFQVNIX0JBU0VfUEFUSC5zdGFydHNXaXRoKCcvJykgfHwgIVVOTEVBU0hfQkFTRV9QQVRILmVuZHNXaXRoKCcvJykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdVTkxFQVNIX0JBU0VfUEFUSCBtdXN0IGJvdGggc3RhcnQgYW5kIGVuZCB3aXRoIC8nKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbmNvbnN0IHZpdGVzdENvbmZpZyA9IHZpdGVzdERlZmluZUNvbmZpZyh7XG4gICAgdGVzdDoge1xuICAgICAgICBnbG9iYWxzOiB0cnVlLFxuICAgICAgICBzZXR1cEZpbGVzOiAnc3JjL3NldHVwVGVzdHMudHMnLFxuICAgICAgICBlbnZpcm9ubWVudDogJ2pzZG9tJyxcbiAgICAgICAgZXhjbHVkZTogWy4uLmNvbmZpZ0RlZmF1bHRzLmV4Y2x1ZGUsICcqKi9jeXByZXNzLyoqJ10sXG4gICAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtZXJnZUNvbmZpZyhcbiAgICBkZWZpbmVDb25maWcoe1xuICAgICAgICBiYXNlOiBVTkxFQVNIX0JBU0VfUEFUSCxcbiAgICAgICAgYnVpbGQ6IHtcbiAgICAgICAgICAgIG91dERpcjogJ2J1aWxkJyxcbiAgICAgICAgICAgIGFzc2V0c0RpcjogJ3N0YXRpYycsXG4gICAgICAgICAgICBhc3NldHNJbmxpbmVMaW1pdDogMCxcbiAgICAgICAgICAgIG1vZHVsZVByZWxvYWQ6IGZhbHNlLFxuICAgICAgICAgICAgY3NzQ29kZVNwbGl0OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyOiB7XG4gICAgICAgICAgICBvcGVuOiB0cnVlLFxuICAgICAgICAgICAgaG9zdDogdHJ1ZSxcbiAgICAgICAgICAgIHBvcnQ6IDMwMDAsXG4gICAgICAgICAgICBwcm94eToge1xuICAgICAgICAgICAgICAgIFtgJHtVTkxFQVNIX0JBU0VfUEFUSH1hcGlgXToge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFVOTEVBU0hfQVBJLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbYCR7VU5MRUFTSF9CQVNFX1BBVEh9YXV0aGBdOiB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogVU5MRUFTSF9BUEksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtgJHtVTkxFQVNIX0JBU0VfUEFUSH1sb2dvdXRgXToge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFVOTEVBU0hfQVBJLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VPcmlnaW46IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbYCR7VU5MRUFTSF9CQVNFX1BBVEh9aGVhbHRoYF06IHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBVTkxFQVNIX0FQSSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW2Ake1VOTEVBU0hfQkFTRV9QQVRIfWludml0ZWBdOiB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogVU5MRUFTSF9BUEksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZU9yaWdpbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtgJHtVTkxFQVNIX0JBU0VfUEFUSH1lZGdlYF06IHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBVTkxFQVNIX0FQSSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnM6IHtcbiAgICAgICAgICAgICAgICBhbGxvdzogWycuLiddLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcGx1Z2luczogW3JlYWN0KCksIHRzY29uZmlnUGF0aHMoKSwgc3ZncigpLCBlbnZDb21wYXRpYmxlKCldLFxuICAgICAgICBlc2J1aWxkOiB7XG4gICAgICAgICAgICBsb2dPdmVycmlkZTogeyAndGhpcy1pcy11bmRlZmluZWQtaW4tZXNtJzogJ3NpbGVudCcgfSxcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICB2aXRlc3RDb25maWcsXG4pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUF3VCxTQUFTLGNBQWMsbUJBQW1CO0FBQ2xXO0FBQUEsRUFDSTtBQUFBLEVBQ0EsZ0JBQWdCO0FBQUEsT0FDYjtBQUNQLE9BQU8sbUJBQW1CO0FBQzFCLE9BQU8sV0FBVztBQUNsQixPQUFPLFVBQVU7QUFDakIsT0FBTyxtQkFBbUI7QUFFMUIsSUFBTSxjQUFjLFFBQVEsSUFBSSxlQUFlO0FBQy9DLElBQU0sb0JBQW9CLFFBQVEsSUFBSSxxQkFBcUI7QUFFM0QsSUFBSSxDQUFDLGtCQUFrQixXQUFXLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixTQUFTLEdBQUcsR0FBRztBQUN4RSxVQUFRLE1BQU0sa0RBQWtEO0FBQ2hFLFVBQVEsS0FBSyxDQUFDO0FBQ2xCO0FBRUEsSUFBTSxlQUFlLG1CQUFtQjtBQUFBLEVBQ3BDLE1BQU07QUFBQSxJQUNGLFNBQVM7QUFBQSxJQUNULFlBQVk7QUFBQSxJQUNaLGFBQWE7QUFBQSxJQUNiLFNBQVMsQ0FBQyxHQUFHLGVBQWUsU0FBUyxlQUFlO0FBQUEsRUFDeEQ7QUFDSixDQUFDO0FBRUQsSUFBTyxzQkFBUTtBQUFBLEVBQ1gsYUFBYTtBQUFBLElBQ1QsTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0gsUUFBUTtBQUFBLE1BQ1IsV0FBVztBQUFBLE1BQ1gsbUJBQW1CO0FBQUEsTUFDbkIsZUFBZTtBQUFBLE1BQ2YsY0FBYztBQUFBLElBQ2xCO0FBQUEsSUFDQSxRQUFRO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixNQUFNO0FBQUEsTUFDTixPQUFPO0FBQUEsUUFDSCxDQUFDLEdBQUcsaUJBQWlCLEtBQUssR0FBRztBQUFBLFVBQ3pCLFFBQVE7QUFBQSxVQUNSLGNBQWM7QUFBQSxRQUNsQjtBQUFBLFFBQ0EsQ0FBQyxHQUFHLGlCQUFpQixNQUFNLEdBQUc7QUFBQSxVQUMxQixRQUFRO0FBQUEsVUFDUixjQUFjO0FBQUEsUUFDbEI7QUFBQSxRQUNBLENBQUMsR0FBRyxpQkFBaUIsUUFBUSxHQUFHO0FBQUEsVUFDNUIsUUFBUTtBQUFBLFVBQ1IsY0FBYztBQUFBLFFBQ2xCO0FBQUEsUUFDQSxDQUFDLEdBQUcsaUJBQWlCLFFBQVEsR0FBRztBQUFBLFVBQzVCLFFBQVE7QUFBQSxVQUNSLGNBQWM7QUFBQSxRQUNsQjtBQUFBLFFBQ0EsQ0FBQyxHQUFHLGlCQUFpQixRQUFRLEdBQUc7QUFBQSxVQUM1QixRQUFRO0FBQUEsVUFDUixjQUFjO0FBQUEsUUFDbEI7QUFBQSxRQUNBLENBQUMsR0FBRyxpQkFBaUIsTUFBTSxHQUFHO0FBQUEsVUFDMUIsUUFBUTtBQUFBLFVBQ1IsY0FBYztBQUFBLFFBQ2xCO0FBQUEsTUFDSjtBQUFBLE1BQ0EsSUFBSTtBQUFBLFFBQ0EsT0FBTyxDQUFDLElBQUk7QUFBQSxNQUNoQjtBQUFBLElBQ0o7QUFBQSxJQUNBLFNBQVMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxHQUFHLEtBQUssR0FBRyxjQUFjLENBQUM7QUFBQSxJQUMzRCxTQUFTO0FBQUEsTUFDTCxhQUFhLEVBQUUsNEJBQTRCLFNBQVM7QUFBQSxJQUN4RDtBQUFBLEVBQ0osQ0FBQztBQUFBLEVBQ0Q7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K
