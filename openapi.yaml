# IMPLEMENT
# Check code for toggle type strings
# REVIEW
# Rationalise component parameters. No point in having several iterations of the same schema. UpdateFeatureToggle vs NewFeatureToggle
# Enable and Update a Feature toggle have same bodies as much of the response 200 (can we use $ref to simplify the OAS?)
# TEST
# Is colon before a query parameter in the documentation a literal colon or is it used to denote the type of parameter?
# DOCUMENTATION STYLE NOTES
# Use 'and' instead of &
# Headings: use newspaper-style headings 'This is a heading' or movie-style 'This is a Heading'?
# American English or British English?
# Proper nouns for Unleash: Unleash, Feature Toggle (note that the plural is lower-case: feature toggles)
# Parameter names: use JS-style (aParameter) or Open API style (aparameter)?
# QUESTIONS
# In http://unleash.host.com/api/admin/features/:toggleName` isn't the toggleName superfluous since toggleName nust be part of the body query anyway?
# NOTE SOMEWHERE (client API docs?)
# Feature Toggle names cannot have spaces. List of legal characters?
# 
openapi: 3.0.0
servers:
  - description: Local host.
    url: 'http://localhost:4242/api'
tags:
  - name: Admin - Feature toggles
    description: Accessing feature toggles on the Unleash admin server
  - name: Admin - archive
    description: Handling Feature Toggle archiving and un-archiving on the Unleash admin server
info:
  title: Unleash API
  description: Unleash is a open source feature flag and toggle system for all your applications and services.
  version: 3.5.6
  contact:
    name: The Unleash team
    url: 'https://unleash.github.io/'
    email: some_email@gmail.com
externalDocs:
  description: Unleash documentation
  url: 'https://unleash.github.io/docs/getting_started'
paths:
  '/admin/features':
    get:
      summary: Fetches all feature toggles from the Unleash server.
      description: |
        The response returns all active feature toggles and their current strategy configuration:
        - A feature toggle will have *at least* one configured strategy.
        - A strategy will have a `name` and `parameters` map.

        **Note:** To only return one Feature Toggle, add the Feature Toggle name as a suffix to the request. For example: `GET [Your host]/api/admin/features/featureX`. It is not possible to add this parameter as a *Try it out* option due to restrictions in the [Open API Sepcification](https://swagger.io/docs/specification/describing-parameters/), (that is, *optional* path variables cannot be created).
      externalDocs:
        description: Activation strategies
        url: https://unleash.github.io/docs/activation_strategy
      operationId: getFeatures
      tags:
        - Admin - Feature toggles
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        '401':
          description: Not authorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      description: Create a new Feature Toggle
      tags:
        - Admin - Feature toggles
      operationId: createFeatureToggle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newFeatureToggle'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        '409':
          description: 'Feature Toggle name is not unique'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
      summary: Create a Feature Toggle
  '/admin/features/{featureName}':
    put:
      summary: Update a Feature Toggle
      description: Update a Feature Toggle.
      operationId: featureName
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateFeatureToggle'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
    delete:
      summary: Archive a Feature Toggle.
      description: |
        Feature toggles can only be archived - they cannot be deleted.

        If an old Feature Toggle *re-appears*, this is because someone else has created a new one with the same name.
      operationId: archiveFeatureToggle
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureName}/toggle/on':
    post:
      summary: Enable a Feature Toggle.
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: enableFeatureToggle
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureName}/toggle/off':
    post:
      summary: Disable a Feature Toggle.
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: disableFeatureToggle
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureName}/stale/on':
    post:
      summary: Mark a Feature Toggle as 'stale' (deprecated).
      description: '*featureName* must match an existing Feature Toggle.'
      externalDocs:
        description: Feature Toggle types
        url: https://unleash.github.io/docs/feature_toggle_types
      operationId: markFeatureToggleStale
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureName}/stale/off':
    post:
      summary: Mark a Feature Toggle as active.
      description: '*featureName* must match an existing Feature Toggle.'
      externalDocs:
        description: Feature Toggle types
        url: https://unleash.github.io/docs/feature_toggle_types
      operationId: markFeatureToggleActive
      tags:
        - Admin - Feature toggles
      parameters:
        - $ref: '#/components/parameters/featureNamePath'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        '409':
          description: Feature Toggle name is not unique.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/409'
  /admin/archive/features:
    get:
      summary: List all the archived feature toggles on the Unleash server'
      description: Archived feature toggles are those that have been previously deleted
      operationId: fetchArchivedToggles
      tags:
        - Admin - archive
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
    post:
      summary: Un-archive a Feature Toggle
      description: The Feature Toggle had been previously deleted
      operationId: reviveFeatureToggle
      tags:
        - Admin - archive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reviveFeature'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
components:
  parameters:
    featureNamePath:
      name: featureName
      required: true
      in: path
      description: Must match an existing Feature Toggle.
      schema:
        type: string
  schemas:
    '200':
      title: Successful response
      type: object
      properties:
        version:
          type: number
        features:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            properties:
              name:
                type: string
                minLength: 1
              description:
                type: string
                minLength: 1
              type:
                type: string
                minLength: 1
              enabled:
                type: boolean
              stale:
                type: boolean
              strategies:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  required:
                    - name
                  properties:
                    name:
                      type: string
                      minLength: 1
                    parameters:
                      type: object
                      properties: {}
              variants:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  required:
                    - name
                    - weight
                  properties:
                    name:
                      type: string
                      minLength: 1
                    weight:
                      type: number
    '401':
      description: Not authorised
      type: object
      properties:
        type:
          type: string
          minLength: 1
        path:
          type: string
          minLength: 1
        message:
          type: string
          minLength: 1
      required:
        - type
        - path
        - message
    reviveFeature:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: Feature.C
      required:
        - name
    newFeatureToggle:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: 'Feature Toggle name must be unique.'
          example: FeatureA
        description:
          type: string
          minLength: 1
          example: Toggles FeatureA on and off
        type:
          type: string
          enum:
            - release
            - experiment
            - ops
            - killswitch
            - permission
          minLength: 1
          description: '*type* is optional. If not defined, it defaults to `release`'
          externalDocs:
            description: Feature Toggle types
            url: https://unleash.github.io/docs/feature_toggle_types
          example: release
        enabled:
          type: boolean
          example: false
        stale:
          type: boolean
          example: false
        strategies:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                example: default
              parameters:
                type: object
                properties: {}
      required:
        - name
        - description
        - enabled
        - stale
        - strategies
    '409':
      type: object
      properties:
        isJoi:
          type: boolean
        name:
          type: string
          minLength: 1
        details:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - message
            properties:
              message:
                type: string
                minLength: 1
      required:
        - isJoi
        - name
        - details
    updateFeatureToggle:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: '*name* must match an existing Feature Toggle.'
          example: FeatureB
        description:
          type: string
          minLength: 1
          example: Toggles FeatureB on and off
        type:
          type: string
          minLength: 1
          description: '*type* is optional. If not defined, it defaults to `release`'
          example: release
        enabled:
          type: boolean
          example: false
        stale:
          type: boolean
          example: false
        strategies:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                example: default
              parameters:
                type: object
                properties:
                  rollout:
                    type: number
                  stickiness:
                    type: string
                    minLength: 1
                  groupId:
                    type: string
                    minLength: 1
                required:
                  - rollout
                  - stickiness
                  - groupId
        variants: {}
        createdAt:
          type: string
          minLength: 1
      required:
        - name
        - description
        - enabled
        - stale
        - strategies
        - variants

