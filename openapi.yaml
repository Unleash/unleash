openapi: 3.0.0
tags:
  - name: "Admin - Feature Toggles"
    description: Funny nosed pig-head racoon.
  - name: "Admin - archive"
    description: Angry short-legged omnivores.
servers:
  - description: Local host.
    url: 'http://localhost:4242/api'
info:
  title: Unleash API
  description: Unleash is a open source feature flag and toggle system. It gives you a great overview over all feature toggles across all your applications and services.
  version: 3.5.6
  contact:
    name: "The Unleash team"
    url: "https://unleash.github.io/"
    email: "some_email@gmail.com"
externalDocs:
  description: Documentation
  url: 'https://openweathermap.org/api'
paths:
  /admin/features:
    get:
      summary: Fetches all feature toggles from the *Unleash server*.
      description: |
        The response returns all active feature toggles and their current strategy configuration.
        - A feature toggle will have *at least* one configured strategy.
        - A strategy will have a `name` and `parameters` map.
      operationId: getFeatures
      tags:
        - "Admin - Feature Toggles"
      parameters:
        - $ref: '#/components/parameters/featureNameOptional'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        '401':
          description: Not authorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401'
    post:
      description: Create a new Feature Toggle
      tags:
        - Admin - Feature Toggles
      operationId: createFeatureToggle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newFeatureToggle'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
        '403':
          description: '*name* is not globally unique'
          content:
            text/plain:
              schema:
                title: '*name* is not globally unique'
                type: string
      summary: Create a Feature Toggle
    put:
      summary: Update a Feature Toggle
      description: Used by the admin dashboard to update a Feature Toggle.
      operationId: updateFeatureToggle
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/toggleNameRequired'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateFeatureToggle'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
    delete:
      summary: Archive a Feature Toggle.
      description: 'Feature toggles can only be archived - they cannot be deleted.<br><br>If an old Feature Toggle ''re-appears'', this is because someone else has created a Feature Toggle with the same name.'
      operationId: archiveFeatureToggle
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/toggleNameRequired'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureNameRequired}/toggle/on':
    post:
      summary: Enable a Feature Toggle.
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: enableFeatureToggle
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/featureNameRequired'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureNameRequired}/toggle/off':
    post:
      summary: Disable a Feature Toggle.
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: disableFeatureToggle
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/featureNameRequired'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureNameRequired}/stale/on':
    post:
      summary: Mark a Feature Toggle as 'stale' (deprecated).
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: markFeatureToggleStale
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/featureNameRequired'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  '/admin/features/{featureNameRequired}/stale/off':
    post:
      summary: Mark a Feature Toggle as active.
      description: '*featureName* must match an existing Feature Toggle.'
      operationId: markFeatureToggleActive
      tags:
        - Admin - Feature Toggles
      parameters:
        - $ref: '#/components/parameters/featureNameRequired'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
  /admin/archive/features:
    get:
      summary: List all the archived Feature Toggles on the Unleash server'
      description: Archived Features are those that have been previously deleted
      operationId: fetchArchivedToggles
      tags:
        - "Admin - archive"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
    post:
      summary: Un-archive a Feature Toggle
      description: The Feature Toggle had been previously deleted
      operationId: reviveFeatureToggle
      tags:
        - Admin - archive
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reviveFeature'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200'
components:
  parameters:
    featureNameOptional:
      name: featureName
      in: query
      description: Used to fetch details about a specific Feature Toggle. This is mostly provided to make it easy to debug the API and should not be used by the client implementations.
      schema:
        type: string
    featureNameRequired:
      name: featureNameRequired
      required: true
      in: path
      description: Must match an existing Feature Toggle.
      schema:
        type: string
    toggleNameRequired:
      name: toggleName
      required: true
      in: query
      schema:
        type: string
  schemas:
    '200':
      title: Successful response
      type: object
      properties:
        version:
          type: number
        features:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            properties:
              name:
                type: string
                minLength: 1
              description:
                type: string
                minLength: 1
              type:
                type: string
                minLength: 1
              enabled:
                type: boolean
              stale:
                type: boolean
              strategies:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  required:
                    - name
                  properties:
                    name:
                      type: string
                      minLength: 1
                    parameters:
                      type: object
                      properties: {}
              variants:
                type: array
                uniqueItems: true
                minItems: 1
                items:
                  required:
                    - name
                    - weight
                  properties:
                    name:
                      type: string
                      minLength: 1
                    weight:
                      type: number
    '401':
      description: Not authorised
      type: object
      properties:
        type:
          type: string
          minLength: 1
        path:
          type: string
          minLength: 1
        message:
          type: string
          minLength: 1
      required:
        - type
        - path
        - message
    reviveFeature:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: Feature.C
      required:
        - name
    newFeatureToggle:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: '*name* must be **globally unique**; otherwise, you will get a *403-response*.'
          example: Feature A
        description:
          type: string
          minLength: 1
          example: Toggles Feature A on and off
        type:
          type: string
          enum:
            - release
            - experiment
            - ops
            - killswitch
            - permission
          minLength: 1
          description: '*type* is optional. If not defined, it defaults to `release`'
          example: release
        enabled:
          type: boolean
          example: false
        stale:
          type: boolean
          example: false
        strategies:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                example: default
              parameters:
                type: object
                properties: {}
      required:
        - name
        - description
        - enabled
        - stale
        - strategies
    updateFeatureToggle:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          description: '*name* must match an existing Feature Toggle.'
          example: Feature B
        description:
          type: string
          minLength: 1
          example: Toggles Feature B on and off
        type:
          type: string
          minLength: 1
          description: '*type* is optional. If not defined, it defaults to `release`'
          example: release
        enabled:
          type: boolean
          example: false
        stale:
          type: boolean
          example: false
        strategies:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            required:
              - name
            properties:
              name:
                type: string
                minLength: 1
                example: default
              parameters:
                type: object
                properties: {}
        variants:
          type: array
          items:
            properties: {}
      required:
        - name
        - description
        - enabled
        - stale
        - strategies
        - variants
