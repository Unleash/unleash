// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should serve the OpenAPI UI 1`] = `
"<!DOCTYPE html>
<html>
  <head>
    <title>Swagger UI</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      html {
          box-sizing: border-box;
          overflow: -moz-scrollbars-vertical;
          overflow-y: scroll;
      }
      *,
      *:before,
      *:after {
          box-sizing: inherit;
      }
      body {
        margin: 0;
        padding: 0;
        background: #fafafa;
      }
    </style>
    
      <link rel="stylesheet" type="text/css" href="./swagger-ui.css" >
    
  </head>
  <body>
    
      <div id="swagger-ui"></div>
      <script src="./swagger-ui-bundle.js"></script>
      <script src="./swagger-ui-standalone-preset.js"></script>
      <script src="./swagger-ui-init.js"></script>
    
  </body>
</html>
  "
`;

exports[`should serve the OpenAPI spec 1`] = `
{
  "components": {
    "schemas": {
      "addonParameterSchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "displayName": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "placeholder": {
            "type": "string",
          },
          "required": {
            "type": "boolean",
          },
          "sensitive": {
            "type": "boolean",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "name",
          "displayName",
          "type",
          "required",
          "sensitive",
        ],
        "type": "object",
      },
      "addonSchema": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "description": {
            "type": "string",
          },
          "enabled": {
            "type": "boolean",
          },
          "environments": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "events": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "id": {
            "type": "number",
          },
          "parameters": {
            "additionalProperties": true,
            "type": "object",
          },
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "provider": {
            "type": "string",
          },
        },
        "required": [
          "provider",
          "enabled",
          "parameters",
          "events",
        ],
        "type": "object",
      },
      "addonTypeSchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "displayName": {
            "type": "string",
          },
          "documentationUrl": {
            "type": "string",
          },
          "events": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/addonParameterSchema",
            },
            "type": "array",
          },
          "tagTypes": {
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
          "displayName",
          "documentationUrl",
          "description",
        ],
        "type": "object",
      },
      "addonsSchema": {
        "properties": {
          "addons": {
            "items": {
              "$ref": "#/components/schemas/addonSchema",
            },
            "type": "array",
          },
          "providers": {
            "items": {
              "$ref": "#/components/schemas/addonTypeSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "addons",
          "providers",
        ],
        "type": "object",
      },
      "adminFeaturesQuerySchema": {
        "additionalProperties": false,
        "properties": {
          "namePrefix": {
            "description": "A case-insensitive prefix filter for the names of feature toggles",
            "example": "demo.part1",
            "type": "string",
          },
          "tag": {
            "description": "Used to filter by tags. For each entry, a TAGTYPE:TAGVALUE is expected",
            "example": [
              "simple:mytag",
            ],
            "items": {
              "pattern": "\\w+:\\w+",
              "type": "string",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "apiTokenSchema": {
        "additionalProperties": false,
        "properties": {
          "alias": {
            "nullable": true,
            "type": "string",
          },
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "environment": {
            "type": "string",
          },
          "expiresAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "project": {
            "type": "string",
          },
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "secret": {
            "type": "string",
          },
          "seenAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "type": {
            "enum": [
              "client",
              "admin",
              "frontend",
            ],
            "type": "string",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "username",
          "type",
        ],
        "type": "object",
      },
      "apiTokensSchema": {
        "additionalProperties": false,
        "properties": {
          "tokens": {
            "items": {
              "$ref": "#/components/schemas/apiTokenSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "tokens",
        ],
        "type": "object",
      },
      "applicationSchema": {
        "additionalProperties": false,
        "properties": {
          "announced": {
            "type": "boolean",
          },
          "appName": {
            "type": "string",
          },
          "color": {
            "type": "string",
          },
          "description": {
            "type": "string",
          },
          "icon": {
            "type": "string",
          },
          "sdkVersion": {
            "type": "string",
          },
          "strategies": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "url": {
            "type": "string",
          },
        },
        "required": [
          "appName",
        ],
        "type": "object",
      },
      "applicationsSchema": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/applicationSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "batchFeaturesSchema": {
        "properties": {
          "features": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "features",
        ],
        "type": "object",
      },
      "batchStaleSchema": {
        "properties": {
          "features": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "stale": {
            "type": "boolean",
          },
        },
        "required": [
          "features",
          "stale",
        ],
        "type": "object",
      },
      "bulkMetricsSchema": {
        "properties": {
          "applications": {
            "items": {
              "$ref": "#/components/schemas/bulkRegistrationSchema",
            },
            "type": "array",
          },
          "metrics": {
            "items": {
              "$ref": "#/components/schemas/clientMetricsEnvSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "bulkRegistrationSchema": {
        "properties": {
          "appName": {
            "type": "string",
          },
          "connectVia": {
            "items": {
              "properties": {
                "appName": {
                  "type": "string",
                },
                "instanceId": {
                  "type": "string",
                },
              },
              "required": [
                "appName",
                "instanceId",
              ],
              "type": "object",
            },
            "type": "array",
          },
          "environment": {
            "type": "string",
          },
          "instanceId": {
            "type": "string",
          },
          "interval": {
            "type": "number",
          },
          "sdkVersion": {
            "type": "string",
          },
          "started": {
            "$ref": "#/components/schemas/dateSchema",
          },
          "strategies": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "appName",
          "instanceId",
        ],
        "type": "object",
      },
      "changePasswordSchema": {
        "additionalProperties": false,
        "properties": {
          "password": {
            "type": "string",
          },
          "token": {
            "type": "string",
          },
        },
        "required": [
          "token",
          "password",
        ],
        "type": "object",
      },
      "clientApplicationSchema": {
        "properties": {
          "appName": {
            "type": "string",
          },
          "environment": {
            "type": "string",
          },
          "instanceId": {
            "type": "string",
          },
          "interval": {
            "type": "number",
          },
          "sdkVersion": {
            "type": "string",
          },
          "started": {
            "oneOf": [
              {
                "format": "date-time",
                "type": "string",
              },
              {
                "type": "number",
              },
            ],
          },
          "strategies": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "appName",
          "interval",
          "started",
          "strategies",
        ],
        "type": "object",
      },
      "clientFeatureSchema": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "enabled": {
            "type": "boolean",
          },
          "impressionData": {
            "nullable": true,
            "type": "boolean",
          },
          "lastSeenAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "project": {
            "type": "string",
          },
          "stale": {
            "type": "boolean",
          },
          "strategies": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema",
            },
            "type": "array",
          },
          "type": {
            "type": "string",
          },
          "variants": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "nullable": true,
            "type": "array",
          },
        },
        "required": [
          "name",
          "enabled",
        ],
        "type": "object",
      },
      "clientFeaturesQuerySchema": {
        "additionalProperties": false,
        "properties": {
          "environment": {
            "type": "string",
          },
          "inlineSegmentConstraints": {
            "type": "boolean",
          },
          "namePrefix": {
            "type": "string",
          },
          "project": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "tag": {
            "items": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "clientFeaturesSchema": {
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/clientFeatureSchema",
            },
            "type": "array",
          },
          "query": {
            "$ref": "#/components/schemas/clientFeaturesQuerySchema",
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/segmentSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "version",
          "features",
        ],
        "type": "object",
      },
      "clientMetricsEnvSchema": {
        "additionalProperties": true,
        "properties": {
          "appName": {
            "type": "string",
          },
          "environment": {
            "type": "string",
          },
          "featureName": {
            "type": "string",
          },
          "no": {
            "type": "number",
          },
          "timestamp": {
            "$ref": "#/components/schemas/dateSchema",
          },
          "variants": {
            "additionalProperties": {
              "minimum": 0,
              "type": "integer",
            },
            "type": "object",
          },
          "yes": {
            "type": "number",
          },
        },
        "required": [
          "featureName",
          "appName",
        ],
        "type": "object",
      },
      "clientMetricsSchema": {
        "properties": {
          "appName": {
            "type": "string",
          },
          "bucket": {
            "properties": {
              "start": {
                "$ref": "#/components/schemas/dateSchema",
              },
              "stop": {
                "$ref": "#/components/schemas/dateSchema",
              },
              "toggles": {
                "additionalProperties": {
                  "properties": {
                    "no": {
                      "minimum": 0,
                      "type": "integer",
                    },
                    "variants": {
                      "additionalProperties": {
                        "minimum": 0,
                        "type": "integer",
                      },
                      "type": "object",
                    },
                    "yes": {
                      "minimum": 0,
                      "type": "integer",
                    },
                  },
                  "type": "object",
                },
                "example": {
                  "myCoolToggle": {
                    "no": 42,
                    "variants": {
                      "blue": 6,
                      "green": 15,
                      "red": 46,
                    },
                    "yes": 25,
                  },
                  "myOtherToggle": {
                    "no": 100,
                    "yes": 0,
                  },
                },
                "type": "object",
              },
            },
            "required": [
              "start",
              "stop",
              "toggles",
            ],
            "type": "object",
          },
          "environment": {
            "type": "string",
          },
          "instanceId": {
            "type": "string",
          },
        },
        "required": [
          "appName",
          "bucket",
        ],
        "type": "object",
      },
      "cloneFeatureSchema": {
        "properties": {
          "name": {
            "type": "string",
          },
          "replaceGroupId": {
            "type": "boolean",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "constraintSchema": {
        "additionalProperties": false,
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "caseInsensitive": {
            "default": false,
            "description": "Whether the operator should be case sensitive or not. Defaults to \`false\` (being case sensitive).",
            "type": "boolean",
          },
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string",
          },
          "inverted": {
            "default": false,
            "description": "Whether the result should be negated or not. If \`true\`, will turn a \`true\` result into a \`false\` result and vice versa.",
            "type": "boolean",
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT",
            ],
            "type": "string",
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of \`values\` for properties that only accept single values.",
            "type": "string",
          },
          "values": {
            "description": "The context values that should be used for constraint evaluation. Use this property instead of \`value\` for properties that accept multiple values.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "contextName",
          "operator",
        ],
        "type": "object",
      },
      "contextFieldSchema": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "description": {
            "type": "string",
          },
          "legalValues": {
            "items": {
              "$ref": "#/components/schemas/legalValueSchema",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "sortOrder": {
            "type": "number",
          },
          "stickiness": {
            "type": "boolean",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "contextFieldsSchema": {
        "items": {
          "$ref": "#/components/schemas/contextFieldSchema",
        },
        "type": "array",
      },
      "createApiTokenSchema": {
        "properties": {
          "environment": {
            "type": "string",
          },
          "expiresAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "project": {
            "type": "string",
          },
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "secret": {
            "type": "string",
          },
          "type": {
            "description": "One of client, admin, frontend",
            "type": "string",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "username",
          "type",
        ],
        "type": "object",
      },
      "createFeatureSchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "impressionData": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "createFeatureStrategySchema": {
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema",
          },
          "segments": {
            "description": "Ids of segments to use for this strategy",
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sortOrder": {
            "type": "number",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "createInvitedUserSchema": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "email",
          "name",
          "password",
        ],
        "type": "object",
      },
      "createUserSchema": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
          "rootRole": {
            "type": "number",
          },
          "sendEmail": {
            "type": "boolean",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "rootRole",
        ],
        "type": "object",
      },
      "dateSchema": {
        "oneOf": [
          {
            "format": "date-time",
            "type": "string",
          },
          {
            "type": "number",
          },
        ],
      },
      "edgeTokenSchema": {
        "additionalProperties": false,
        "properties": {
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "token": {
            "type": "string",
          },
          "type": {
            "enum": [
              "client",
              "admin",
              "frontend",
            ],
            "type": "string",
          },
        },
        "required": [
          "token",
          "projects",
          "type",
        ],
        "type": "object",
      },
      "emailSchema": {
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string",
          },
        },
        "required": [
          "email",
        ],
        "type": "object",
      },
      "environmentProjectSchema": {
        "additionalProperties": false,
        "description": "Describes a project's configuration in a given environment.",
        "properties": {
          "enabled": {
            "description": "\`true\` if the environment is enabled for the project, otherwise \`false\`",
            "example": true,
            "type": "boolean",
          },
          "name": {
            "description": "The name of the environment",
            "example": "development",
            "type": "string",
          },
          "projectApiTokenCount": {
            "description": "The number of client and front-end API tokens that have access to this project",
            "example": 5,
            "minimum": 0,
            "type": "integer",
          },
          "projectEnabledToggleCount": {
            "description": "The number of features enabled in this environment for this project",
            "example": 7,
            "minimum": 0,
            "type": "integer",
          },
          "protected": {
            "description": "\`true\` if the environment is protected, otherwise \`false\`. A *protected* environment can not be deleted.",
            "example": false,
            "type": "boolean",
          },
          "sortOrder": {
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear",
            "example": 1,
            "type": "integer",
          },
          "type": {
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).",
            "example": "production",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder",
        ],
        "type": "object",
      },
      "environmentSchema": {
        "additionalProperties": false,
        "description": "A definition of the project environment",
        "properties": {
          "apiTokenCount": {
            "description": "The number of API tokens for the project environment",
            "example": 6,
            "minimum": 0,
            "nullable": true,
            "type": "integer",
          },
          "enabled": {
            "description": "\`true\` if the environment is enabled for the project, otherwise \`false\`.",
            "example": true,
            "type": "boolean",
          },
          "enabledToggleCount": {
            "description": "The number of enabled toggles for the project environment",
            "example": 10,
            "minimum": 0,
            "nullable": true,
            "type": "integer",
          },
          "name": {
            "description": "The name of the environment",
            "example": "my-dev-env",
            "type": "string",
          },
          "projectCount": {
            "description": "The number of projects with this environment",
            "example": 10,
            "minimum": 0,
            "nullable": true,
            "type": "integer",
          },
          "protected": {
            "description": "\`true\` if the environment is protected, otherwise \`false\`. A *protected* environment can not be deleted.",
            "example": true,
            "type": "boolean",
          },
          "sortOrder": {
            "description": "Priority of the environment in a list of environments, the lower the value, the higher up in the list the environment will appear. Needs to be an integer",
            "example": 3,
            "type": "integer",
          },
          "type": {
            "description": "The [type of environment](https://docs.getunleash.io/reference/environments#environment-types).",
            "example": "development",
            "type": "string",
          },
        },
        "required": [
          "name",
          "type",
          "enabled",
          "protected",
          "sortOrder",
        ],
        "type": "object",
      },
      "environmentsProjectSchema": {
        "additionalProperties": false,
        "description": "Environments defined for a given project",
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/environmentProjectSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "environments",
        ],
        "type": "object",
      },
      "environmentsSchema": {
        "additionalProperties": false,
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/environmentSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "environments",
        ],
        "type": "object",
      },
      "eventSchema": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "createdBy": {
            "type": "string",
          },
          "data": {
            "nullable": true,
            "type": "object",
          },
          "environment": {
            "nullable": true,
            "type": "string",
          },
          "featureName": {
            "nullable": true,
            "type": "string",
          },
          "id": {
            "minimum": 1,
            "type": "integer",
          },
          "preData": {
            "nullable": true,
            "type": "object",
          },
          "project": {
            "nullable": true,
            "type": "string",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "nullable": true,
            "type": "array",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "createdAt",
          "type",
          "createdBy",
        ],
        "type": "object",
      },
      "eventsSchema": {
        "additionalProperties": false,
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/eventSchema",
            },
            "type": "array",
          },
          "totalEvents": {
            "minimum": 0,
            "type": "integer",
          },
          "version": {
            "minimum": 1,
            "type": "integer",
          },
        },
        "required": [
          "version",
          "events",
        ],
        "type": "object",
      },
      "exportQuerySchema": {
        "additionalProperties": false,
        "properties": {
          "downloadFile": {
            "type": "boolean",
          },
          "environment": {
            "type": "string",
          },
          "features": {
            "items": {
              "minLength": 1,
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "features",
          "environment",
        ],
        "type": "object",
      },
      "exportResultSchema": {
        "additionalProperties": false,
        "properties": {
          "contextFields": {
            "items": {
              "$ref": "#/components/schemas/contextFieldSchema",
            },
            "type": "array",
          },
          "featureEnvironments": {
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema",
            },
            "type": "array",
          },
          "featureStrategies": {
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema",
            },
            "type": "array",
          },
          "featureTags": {
            "items": {
              "$ref": "#/components/schemas/featureTagSchema",
            },
            "type": "array",
          },
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "segments": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "number",
                },
                "name": {
                  "type": "string",
                },
              },
              "required": [
                "id",
              ],
              "type": "object",
            },
            "type": "array",
          },
          "tagTypes": {
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "features",
          "featureStrategies",
          "tagTypes",
        ],
        "type": "object",
      },
      "featureEnvironmentMetricsSchema": {
        "additionalProperties": false,
        "properties": {
          "appName": {
            "type": "string",
          },
          "environment": {
            "type": "string",
          },
          "featureName": {
            "type": "string",
          },
          "no": {
            "type": "number",
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
          },
          "yes": {
            "type": "number",
          },
        },
        "required": [
          "environment",
          "timestamp",
          "yes",
          "no",
        ],
        "type": "object",
      },
      "featureEnvironmentSchema": {
        "additionalProperties": false,
        "description": "A detailed description of the feature environment",
        "properties": {
          "enabled": {
            "description": "\`true\` if the feature is enabled for the environment, otherwise \`false\`.",
            "example": true,
            "type": "boolean",
          },
          "environment": {
            "type": "string",
          },
          "featureName": {
            "example": "disable-comments",
            "type": "string",
          },
          "name": {
            "description": "The name of the environment",
            "example": "my-dev-env",
            "type": "string",
          },
          "sortOrder": {
            "description": "The sort order of the feature environment in the feature environments list",
            "example": 3,
            "type": "number",
          },
          "strategies": {
            "description": "A list of activation strategies for the feature environment",
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema",
            },
            "type": "array",
          },
          "type": {
            "description": "The type of the environment",
            "example": "development",
            "type": "string",
          },
          "variantCount": {
            "type": "number",
          },
          "variants": {
            "description": "A list of variants for the feature environment",
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
          "enabled",
        ],
        "type": "object",
      },
      "featureEventsSchema": {
        "additionalProperties": false,
        "properties": {
          "events": {
            "items": {
              "$ref": "#/components/schemas/eventSchema",
            },
            "type": "array",
          },
          "toggleName": {
            "type": "string",
          },
          "totalEvents": {
            "minimum": 0,
            "type": "integer",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "events",
        ],
        "type": "object",
      },
      "featureMetricsSchema": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema",
            },
            "type": "array",
          },
          "maturity": {
            "type": "string",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "version",
          "maturity",
          "data",
        ],
        "type": "object",
      },
      "featureSchema": {
        "additionalProperties": false,
        "properties": {
          "archived": {
            "description": "\`true\` if the feature is archived",
            "example": true,
            "type": "boolean",
          },
          "archivedAt": {
            "example": "2023-01-29T15:21:39.975Z",
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "createdAt": {
            "example": "2023-01-28T15:21:39.975Z",
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "description": {
            "description": "Detailed description of the feature",
            "example": "Controls disabling of the comments section in case of an incident",
            "nullable": true,
            "type": "string",
          },
          "enabled": {
            "example": true,
            "type": "boolean",
          },
          "environments": {
            "description": "The list of environments where the feature can be used",
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema",
            },
            "type": "array",
          },
          "favorite": {
            "description": "\`true\` if the feature was favorited, otherwise \`false\`.",
            "example": true,
            "type": "boolean",
          },
          "impressionData": {
            "description": "\`true\` if the impression data collection is enabled for the feature, otherwise \`false\`.",
            "example": false,
            "type": "boolean",
          },
          "lastSeenAt": {
            "example": "2023-01-28T16:21:39.975Z",
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "name": {
            "description": "Unique feature name",
            "example": "disable-comments",
            "type": "string",
          },
          "project": {
            "description": "Name of the project the feature belongs to",
            "example": "dx-squad",
            "type": "string",
          },
          "stale": {
            "description": "\`true\` if the feature is stale based on the age and feature type, otherwise \`false\`.",
            "example": false,
            "type": "boolean",
          },
          "strategies": {
            "deprecated": true,
            "description": "This is a legacy field that will be deprecated",
            "items": {
              "type": "object",
            },
            "type": "array",
          },
          "tags": {
            "description": "The list of feature tags",
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "nullable": true,
            "type": "array",
          },
          "type": {
            "description": "Type of the toggle e.g. experiment, kill-switch, release, operational, permission",
            "example": "kill-switch",
            "type": "string",
          },
          "variants": {
            "deprecated": true,
            "description": "The list of feature variants",
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "featureStrategySchema": {
        "additionalProperties": false,
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "featureName": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema",
          },
          "segments": {
            "items": {
              "type": "number",
            },
            "type": "array",
          },
          "sortOrder": {
            "type": "number",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "featureStrategySegmentSchema": {
        "additionalProperties": false,
        "properties": {
          "featureStrategyId": {
            "type": "string",
          },
          "segmentId": {
            "type": "integer",
          },
        },
        "required": [
          "segmentId",
          "featureStrategyId",
        ],
        "type": "object",
      },
      "featureTagSchema": {
        "additionalProperties": false,
        "properties": {
          "featureName": {
            "type": "string",
          },
          "tagType": {
            "type": "string",
          },
          "tagValue": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
          "value": {
            "type": "string",
          },
        },
        "required": [
          "featureName",
          "tagValue",
        ],
        "type": "object",
      },
      "featureTypeSchema": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
          },
          "id": {
            "type": "string",
          },
          "lifetimeDays": {
            "nullable": true,
            "type": "number",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "description",
          "lifetimeDays",
        ],
        "type": "object",
      },
      "featureTypesSchema": {
        "additionalProperties": false,
        "properties": {
          "types": {
            "items": {
              "$ref": "#/components/schemas/featureTypeSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "types",
        ],
        "type": "object",
      },
      "featureUsageSchema": {
        "additionalProperties": false,
        "properties": {
          "featureName": {
            "type": "string",
          },
          "lastHourUsage": {
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentMetricsSchema",
            },
            "type": "array",
          },
          "maturity": {
            "type": "string",
          },
          "seenApplications": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "version",
          "maturity",
          "featureName",
          "lastHourUsage",
          "seenApplications",
        ],
        "type": "object",
      },
      "featureVariantsSchema": {
        "additionalProperties": false,
        "properties": {
          "variants": {
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "variants",
        ],
        "type": "object",
      },
      "featuresSchema": {
        "additionalProperties": false,
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "features",
        ],
        "type": "object",
      },
      "feedbackSchema": {
        "additionalProperties": false,
        "properties": {
          "feedbackId": {
            "type": "string",
          },
          "given": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "neverShow": {
            "type": "boolean",
          },
          "userId": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "groupSchema": {
        "additionalProperties": true,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "createdBy": {
            "nullable": true,
            "type": "string",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "id": {
            "type": "number",
          },
          "mappingsSSO": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/groupUserModelSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "groupUserModelSchema": {
        "additionalProperties": false,
        "properties": {
          "createdBy": {
            "nullable": true,
            "type": "string",
          },
          "joinedAt": {
            "format": "date-time",
            "type": "string",
          },
          "user": {
            "$ref": "#/components/schemas/userSchema",
          },
        },
        "required": [
          "user",
        ],
        "type": "object",
      },
      "groupsSchema": {
        "additionalProperties": false,
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/groupSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "healthCheckSchema": {
        "additionalProperties": false,
        "properties": {
          "health": {
            "enum": [
              "GOOD",
              "BAD",
            ],
            "type": "string",
          },
        },
        "required": [
          "health",
        ],
        "type": "object",
      },
      "healthOverviewSchema": {
        "additionalProperties": false,
        "properties": {
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "example": "userId",
            "type": "string",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "environments": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "favorite": {
            "type": "boolean",
          },
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "health": {
            "type": "number",
          },
          "members": {
            "type": "number",
          },
          "mode": {
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.",
            "enum": [
              "open",
              "protected",
            ],
            "example": "open",
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics",
          },
          "updatedAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "version",
          "name",
        ],
        "type": "object",
      },
      "healthReportSchema": {
        "additionalProperties": false,
        "properties": {
          "activeCount": {
            "type": "number",
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "example": "userId",
            "type": "string",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "environments": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "favorite": {
            "type": "boolean",
          },
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "health": {
            "type": "number",
          },
          "members": {
            "type": "number",
          },
          "mode": {
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.",
            "enum": [
              "open",
              "protected",
            ],
            "example": "open",
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "potentiallyStaleCount": {
            "type": "number",
          },
          "staleCount": {
            "type": "number",
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics",
          },
          "updatedAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "version": {
            "type": "number",
          },
        },
        "required": [
          "version",
          "name",
          "potentiallyStaleCount",
          "activeCount",
          "staleCount",
        ],
        "type": "object",
      },
      "idSchema": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
          },
        },
        "required": [
          "id",
        ],
        "type": "object",
      },
      "importTogglesSchema": {
        "additionalProperties": false,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/exportResultSchema",
          },
          "environment": {
            "type": "string",
          },
          "project": {
            "type": "string",
          },
        },
        "required": [
          "project",
          "environment",
          "data",
        ],
        "type": "object",
      },
      "importTogglesValidateItemSchema": {
        "additionalProperties": false,
        "properties": {
          "affectedItems": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "message": {
            "type": "string",
          },
        },
        "required": [
          "message",
          "affectedItems",
        ],
        "type": "object",
      },
      "importTogglesValidateSchema": {
        "additionalProperties": false,
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema",
            },
            "type": "array",
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema",
            },
            "type": "array",
          },
          "warnings": {
            "items": {
              "$ref": "#/components/schemas/importTogglesValidateItemSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "errors",
          "warnings",
        ],
        "type": "object",
      },
      "instanceAdminStatsSchema": {
        "additionalProperties": false,
        "properties": {
          "OIDCenabled": {
            "type": "number",
          },
          "SAMLenabled": {
            "type": "number",
          },
          "contextFields": {
            "type": "number",
          },
          "environments": {
            "type": "number",
          },
          "featureToggles": {
            "type": "number",
          },
          "groups": {
            "type": "number",
          },
          "instanceId": {
            "type": "string",
          },
          "projects": {
            "type": "number",
          },
          "roles": {
            "type": "number",
          },
          "segments": {
            "type": "number",
          },
          "strategies": {
            "type": "number",
          },
          "sum": {
            "type": "string",
          },
          "timestamp": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "users": {
            "type": "number",
          },
          "versionEnterprise": {
            "type": "string",
          },
          "versionOSS": {
            "type": "string",
          },
        },
        "required": [
          "instanceId",
        ],
        "type": "object",
      },
      "legalValueSchema": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
          },
          "value": {
            "type": "string",
          },
        },
        "required": [
          "value",
        ],
        "type": "object",
      },
      "loginSchema": {
        "additionalProperties": false,
        "properties": {
          "password": {
            "type": "string",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "username",
          "password",
        ],
        "type": "object",
      },
      "maintenanceSchema": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "example": true,
            "type": "boolean",
          },
        },
        "required": [
          "enabled",
        ],
        "type": "object",
      },
      "meSchema": {
        "additionalProperties": false,
        "properties": {
          "feedback": {
            "items": {
              "$ref": "#/components/schemas/feedbackSchema",
            },
            "type": "array",
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/permissionSchema",
            },
            "type": "array",
          },
          "splash": {
            "additionalProperties": {
              "type": "boolean",
            },
            "type": "object",
          },
          "user": {
            "$ref": "#/components/schemas/userSchema",
          },
        },
        "required": [
          "user",
          "permissions",
          "feedback",
          "splash",
        ],
        "type": "object",
      },
      "nameSchema": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "overrideSchema": {
        "additionalProperties": false,
        "properties": {
          "contextName": {
            "type": "string",
          },
          "values": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "contextName",
          "values",
        ],
        "type": "object",
      },
      "parametersSchema": {
        "additionalProperties": {
          "type": "string",
        },
        "type": "object",
      },
      "passwordSchema": {
        "additionalProperties": false,
        "properties": {
          "confirmPassword": {
            "type": "string",
          },
          "password": {
            "type": "string",
          },
        },
        "required": [
          "password",
        ],
        "type": "object",
      },
      "patSchema": {
        "properties": {
          "createdAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "expiresAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "id": {
            "type": "number",
          },
          "secret": {
            "type": "string",
          },
          "seenAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
        },
        "type": "object",
      },
      "patchSchema": {
        "properties": {
          "from": {
            "type": "string",
          },
          "op": {
            "enum": [
              "add",
              "remove",
              "replace",
              "copy",
              "move",
            ],
            "type": "string",
          },
          "path": {
            "type": "string",
          },
          "value": {},
        },
        "required": [
          "path",
          "op",
        ],
        "type": "object",
      },
      "patchesSchema": {
        "items": {
          "$ref": "#/components/schemas/patchSchema",
        },
        "type": "array",
      },
      "patsSchema": {
        "properties": {
          "pats": {
            "items": {
              "$ref": "#/components/schemas/patSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "permissionSchema": {
        "additionalProperties": false,
        "properties": {
          "environment": {
            "type": "string",
          },
          "permission": {
            "type": "string",
          },
          "project": {
            "type": "string",
          },
        },
        "required": [
          "permission",
        ],
        "type": "object",
      },
      "playgroundConstraintSchema": {
        "additionalProperties": false,
        "description": "A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/reference/strategy-constraints)",
        "properties": {
          "caseInsensitive": {
            "default": false,
            "description": "Whether the operator should be case sensitive or not. Defaults to \`false\` (being case sensitive).",
            "type": "boolean",
          },
          "contextName": {
            "description": "The name of the context field that this constraint should apply to.",
            "example": "appName",
            "type": "string",
          },
          "inverted": {
            "default": false,
            "description": "Whether the result should be negated or not. If \`true\`, will turn a \`true\` result into a \`false\` result and vice versa.",
            "type": "boolean",
          },
          "operator": {
            "description": "The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/reference/strategy-constraints#strategy-constraint-operators).",
            "enum": [
              "NOT_IN",
              "IN",
              "STR_ENDS_WITH",
              "STR_STARTS_WITH",
              "STR_CONTAINS",
              "NUM_EQ",
              "NUM_GT",
              "NUM_GTE",
              "NUM_LT",
              "NUM_LTE",
              "DATE_AFTER",
              "DATE_BEFORE",
              "SEMVER_EQ",
              "SEMVER_GT",
              "SEMVER_LT",
            ],
            "type": "string",
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean",
          },
          "value": {
            "description": "The context value that should be used for constraint evaluation. Use this property instead of \`values\` for properties that only accept single values.",
            "type": "string",
          },
          "values": {
            "description": "The context values that should be used for constraint evaluation. Use this property instead of \`value\` for properties that accept multiple values.",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "contextName",
          "operator",
          "result",
        ],
        "type": "object",
      },
      "playgroundFeatureSchema": {
        "additionalProperties": false,
        "description": "A simplified feature toggle model intended for the Unleash playground.",
        "properties": {
          "isEnabled": {
            "description": "Whether this feature is enabled or not in the current environment.
                          If a feature can't be fully evaluated (that is, \`strategies.result\` is \`unknown\`),
                          this will be \`false\` to align with how client SDKs treat unresolved feature states.",
            "example": true,
            "type": "boolean",
          },
          "isEnabledInCurrentEnvironment": {
            "description": "Whether the feature is active and would be evaluated in the provided environment in a normal SDK context.",
            "type": "boolean",
          },
          "name": {
            "description": "The feature's name.",
            "example": "my-feature",
            "type": "string",
          },
          "projectId": {
            "description": "The ID of the project that contains this feature.",
            "example": "my-project",
            "type": "string",
          },
          "strategies": {
            "additionalProperties": false,
            "properties": {
              "data": {
                "description": "The strategies that apply to this feature.",
                "items": {
                  "$ref": "#/components/schemas/playgroundStrategySchema",
                },
                "type": "array",
              },
              "result": {
                "anyOf": [
                  {
                    "type": "boolean",
                  },
                  {
                    "enum": [
                      "unknown",
                    ],
                    "type": "string",
                  },
                ],
                "description": "The cumulative results of all the feature's strategies. Can be \`true\`,
                                  \`false\`, or \`unknown\`.
                                  This property will only be \`unknown\`
                                  if one or more of the strategies can't be fully evaluated and the rest of the strategies
                                  all resolve to \`false\`.",
              },
            },
            "required": [
              "result",
              "data",
            ],
            "type": "object",
          },
          "variant": {
            "additionalProperties": false,
            "description": "The feature variant you receive based on the provided context or the _disabled
                          variant_. If a feature is disabled or doesn't have any
                          variants, you would get the _disabled variant_.
                          Otherwise, you'll get one of thefeature's defined variants.",
            "example": {
              "enabled": true,
              "name": "green",
            },
            "nullable": true,
            "properties": {
              "enabled": {
                "description": "Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be \`false\`",
                "type": "boolean",
              },
              "name": {
                "description": "The variant's name. If there is no variant or if the toggle is disabled, this will be \`disabled\`",
                "example": "red-variant",
                "type": "string",
              },
              "payload": {
                "additionalProperties": false,
                "description": "An optional payload attached to the variant.",
                "properties": {
                  "type": {
                    "description": "The format of the payload.",
                    "enum": [
                      "json",
                      "csv",
                      "string",
                    ],
                    "type": "string",
                  },
                  "value": {
                    "description": "The payload value stringified.",
                    "example": "{"property": "value"}",
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "value",
                ],
                "type": "object",
              },
            },
            "required": [
              "name",
              "enabled",
            ],
            "type": "object",
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
          "projectId",
          "isEnabled",
          "isEnabledInCurrentEnvironment",
          "variant",
          "variants",
          "strategies",
        ],
        "type": "object",
      },
      "playgroundRequestSchema": {
        "description": "Data for the playground API to evaluate toggles",
        "properties": {
          "context": {
            "$ref": "#/components/schemas/sdkContextSchema",
            "description": "The context to use when evaluating toggles",
          },
          "environment": {
            "description": "The environment to evaluate toggles in.",
            "example": "development",
            "type": "string",
          },
          "projects": {
            "oneOf": [
              {
                "description": "A list of projects to check for toggles in.",
                "example": [
                  "my-project",
                ],
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
              {
                "description": "Check toggles in all projects.",
                "enum": [
                  "*",
                ],
                "type": "string",
              },
            ],
          },
        },
        "required": [
          "environment",
          "context",
        ],
        "type": "object",
      },
      "playgroundResponseSchema": {
        "additionalProperties": false,
        "description": "The state of all features given the provided input.",
        "properties": {
          "features": {
            "description": "The list of features that have been evaluated.",
            "items": {
              "$ref": "#/components/schemas/playgroundFeatureSchema",
            },
            "type": "array",
          },
          "input": {
            "$ref": "#/components/schemas/playgroundRequestSchema",
            "description": "The given input used to evaluate the features.",
          },
        },
        "required": [
          "features",
          "input",
        ],
        "type": "object",
      },
      "playgroundSegmentSchema": {
        "additionalProperties": false,
        "properties": {
          "constraints": {
            "description": "The list of constraints in this segment.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema",
            },
            "type": "array",
          },
          "id": {
            "description": "The segment's id.",
            "type": "integer",
          },
          "name": {
            "description": "The name of the segment.",
            "example": "segment A",
            "type": "string",
          },
          "result": {
            "description": "Whether this was evaluated as true or false.",
            "type": "boolean",
          },
        },
        "required": [
          "name",
          "id",
          "constraints",
          "result",
        ],
        "type": "object",
      },
      "playgroundStrategySchema": {
        "additionalProperties": false,
        "properties": {
          "constraints": {
            "description": "The strategy's constraints and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundConstraintSchema",
            },
            "type": "array",
          },
          "id": {
            "description": "The strategy's id.",
            "type": "string",
          },
          "name": {
            "description": "The strategy's name.",
            "type": "string",
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema",
            "description": "The strategy's constraints and their evaluation results.",
            "example": {
              "myParam1": "param value",
            },
          },
          "result": {
            "anyOf": [
              {
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "anyOf": [
                      {
                        "enum": [
                          false,
                        ],
                        "type": "boolean",
                      },
                      {
                        "enum": [
                          "unknown",
                        ],
                        "type": "string",
                      },
                    ],
                    "description": "Whether this strategy resolves to \`false\` or if it might resolve to \`true\`. Because Unleash can't evaluate the strategy, it can't say for certain whether it will be \`true\`, but if you have failing constraints or segments, it _can_ determine that your strategy would be \`false\`.",
                  },
                  "evaluationStatus": {
                    "description": "Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.",
                    "enum": [
                      "incomplete",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "evaluationStatus",
                  "enabled",
                ],
                "type": "object",
              },
              {
                "additionalProperties": false,
                "properties": {
                  "enabled": {
                    "description": "Whether this strategy evaluates to true or not.",
                    "type": "boolean",
                  },
                  "evaluationStatus": {
                    "description": "Signals that this strategy was evaluated successfully.",
                    "enum": [
                      "complete",
                    ],
                    "type": "string",
                  },
                },
                "required": [
                  "evaluationStatus",
                  "enabled",
                ],
                "type": "object",
              },
            ],
            "description": "The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, \`evaluationStatus\` will be \`unknown\`. Otherwise, it will be \`true\` or \`false\`",
          },
          "segments": {
            "description": "The strategy's segments and their evaluation results.",
            "items": {
              "$ref": "#/components/schemas/playgroundSegmentSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "id",
          "name",
          "result",
          "segments",
          "constraints",
          "parameters",
        ],
        "type": "object",
      },
      "profileSchema": {
        "additionalProperties": false,
        "properties": {
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "projects": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "rootRole": {
            "$ref": "#/components/schemas/roleSchema",
          },
        },
        "required": [
          "rootRole",
          "projects",
          "features",
        ],
        "type": "object",
      },
      "projectEnvironmentSchema": {
        "additionalProperties": false,
        "properties": {
          "changeRequestsEnabled": {
            "type": "boolean",
          },
          "environment": {
            "type": "string",
          },
        },
        "required": [
          "environment",
        ],
        "type": "object",
      },
      "projectOverviewSchema": {
        "additionalProperties": false,
        "description": "A high-level overview of a project. It contains information such as project statistics, the name of the project, what members and what features it contains, etc.",
        "properties": {
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "example": "userId",
            "type": "string",
          },
          "description": {
            "description": "Additional information about the project",
            "example": "DX squad feature release",
            "nullable": true,
            "type": "string",
          },
          "environments": {
            "description": "The environments that are enabled for this project",
            "example": [
              "development",
              "production",
            ],
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "favorite": {
            "description": "\`true\` if the project was favorited, otherwise \`false\`.",
            "example": true,
            "type": "boolean",
          },
          "features": {
            "description": "The full list of features in this project (excluding archived features)",
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "health": {
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100",
            "example": 50,
            "type": "number",
          },
          "members": {
            "description": "The number of members this project has",
            "example": 4,
            "type": "number",
          },
          "mode": {
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.",
            "enum": [
              "open",
              "protected",
            ],
            "example": "open",
            "type": "string",
          },
          "name": {
            "description": "The name of this project",
            "example": "dx-squad",
            "type": "string",
          },
          "stats": {
            "$ref": "#/components/schemas/projectStatsSchema",
            "description": "Project statistics",
          },
          "updatedAt": {
            "example": "2023-02-10T08:36:35.262Z",
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "version": {
            "example": 1,
            "type": "number",
          },
        },
        "required": [
          "version",
          "name",
        ],
        "type": "object",
      },
      "projectSchema": {
        "additionalProperties": false,
        "description": "A definition of the project used for projects listing purposes",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "defaultStickiness": {
            "description": "A default stickiness for the project affecting the default stickiness value for variants and Gradual Rollout strategy",
            "example": "userId",
            "type": "string",
          },
          "description": {
            "description": "Additional information about the project",
            "example": "DX squad feature release",
            "nullable": true,
            "type": "string",
          },
          "favorite": {
            "description": "\`true\` if the project was favorited, otherwise \`false\`.",
            "example": true,
            "type": "boolean",
          },
          "featureCount": {
            "description": "The number of features this project has",
            "example": 10,
            "type": "number",
          },
          "health": {
            "description": "An indicator of the [project's health](https://docs.getunleash.io/reference/technical-debt#health-rating) on a scale from 0 to 100",
            "example": 50,
            "type": "number",
          },
          "id": {
            "description": "The id of this project",
            "example": "dx-squad",
            "type": "string",
          },
          "memberCount": {
            "description": "The number of members this project has",
            "example": 4,
            "type": "number",
          },
          "mode": {
            "description": "The project's [collaboration mode](https://docs.getunleash.io/reference/project-collaboration-mode). Determines whether non-project members can submit change requests or not.",
            "enum": [
              "open",
              "protected",
            ],
            "example": "open",
            "type": "string",
          },
          "name": {
            "description": "The name of this project",
            "example": "DX-Squad",
            "type": "string",
          },
          "updatedAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "projectStatsSchema": {
        "additionalProperties": false,
        "description": "Statistics for a project, including the average time to production, number of features created, the project activity and more.

Stats are divided into current and previous **windows**.
- The **current window** is the past 30 days.
- The **previous window** is the 30 days **before** the current window (from 60 to 30 days ago)",
        "properties": {
          "archivedCurrentWindow": {
            "description": "The number of feature toggles that were archived during the current window",
            "example": 5,
            "type": "number",
          },
          "archivedPastWindow": {
            "description": "The number of feature toggles that were archived during the previous window",
            "example": 5,
            "type": "number",
          },
          "avgTimeToProdCurrentWindow": {
            "description": "The average time from when a feature was created to when it was enabled in the "production" environment during the current window",
            "example": 10,
            "type": "number",
          },
          "createdCurrentWindow": {
            "description": "The number of feature toggles created during the current window",
            "example": 15,
            "type": "number",
          },
          "createdPastWindow": {
            "description": "The number of feature toggles created during the previous window",
            "example": 15,
            "type": "number",
          },
          "projectActivityCurrentWindow": {
            "description": "The number of project events that occurred during the current window",
            "example": 100,
            "type": "number",
          },
          "projectActivityPastWindow": {
            "description": "The number of project events that occurred during the previous window",
            "example": 100,
            "type": "number",
          },
          "projectMembersAddedCurrentWindow": {
            "description": "The number of members that were added to the project during the current window",
            "example": 1,
            "type": "number",
          },
        },
        "required": [
          "avgTimeToProdCurrentWindow",
          "createdCurrentWindow",
          "createdPastWindow",
          "archivedCurrentWindow",
          "archivedPastWindow",
          "projectActivityCurrentWindow",
          "projectActivityPastWindow",
          "projectMembersAddedCurrentWindow",
        ],
        "type": "object",
      },
      "projectsSchema": {
        "additionalProperties": false,
        "description": "An overview of all the projects in the Unleash instance",
        "properties": {
          "projects": {
            "description": "A list of projects in the Unleash instance",
            "items": {
              "$ref": "#/components/schemas/projectSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "projects",
        ],
        "type": "object",
      },
      "proxyClientSchema": {
        "properties": {
          "appName": {
            "description": "Name of the application using Unleash",
            "type": "string",
          },
          "environment": {
            "deprecated": true,
            "type": "string",
          },
          "instanceId": {
            "description": "Instance id for this application (typically hostname, podId or similar)",
            "type": "string",
          },
          "interval": {
            "description": "At which interval, in milliseconds, will this client be expected to send metrics",
            "type": "number",
          },
          "sdkVersion": {
            "description": "Optional field that describes the sdk version (name:version)",
            "type": "string",
          },
          "started": {
            "description": "When this client started. Should be reported as ISO8601 time.",
            "oneOf": [
              {
                "format": "date-time",
                "type": "string",
              },
              {
                "type": "number",
              },
            ],
          },
          "strategies": {
            "description": "List of strategies implemented by this application",
            "items": {
              "type": "string",
            },
            "type": "array",
          },
        },
        "required": [
          "appName",
          "interval",
          "started",
          "strategies",
        ],
        "type": "object",
      },
      "proxyFeatureSchema": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
          },
          "impressionData": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "variant": {
            "additionalProperties": false,
            "properties": {
              "enabled": {
                "type": "boolean",
              },
              "name": {
                "type": "string",
              },
              "payload": {
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "enum": [
                      "string",
                    ],
                    "type": "string",
                  },
                  "value": {
                    "type": "string",
                  },
                },
                "required": [
                  "type",
                  "value",
                ],
                "type": "object",
              },
            },
            "required": [
              "name",
              "enabled",
            ],
            "type": "object",
          },
        },
        "required": [
          "name",
          "enabled",
          "impressionData",
        ],
        "type": "object",
      },
      "proxyFeaturesSchema": {
        "additionalProperties": false,
        "properties": {
          "toggles": {
            "items": {
              "$ref": "#/components/schemas/proxyFeatureSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "toggles",
        ],
        "type": "object",
      },
      "publicSignupTokenCreateSchema": {
        "additionalProperties": false,
        "properties": {
          "expiresAt": {
            "description": "The token's expiration date.",
            "format": "date-time",
            "type": "string",
          },
          "name": {
            "description": "The token's name.",
            "type": "string",
          },
        },
        "required": [
          "name",
          "expiresAt",
        ],
        "type": "object",
      },
      "publicSignupTokenSchema": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "createdBy": {
            "nullable": true,
            "type": "string",
          },
          "enabled": {
            "type": "boolean",
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "role": {
            "$ref": "#/components/schemas/roleSchema",
            "description": "Users who sign up using this token will be given this role.",
          },
          "secret": {
            "type": "string",
          },
          "url": {
            "description": "The public signup link for the token. Users who follow this link will be taken to a signup page where they can create an Unleash user.",
            "type": "string",
          },
          "users": {
            "description": "Array of users that have signed up using the token.",
            "items": {
              "$ref": "#/components/schemas/userSchema",
            },
            "nullable": true,
            "type": "array",
          },
        },
        "required": [
          "secret",
          "url",
          "name",
          "expiresAt",
          "createdAt",
          "createdBy",
          "enabled",
          "role",
        ],
        "type": "object",
      },
      "publicSignupTokenUpdateSchema": {
        "additionalProperties": false,
        "properties": {
          "enabled": {
            "type": "boolean",
          },
          "expiresAt": {
            "description": "The token's expiration date.",
            "format": "date-time",
            "type": "string",
          },
        },
        "type": "object",
      },
      "publicSignupTokensSchema": {
        "additionalProperties": false,
        "properties": {
          "tokens": {
            "items": {
              "$ref": "#/components/schemas/publicSignupTokenSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "tokens",
        ],
        "type": "object",
      },
      "pushVariantsSchema": {
        "properties": {
          "environments": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/variantSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "requestsPerSecondSchema": {
        "properties": {
          "data": {
            "properties": {
              "result": {
                "description": "An array of values per metric. Each one represents a line in the graph labeled by its metric name",
                "items": {
                  "properties": {
                    "metric": {
                      "description": "A key value set representing the metric",
                      "properties": {
                        "appName": {
                          "type": "string",
                        },
                        "endpoint": {
                          "type": "string",
                        },
                      },
                      "type": "object",
                    },
                    "values": {
                      "description": "An array of arrays. Each element of the array is an array of size 2 consisting of the 2 axis for the graph: in position zero the x axis represented as a number and position one the y axis represented as string",
                      "items": {
                        "items": {
                          "anyOf": [
                            {
                              "type": "string",
                            },
                            {
                              "type": "number",
                            },
                          ],
                        },
                        "type": "array",
                      },
                      "type": "array",
                    },
                  },
                  "type": "object",
                },
                "type": "array",
              },
              "resultType": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "status": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "requestsPerSecondSegmentedSchema": {
        "properties": {
          "adminMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema",
          },
          "clientMetrics": {
            "$ref": "#/components/schemas/requestsPerSecondSchema",
          },
        },
        "type": "object",
      },
      "resetPasswordSchema": {
        "additionalProperties": false,
        "properties": {
          "resetPasswordUrl": {
            "type": "string",
          },
        },
        "required": [
          "resetPasswordUrl",
        ],
        "type": "object",
      },
      "roleSchema": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
          },
          "id": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "type",
          "name",
        ],
        "type": "object",
      },
      "sdkContextSchema": {
        "additionalProperties": true,
        "description": "The Unleash context as modeled in client SDKs",
        "properties": {
          "appName": {
            "example": "My cool application.",
            "minLength": 1,
            "type": "string",
          },
          "currentTime": {
            "example": "2022-07-05T12:56:41+02:00",
            "format": "date-time",
            "type": "string",
          },
          "environment": {
            "deprecated": true,
            "type": "string",
          },
          "properties": {
            "additionalProperties": {
              "type": "string",
            },
            "example": {
              "customContextField": "this is one!",
              "otherCustomField": "3",
            },
            "type": "object",
          },
          "remoteAddress": {
            "example": "192.168.1.1",
            "type": "string",
          },
          "sessionId": {
            "example": "b65e7b23-fec0-4814-a129-0e9861ef18fc",
            "type": "string",
          },
          "userId": {
            "example": "username@provider.com",
            "type": "string",
          },
        },
        "required": [
          "appName",
        ],
        "type": "object",
      },
      "searchEventsSchema": {
        "description": "
        Search for events by type, project, feature, free-text query,
        or a combination thereof. Pass an empty object to fetch all events.
    ",
        "properties": {
          "feature": {
            "description": "Find events by feature toggle name (case-sensitive).",
            "type": "string",
          },
          "limit": {
            "default": 100,
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
          },
          "offset": {
            "default": 0,
            "minimum": 0,
            "type": "integer",
          },
          "project": {
            "description": "Find events by project ID (case-sensitive).",
            "type": "string",
          },
          "query": {
            "description": "
                Find events by a free-text search query.
                The query will be matched against the event type,
                the username or email that created the event (if any),
                and the event data payload (if any).
            ",
            "type": "string",
          },
          "type": {
            "description": "Find events by event type (case-sensitive).",
            "type": "string",
          },
        },
        "type": "object",
      },
      "segmentSchema": {
        "additionalProperties": false,
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "id": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "constraints",
        ],
        "type": "object",
      },
      "setStrategySortOrderSchema": {
        "items": {
          "additionalProperties": false,
          "properties": {
            "id": {
              "type": "string",
            },
            "sortOrder": {
              "type": "number",
            },
          },
          "required": [
            "id",
            "sortOrder",
          ],
          "type": "object",
        },
        "type": "array",
      },
      "setUiConfigSchema": {
        "additionalProperties": false,
        "properties": {
          "frontendSettings": {
            "additionalProperties": false,
            "properties": {
              "frontendApiOrigins": {
                "items": {
                  "type": "string",
                },
                "type": "array",
              },
            },
            "required": [
              "frontendApiOrigins",
            ],
            "type": "object",
          },
        },
        "type": "object",
      },
      "sortOrderSchema": {
        "additionalProperties": {
          "type": "number",
        },
        "type": "object",
      },
      "splashSchema": {
        "additionalProperties": false,
        "properties": {
          "seen": {
            "type": "boolean",
          },
          "splashId": {
            "type": "string",
          },
          "userId": {
            "type": "number",
          },
        },
        "required": [
          "userId",
          "splashId",
          "seen",
        ],
        "type": "object",
      },
      "stateSchema": {
        "additionalProperties": true,
        "properties": {
          "environments": {
            "items": {
              "$ref": "#/components/schemas/environmentSchema",
            },
            "type": "array",
          },
          "featureEnvironments": {
            "items": {
              "$ref": "#/components/schemas/featureEnvironmentSchema",
            },
            "type": "array",
          },
          "featureStrategies": {
            "items": {
              "$ref": "#/components/schemas/featureStrategySchema",
            },
            "type": "array",
          },
          "featureStrategySegments": {
            "items": {
              "$ref": "#/components/schemas/featureStrategySegmentSchema",
            },
            "type": "array",
          },
          "featureTags": {
            "items": {
              "$ref": "#/components/schemas/featureTagSchema",
            },
            "type": "array",
          },
          "features": {
            "items": {
              "$ref": "#/components/schemas/featureSchema",
            },
            "type": "array",
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/projectSchema",
            },
            "type": "array",
          },
          "segments": {
            "items": {
              "$ref": "#/components/schemas/segmentSchema",
            },
            "type": "array",
          },
          "strategies": {
            "items": {
              "$ref": "#/components/schemas/strategySchema",
            },
            "type": "array",
          },
          "tagTypes": {
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema",
            },
            "type": "array",
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
        ],
        "type": "object",
      },
      "strategiesSchema": {
        "additionalProperties": false,
        "properties": {
          "strategies": {
            "items": {
              "$ref": "#/components/schemas/strategySchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "strategies",
        ],
        "type": "object",
      },
      "strategySchema": {
        "additionalProperties": false,
        "properties": {
          "deprecated": {
            "type": "boolean",
          },
          "description": {
            "type": "string",
          },
          "displayName": {
            "nullable": true,
            "type": "string",
          },
          "editable": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "items": {
              "additionalProperties": false,
              "properties": {
                "description": {
                  "type": "string",
                },
                "name": {
                  "type": "string",
                },
                "required": {
                  "type": "boolean",
                },
                "type": {
                  "type": "string",
                },
              },
              "type": "object",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
          "displayName",
          "description",
          "editable",
          "deprecated",
          "parameters",
        ],
        "type": "object",
      },
      "tagSchema": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
          },
          "value": {
            "type": "string",
          },
        },
        "required": [
          "value",
          "type",
        ],
        "type": "object",
      },
      "tagTypeSchema": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string",
          },
          "icon": {
            "nullable": true,
            "type": "string",
          },
          "name": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "tagTypesSchema": {
        "additionalProperties": false,
        "properties": {
          "tagTypes": {
            "items": {
              "$ref": "#/components/schemas/tagTypeSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "tagTypes",
        ],
        "type": "object",
      },
      "tagWithVersionSchema": {
        "additionalProperties": false,
        "properties": {
          "tag": {
            "$ref": "#/components/schemas/tagSchema",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "tag",
        ],
        "type": "object",
      },
      "tagsBulkAddSchema": {
        "additionalProperties": false,
        "properties": {
          "features": {
            "items": {
              "minLength": 1,
              "type": "string",
            },
            "type": "array",
          },
          "tags": {
            "$ref": "#/components/schemas/updateTagsSchema",
          },
        },
        "required": [
          "features",
          "tags",
        ],
        "type": "object",
      },
      "tagsSchema": {
        "additionalProperties": false,
        "properties": {
          "tags": {
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "type": "array",
          },
          "version": {
            "type": "integer",
          },
        },
        "required": [
          "version",
          "tags",
        ],
        "type": "object",
      },
      "toggleMaintenanceSchema": {
        "properties": {
          "enabled": {
            "example": true,
            "type": "boolean",
          },
        },
        "required": [
          "enabled",
        ],
        "type": "object",
      },
      "tokenUserSchema": {
        "additionalProperties": false,
        "properties": {
          "createdBy": {
            "nullable": true,
            "type": "string",
          },
          "email": {
            "type": "string",
          },
          "id": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
          "role": {
            "$ref": "#/components/schemas/roleSchema",
          },
          "token": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "name",
          "email",
          "token",
          "createdBy",
          "role",
        ],
        "type": "object",
      },
      "uiConfigSchema": {
        "additionalProperties": false,
        "properties": {
          "authenticationType": {
            "enum": [
              "open-source",
              "demo",
              "enterprise",
              "hosted",
              "custom",
              "none",
            ],
            "type": "string",
          },
          "baseUriPath": {
            "type": "string",
          },
          "disablePasswordAuth": {
            "type": "boolean",
          },
          "emailEnabled": {
            "type": "boolean",
          },
          "environment": {
            "type": "string",
          },
          "flags": {
            "additionalProperties": {
              "type": "boolean",
            },
            "type": "object",
          },
          "frontendApiOrigins": {
            "items": {
              "type": "string",
            },
            "type": "array",
          },
          "links": {
            "items": {
              "type": "object",
            },
            "type": "array",
          },
          "maintenanceMode": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "networkViewEnabled": {
            "type": "boolean",
          },
          "segmentValuesLimit": {
            "type": "number",
          },
          "slogan": {
            "type": "string",
          },
          "strategySegmentsLimit": {
            "type": "number",
          },
          "unleashUrl": {
            "type": "string",
          },
          "version": {
            "type": "string",
          },
          "versionInfo": {
            "$ref": "#/components/schemas/versionSchema",
          },
        },
        "required": [
          "version",
          "unleashUrl",
          "baseUriPath",
          "versionInfo",
        ],
        "type": "object",
      },
      "updateApiTokenSchema": {
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "type": "string",
          },
        },
        "required": [
          "expiresAt",
        ],
        "type": "object",
      },
      "updateFeatureSchema": {
        "properties": {
          "archived": {
            "type": "boolean",
          },
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "description": {
            "type": "string",
          },
          "impressionData": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "stale": {
            "type": "boolean",
          },
          "type": {
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "updateFeatureStrategySchema": {
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "$ref": "#/components/schemas/parametersSchema",
          },
          "sortOrder": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "updateTagTypeSchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "icon": {
            "type": "string",
          },
        },
        "type": "object",
      },
      "updateTagsSchema": {
        "additionalProperties": false,
        "properties": {
          "addedTags": {
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "type": "array",
          },
          "removedTags": {
            "items": {
              "$ref": "#/components/schemas/tagSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "addedTags",
          "removedTags",
        ],
        "type": "object",
      },
      "updateUserSchema": {
        "additionalProperties": true,
        "properties": {
          "email": {
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "rootRole": {
            "type": "number",
          },
        },
        "type": "object",
      },
      "upsertContextFieldSchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "legalValues": {
            "items": {
              "$ref": "#/components/schemas/legalValueSchema",
            },
            "type": "array",
          },
          "name": {
            "type": "string",
          },
          "sortOrder": {
            "type": "number",
          },
          "stickiness": {
            "type": "boolean",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "upsertSegmentSchema": {
        "properties": {
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/constraintSchema",
            },
            "type": "array",
          },
          "description": {
            "nullable": true,
            "type": "string",
          },
          "name": {
            "type": "string",
          },
          "project": {
            "nullable": true,
            "type": "string",
          },
        },
        "required": [
          "name",
          "constraints",
        ],
        "type": "object",
      },
      "upsertStrategySchema": {
        "properties": {
          "description": {
            "type": "string",
          },
          "editable": {
            "type": "boolean",
          },
          "name": {
            "type": "string",
          },
          "parameters": {
            "items": {
              "properties": {
                "description": {
                  "type": "string",
                },
                "name": {
                  "type": "string",
                },
                "required": {
                  "type": "boolean",
                },
                "type": {
                  "type": "string",
                },
              },
              "type": "object",
            },
            "type": "array",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "userSchema": {
        "additionalProperties": false,
        "properties": {
          "accountType": {
            "type": "string",
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "email": {
            "type": "string",
          },
          "emailSent": {
            "type": "boolean",
          },
          "id": {
            "type": "number",
          },
          "imageUrl": {
            "type": "string",
          },
          "inviteLink": {
            "type": "string",
          },
          "isAPI": {
            "type": "boolean",
          },
          "loginAttempts": {
            "type": "number",
          },
          "name": {
            "type": "string",
          },
          "rootRole": {
            "type": "number",
          },
          "seenAt": {
            "format": "date-time",
            "nullable": true,
            "type": "string",
          },
          "username": {
            "type": "string",
          },
        },
        "required": [
          "id",
        ],
        "type": "object",
      },
      "usersGroupsBaseSchema": {
        "additionalProperties": false,
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/groupSchema",
            },
            "type": "array",
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/userSchema",
            },
            "type": "array",
          },
        },
        "type": "object",
      },
      "usersSchema": {
        "additionalProperties": false,
        "properties": {
          "rootRoles": {
            "items": {
              "$ref": "#/components/schemas/roleSchema",
            },
            "type": "array",
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/userSchema",
            },
            "type": "array",
          },
        },
        "required": [
          "users",
        ],
        "type": "object",
      },
      "usersSearchSchema": {
        "items": {
          "$ref": "#/components/schemas/userSchema",
        },
        "type": "array",
      },
      "validateEdgeTokensSchema": {
        "additionalProperties": false,
        "properties": {
          "tokens": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/edgeTokenSchema",
                },
                {
                  "type": "string",
                },
              ],
            },
            "type": "array",
          },
        },
        "required": [
          "tokens",
        ],
        "type": "object",
      },
      "validatePasswordSchema": {
        "additionalProperties": false,
        "properties": {
          "password": {
            "type": "string",
          },
        },
        "required": [
          "password",
        ],
        "type": "object",
      },
      "validateTagTypeSchema": {
        "properties": {
          "tagType": {
            "$ref": "#/components/schemas/tagTypeSchema",
          },
          "valid": {
            "type": "boolean",
          },
        },
        "required": [
          "valid",
          "tagType",
        ],
        "type": "object",
      },
      "variantSchema": {
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
          },
          "overrides": {
            "items": {
              "$ref": "#/components/schemas/overrideSchema",
            },
            "type": "array",
          },
          "payload": {
            "properties": {
              "type": {
                "type": "string",
              },
              "value": {
                "type": "string",
              },
            },
            "required": [
              "type",
              "value",
            ],
            "type": "object",
          },
          "stickiness": {
            "type": "string",
          },
          "weight": {
            "type": "number",
          },
          "weightType": {
            "type": "string",
          },
        },
        "required": [
          "name",
          "weight",
        ],
        "type": "object",
      },
      "variantsSchema": {
        "items": {
          "$ref": "#/components/schemas/variantSchema",
        },
        "type": "array",
      },
      "versionSchema": {
        "additionalProperties": false,
        "properties": {
          "current": {
            "additionalProperties": false,
            "properties": {
              "enterprise": {
                "type": "string",
              },
              "oss": {
                "type": "string",
              },
            },
            "type": "object",
          },
          "instanceId": {
            "type": "string",
          },
          "isLatest": {
            "type": "boolean",
          },
          "latest": {
            "additionalProperties": false,
            "properties": {
              "enterprise": {
                "type": "string",
              },
              "oss": {
                "type": "string",
              },
            },
            "type": "object",
          },
        },
        "required": [
          "current",
          "latest",
          "isLatest",
          "instanceId",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "apiKey": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
      },
    },
  },
  "info": {
    "title": "Unleash API",
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/admin/addons": {
      "get": {
        "operationId": "getAddons",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonsSchema",
                },
              },
            },
            "description": "addonsSchema",
          },
        },
        "tags": [
          "Addons",
        ],
      },
      "post": {
        "operationId": "createAddon",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonSchema",
              },
            },
          },
          "description": "addonSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema",
                },
              },
            },
            "description": "addonSchema",
          },
        },
        "tags": [
          "Addons",
        ],
      },
    },
    "/api/admin/addons/{id}": {
      "delete": {
        "operationId": "deleteAddon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Addons",
        ],
      },
      "get": {
        "operationId": "getAddon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema",
                },
              },
            },
            "description": "addonSchema",
          },
        },
        "tags": [
          "Addons",
        ],
      },
      "put": {
        "operationId": "updateAddon",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/addonSchema",
              },
            },
          },
          "description": "addonSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addonSchema",
                },
              },
            },
            "description": "addonSchema",
          },
        },
        "tags": [
          "Addons",
        ],
      },
    },
    "/api/admin/api-tokens": {
      "get": {
        "operationId": "getAllApiTokens",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema",
                },
              },
            },
            "description": "apiTokensSchema",
          },
        },
        "tags": [
          "API tokens",
        ],
      },
      "post": {
        "operationId": "createApiToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema",
              },
            },
          },
          "description": "createApiTokenSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "API tokens",
        ],
      },
    },
    "/api/admin/api-tokens/{token}": {
      "delete": {
        "operationId": "deleteApiToken",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "API tokens",
        ],
      },
      "put": {
        "operationId": "updateApiToken",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateApiTokenSchema",
              },
            },
          },
          "description": "updateApiTokenSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "API tokens",
        ],
      },
    },
    "/api/admin/archive/features": {
      "get": {
        "deprecated": true,
        "operationId": "getArchivedFeatures",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "featuresSchema",
          },
        },
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/archive/features/{projectId}": {
      "get": {
        "deprecated": true,
        "operationId": "getArchivedFeaturesByProjectId",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "featuresSchema",
          },
        },
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/archive/revive/{featureName}": {
      "post": {
        "operationId": "reviveFeature",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/archive/{featureName}": {
      "delete": {
        "operationId": "deleteFeature",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/client-metrics/features/{name}": {
      "get": {
        "operationId": "getFeatureUsageSummary",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureUsageSchema",
                },
              },
            },
            "description": "featureUsageSchema",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
    },
    "/api/admin/client-metrics/features/{name}/raw": {
      "get": {
        "operationId": "getRawFeatureMetrics",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureMetricsSchema",
                },
              },
            },
            "description": "featureMetricsSchema",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
    },
    "/api/admin/constraints/validate": {
      "post": {
        "operationId": "validateConstraint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/constraintSchema",
              },
            },
          },
          "description": "constraintSchema",
          "required": true,
        },
        "responses": {
          "204": {
            "description": "validConstraint",
          },
          "400": {
            "description": "invalidConstraint",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/context": {
      "get": {
        "operationId": "getContextFields",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldsSchema",
                },
              },
            },
            "description": "contextFieldsSchema",
          },
        },
        "tags": [
          "Context",
        ],
      },
      "post": {
        "operationId": "createContextField",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertContextFieldSchema",
              },
            },
          },
          "description": "upsertContextFieldSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Context",
        ],
      },
    },
    "/api/admin/context/validate": {
      "post": {
        "operationId": "validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nameSchema",
              },
            },
          },
          "description": "nameSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Context",
        ],
      },
    },
    "/api/admin/context/{contextField}": {
      "delete": {
        "operationId": "deleteContextField",
        "parameters": [
          {
            "in": "path",
            "name": "contextField",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Context",
        ],
      },
      "get": {
        "operationId": "getContextField",
        "parameters": [
          {
            "in": "path",
            "name": "contextField",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contextFieldSchema",
                },
              },
            },
            "description": "contextFieldSchema",
          },
        },
        "tags": [
          "Context",
        ],
      },
      "put": {
        "operationId": "updateContextField",
        "parameters": [
          {
            "in": "path",
            "name": "contextField",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertContextFieldSchema",
              },
            },
          },
          "description": "upsertContextFieldSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Context",
        ],
      },
    },
    "/api/admin/environments": {
      "get": {
        "description": "Retrieves all environments that exist in this Unleash instance.",
        "operationId": "getAllEnvironments",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsSchema",
                },
              },
            },
            "description": "environmentsSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
        },
        "summary": "Get all environments",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/environments/project/{projectId}": {
      "get": {
        "description": "Gets the environments that are available for this project. An environment is available for a project if enabled in the [project configuration](https://docs.getunleash.io/reference/environments#step-1-enable-new-environments-for-your-project)",
        "operationId": "getProjectEnvironments",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentsProjectSchema",
                },
              },
            },
            "description": "environmentsProjectSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Get the environments available to a project",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/environments/sort-order": {
      "put": {
        "description": "Updates sort orders for the named environments. Environments not specified are unaffected.",
        "operationId": "updateSortOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sortOrderSchema",
              },
            },
          },
          "description": "sortOrderSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Update environment sort orders",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/environments/{name}": {
      "get": {
        "description": "Retrieves the environment with \`name\` if it exists in this Unleash instance",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/environmentSchema",
                },
              },
            },
            "description": "environmentSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Get the environment with \`name\`",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/environments/{name}/off": {
      "post": {
        "description": "Removes this environment from the list of available environments for projects to use",
        "operationId": "toggleEnvironmentOff",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "This response has no body.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Toggle the environment with \`name\` off",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/environments/{name}/on": {
      "post": {
        "description": "Makes it possible to enable this environment for a project. An environment must first be globally enabled using this endpoint before it can be enabled for a project",
        "operationId": "toggleEnvironmentOn",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "204": {
            "description": "This response has no body.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Toggle the environment with \`name\` on",
        "tags": [
          "Environments",
        ],
      },
    },
    "/api/admin/events": {
      "get": {
        "description": "Returns **the last 100** events from the Unleash instance when called without a query parameter. When called with a \`project\` parameter, returns **all events** for the specified project.

If the provided project does not exist, the list of events will be empty.",
        "operationId": "getEvents",
        "parameters": [
          {
            "description": "The name of the project whose events you want to retrieve",
            "in": "query",
            "name": "project",
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema",
                },
              },
            },
            "description": "eventsSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
        },
        "summary": "Get the most recent events from the Unleash instance or all events related to a project.",
        "tags": [
          "Events",
        ],
      },
    },
    "/api/admin/events/search": {
      "post": {
        "operationId": "searchEvents",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/searchEventsSchema",
              },
            },
          },
          "description": "searchEventsSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/eventsSchema",
                },
              },
            },
            "description": "eventsSchema",
          },
        },
        "tags": [
          "Events",
        ],
      },
    },
    "/api/admin/events/{featureName}": {
      "get": {
        "description": "Returns all events related to the specified feature toggle. If the feature toggle does not exist, the list of events will be empty.",
        "operationId": "getEventsForToggle",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEventsSchema",
                },
              },
            },
            "description": "featureEventsSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
        },
        "summary": "Get all events related to a specific feature toggle.",
        "tags": [
          "Events",
        ],
      },
    },
    "/api/admin/feature-types": {
      "get": {
        "operationId": "getAllFeatureTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureTypesSchema",
                },
              },
            },
            "description": "featureTypesSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/features": {
      "get": {
        "deprecated": true,
        "operationId": "getAllToggles",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "featuresSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/features-batch/export": {
      "post": {
        "operationId": "exportFeatures",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/exportQuerySchema",
              },
            },
          },
          "description": "exportQuerySchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/exportResultSchema",
                },
              },
            },
            "description": "exportResultSchema",
          },
        },
        "tags": [
          "Unstable",
        ],
      },
    },
    "/api/admin/features-batch/import": {
      "post": {
        "description": "Unleash toggles exported from a different instance can be imported into a new project and environment",
        "operationId": "importToggles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema",
              },
            },
          },
          "description": "importTogglesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "summary": "Import feature toggles for an environment in the project",
        "tags": [
          "Unstable",
        ],
      },
    },
    "/api/admin/features-batch/validate": {
      "post": {
        "description": "Unleash toggles exported from a different instance can be imported into a new project and environment",
        "operationId": "validateImport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/importTogglesSchema",
              },
            },
          },
          "description": "importTogglesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/importTogglesValidateSchema",
                },
              },
            },
            "description": "importTogglesValidateSchema",
          },
        },
        "summary": "Validate import of feature toggles for an environment in the project",
        "tags": [
          "Unstable",
        ],
      },
    },
    "/api/admin/features/validate": {
      "post": {
        "operationId": "validateFeature",
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/features/{featureName}/tags": {
      "get": {
        "operationId": "listTags",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema",
                },
              },
            },
            "description": "tagsSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "post": {
        "operationId": "addTag",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagSchema",
              },
            },
          },
          "description": "tagSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Features",
        ],
      },
      "put": {
        "operationId": "updateTags",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagsSchema",
              },
            },
          },
          "description": "updateTagsSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/features/{featureName}/tags/{type}/{value}": {
      "delete": {
        "operationId": "removeTag",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/feedback": {
      "post": {
        "operationId": "createFeedback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackSchema",
              },
            },
          },
          "description": "feedbackSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackSchema",
                },
              },
            },
            "description": "feedbackSchema",
          },
        },
        "tags": [
          "Admin UI",
        ],
      },
    },
    "/api/admin/feedback/{id}": {
      "put": {
        "operationId": "updateFeedback",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/feedbackSchema",
              },
            },
          },
          "description": "feedbackSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/feedbackSchema",
                },
              },
            },
            "description": "feedbackSchema",
          },
        },
        "tags": [
          "Admin UI",
        ],
      },
    },
    "/api/admin/instance-admin/statistics": {
      "get": {
        "deprecated": true,
        "operationId": "getInstanceAdminStats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/instanceAdminStatsSchema",
                },
              },
            },
            "description": "instanceAdminStatsSchema",
          },
        },
        "tags": [
          "Instance Admin",
        ],
      },
    },
    "/api/admin/invite-link/tokens": {
      "get": {
        "operationId": "getAllPublicSignupTokens",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokensSchema",
                },
              },
            },
            "description": "publicSignupTokensSchema",
          },
        },
        "summary": "Retrieve all existing public signup tokens",
        "tags": [
          "Public signup tokens",
        ],
      },
      "post": {
        "operationId": "createPublicSignupToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenCreateSchema",
              },
            },
          },
          "description": "publicSignupTokenCreateSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "summary": "Create a public signup token",
        "tags": [
          "Public signup tokens",
        ],
      },
    },
    "/api/admin/invite-link/tokens/{token}": {
      "get": {
        "description": "Get information about a specific token. The \`:token\` part of the URL should be the token's secret.",
        "operationId": "getPublicSignupToken",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema",
                },
              },
            },
            "description": "publicSignupTokenSchema",
          },
        },
        "summary": "Retrieve a token",
        "tags": [
          "Public signup tokens",
        ],
      },
      "put": {
        "operationId": "updatePublicSignupToken",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/publicSignupTokenUpdateSchema",
              },
            },
          },
          "description": "publicSignupTokenUpdateSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/publicSignupTokenSchema",
                },
              },
            },
            "description": "publicSignupTokenSchema",
          },
        },
        "summary": "Update a public signup token",
        "tags": [
          "Public signup tokens",
        ],
      },
    },
    "/api/admin/maintenance": {
      "get": {
        "description": "Tells you whether maintenance mode is enabled or disabled",
        "operationId": "getMaintenance",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/maintenanceSchema",
                },
              },
            },
            "description": "maintenanceSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
        },
        "summary": "Get maintenance mode status",
        "tags": [
          "Maintenance",
        ],
      },
      "post": {
        "description": "Lets administrators put Unleash into a mostly read-only mode. While Unleash is in maintenance mode, users can not change any configuration settings",
        "operationId": "toggleMaintenance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/toggleMaintenanceSchema",
              },
            },
          },
          "description": "toggleMaintenanceSchema",
          "required": true,
        },
        "responses": {
          "204": {
            "description": "This response has no body.",
          },
          "400": {
            "description": "The request data does not match what we expect.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "User credentials are valid but does not have enough privileges to execute this operation",
          },
        },
        "summary": "Enabled/disabled maintenance mode",
        "tags": [
          "Maintenance",
        ],
      },
    },
    "/api/admin/metrics/applications": {
      "get": {
        "operationId": "getApplications",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationsSchema",
                },
              },
            },
            "description": "applicationsSchema",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
    },
    "/api/admin/metrics/applications/{appName}": {
      "delete": {
        "operationId": "deleteApplication",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
      "get": {
        "operationId": "getApplication",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/applicationSchema",
                },
              },
            },
            "description": "applicationSchema",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
      "post": {
        "operationId": "createApplication",
        "parameters": [
          {
            "in": "path",
            "name": "appName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/applicationSchema",
              },
            },
          },
          "description": "applicationSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Metrics",
        ],
      },
    },
    "/api/admin/playground": {
      "post": {
        "description": "Use the provided \`context\`, \`environment\`, and \`projects\` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.",
        "operationId": "getPlayground",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/playgroundRequestSchema",
              },
            },
          },
          "description": "playgroundRequestSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playgroundResponseSchema",
                },
              },
            },
            "description": "playgroundResponseSchema",
          },
          "400": {
            "description": "The request data does not match what we expect.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
        },
        "summary": "Evaluate an Unleash context against a set of environments and projects.",
        "tags": [
          "Playground",
        ],
      },
    },
    "/api/admin/projects": {
      "get": {
        "operationId": "getProjects",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectsSchema",
                },
              },
            },
            "description": "projectsSchema",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}": {
      "get": {
        "operationId": "getProjectOverview",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/projectOverviewSchema",
                },
              },
            },
            "description": "projectOverviewSchema",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/api-tokens": {
      "get": {
        "operationId": "getProjectApiTokens",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokensSchema",
                },
              },
            },
            "description": "apiTokensSchema",
          },
        },
        "tags": [
          "Projects",
        ],
      },
      "post": {
        "operationId": "createProjectApiToken",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createApiTokenSchema",
              },
            },
          },
          "description": "createApiTokenSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiTokenSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
          "400": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/api-tokens/{token}": {
      "delete": {
        "operationId": "deleteProjectApiToken",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/archive": {
      "post": {
        "description": "This endpoint archives the specified features.",
        "operationId": "archiveFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema",
              },
            },
          },
          "description": "batchFeaturesSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "summary": "Archives a list of features",
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/delete": {
      "post": {
        "description": "This endpoint deletes the specified features, that are in archive.",
        "operationId": "deleteFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema",
              },
            },
          },
          "description": "batchFeaturesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "summary": "Deletes a list of features",
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/projects/{projectId}/environments": {
      "post": {
        "operationId": "addEnvironmentToProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/projectEnvironmentSchema",
              },
            },
          },
          "description": "projectEnvironmentSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/environments/{environment}": {
      "delete": {
        "operationId": "removeEnvironmentFromProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/favorites": {
      "delete": {
        "operationId": "removeFavoriteProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "post": {
        "operationId": "addFavoriteProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features": {
      "get": {
        "operationId": "getFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featuresSchema",
                },
              },
            },
            "description": "featuresSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "post": {
        "operationId": "createFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureSchema",
              },
            },
          },
          "description": "createFeatureSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}": {
      "delete": {
        "description": "This endpoint archives the specified feature if the feature belongs to the specified project.",
        "operationId": "archiveFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "You either do not have the required permissions or used an invalid URL.",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Archive a feature.",
        "tags": [
          "Features",
        ],
      },
      "get": {
        "description": "This endpoint returns the information about the requested feature if the feature belongs to the specified project.",
        "operationId": "getFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
          "401": {
            "description": "Authorization information is missing or invalid. Provide a valid API token as the \`authorization\` header, e.g. \`authorization:*.*.my-admin-token\`.",
          },
          "403": {
            "description": "You either do not have the required permissions or used an invalid URL.",
          },
          "404": {
            "description": "The requested resource was not found.",
          },
        },
        "summary": "Get a feature.",
        "tags": [
          "Features",
        ],
      },
      "patch": {
        "operationId": "patchFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema",
              },
            },
          },
          "description": "patchesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "put": {
        "operationId": "updateFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureSchema",
              },
            },
          },
          "description": "updateFeatureSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/clone": {
      "post": {
        "operationId": "cloneFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cloneFeatureSchema",
              },
            },
          },
          "description": "cloneFeatureSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}": {
      "get": {
        "operationId": "getFeatureEnvironment",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureEnvironmentSchema",
                },
              },
            },
            "description": "featureEnvironmentSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off": {
      "post": {
        "operationId": "toggleFeatureEnvironmentOff",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on": {
      "post": {
        "operationId": "toggleFeatureEnvironmentOn",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureSchema",
                },
              },
            },
            "description": "featureSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies": {
      "get": {
        "operationId": "getFeatureStrategies",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema",
                },
              },
            },
            "description": "featureStrategySchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "post": {
        "operationId": "addFeatureStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createFeatureStrategySchema",
              },
            },
          },
          "description": "createFeatureStrategySchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema",
                },
              },
            },
            "description": "featureStrategySchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order": {
      "post": {
        "operationId": "setStrategySortOrder",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setStrategySortOrderSchema",
              },
            },
          },
          "description": "setStrategySortOrderSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}": {
      "delete": {
        "operationId": "deleteFeatureStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "strategyId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "get": {
        "operationId": "getFeatureStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "strategyId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema",
                },
              },
            },
            "description": "featureStrategySchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "patch": {
        "operationId": "patchFeatureStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "strategyId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema",
              },
            },
          },
          "description": "patchesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema",
                },
              },
            },
            "description": "featureStrategySchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "put": {
        "operationId": "updateFeatureStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "strategyId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateFeatureStrategySchema",
              },
            },
          },
          "description": "updateFeatureStrategySchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureStrategySchema",
                },
              },
            },
            "description": "featureStrategySchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/variants": {
      "get": {
        "description": "Returns the variants for a feature in a specific environment. If the feature has no variants it will return an empty array of variants",
        "operationId": "getEnvironmentFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Get variants for a feature in an environment",
        "tags": [
          "Features",
        ],
      },
      "patch": {
        "description": "Apply a list of patches to the features environments in the specified environment. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).",
        "operationId": "patchEnvironmentsFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema",
              },
            },
          },
          "description": "patchesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Patch a feature's variants in an environment",
        "tags": [
          "Features",
        ],
      },
      "put": {
        "description": "This overwrites the current variants for the feature toggle in the :featureName parameter for the :environment parameter.
                        
                        The backend will validate the input for the following invariants:
                        
                    * If there are variants, there needs to be at least one variant with \`weightType: variable\`
                    * The sum of the weights of variants with \`weightType: fix\` must be strictly less than 1000 (< 1000)

                    The backend will also distribute remaining weight up to 1000 after adding the variants with \`weightType: fix\` together amongst the variants of \`weightType: variable\`",
        "operationId": "overwriteEnvironmentFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "environment",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema",
              },
            },
          },
          "description": "variantsSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Create (overwrite) variants for a feature in an environment",
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/favorites": {
      "delete": {
        "operationId": "removeFavoriteFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
      "post": {
        "operationId": "addFavoriteFeature",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants": {
      "get": {
        "deprecated": true,
        "description": "(deprecated from 4.21) Retrieve the variants for the specified feature. From Unleash 4.21 onwards, this endpoint will attempt to choose a [production-type environment](https://docs.getunleash.io/reference/environments) as the source of truth. If more than one production environment is found, the first one will be used.",
        "operationId": "getFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Retrieve variants for a feature (deprecated) ",
        "tags": [
          "Features",
        ],
      },
      "patch": {
        "description": "Apply a list of patches patch to the specified feature's variants. The patch objects should conform to the [JSON-patch format (RFC 6902)](https://www.rfc-editor.org/rfc/rfc6902).
                        
                        ⚠️ **Warning**: This method is not atomic. If something fails in the middle of applying the patch, you can be left with a half-applied patch. We recommend that you instead [patch variants on a per-environment basis](/docs/reference/api/unleash/patch-environments-feature-variants.api.mdx), which **is** an atomic operation.",
        "operationId": "patchFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patchesSchema",
              },
            },
          },
          "description": "patchesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Apply a patch to a feature's variants (in all environments).",
        "tags": [
          "Features",
        ],
      },
      "put": {
        "description": "This overwrites the current variants for the feature specified in the :featureName parameter in all environments.

                    The backend will validate the input for the following invariants

                    * If there are variants, there needs to be at least one variant with \`weightType: variable\`
                    * The sum of the weights of variants with \`weightType: fix\` must be strictly less than 1000 (< 1000)

                    The backend will also distribute remaining weight up to 1000 after adding the variants with \`weightType: fix\` together amongst the variants of \`weightType: variable\`",
        "operationId": "overwriteFeatureVariants",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantsSchema",
              },
            },
          },
          "description": "variantsSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "summary": "Create (overwrite) variants for a feature toggle in all environments",
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/features/{featureName}/variants-batch": {
      "put": {
        "operationId": "overwriteFeatureVariantsOnEnvironments",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/pushVariantsSchema",
              },
            },
          },
          "description": "pushVariantsSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/featureVariantsSchema",
                },
              },
            },
            "description": "featureVariantsSchema",
          },
        },
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/projects/{projectId}/health-report": {
      "get": {
        "operationId": "getProjectHealthReport",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthReportSchema",
                },
              },
            },
            "description": "healthReportSchema",
          },
        },
        "tags": [
          "Projects",
        ],
      },
    },
    "/api/admin/projects/{projectId}/revive": {
      "post": {
        "description": "This endpoint revives the specified features.",
        "operationId": "reviveFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchFeaturesSchema",
              },
            },
          },
          "description": "batchFeaturesSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "summary": "Revives a list of features",
        "tags": [
          "Archive",
        ],
      },
    },
    "/api/admin/projects/{projectId}/stale": {
      "post": {
        "description": "This endpoint stales the specified features.",
        "operationId": "staleFeatures",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/batchStaleSchema",
              },
            },
          },
          "description": "batchStaleSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "summary": "Stales a list of features",
        "tags": [
          "Features",
        ],
      },
    },
    "/api/admin/splash/{id}": {
      "post": {
        "operationId": "updateSplashSettings",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/splashSchema",
                },
              },
            },
            "description": "splashSchema",
          },
        },
        "tags": [
          "Admin UI",
        ],
      },
    },
    "/api/admin/state/export": {
      "get": {
        "operationId": "export",
        "parameters": [
          {
            "description": "Desired export format. Must be either \`json\` or \`yaml\`.",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "json",
              "enum": [
                "json",
                "yaml",
              ],
              "type": "string",
            },
          },
          {
            "description": "Whether exported data should be downloaded as a file.",
            "in": "query",
            "name": "download",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": false,
            },
          },
          {
            "description": "Whether strategies should be included in the exported data.",
            "in": "query",
            "name": "strategies",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": true,
            },
          },
          {
            "description": "Whether feature toggles should be included in the exported data.",
            "in": "query",
            "name": "featureToggles",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": true,
            },
          },
          {
            "description": "Whether projects should be included in the exported data.",
            "in": "query",
            "name": "projects",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": true,
            },
          },
          {
            "description": "Whether tag types, tags, and feature_tags should be included in the exported data.",
            "in": "query",
            "name": "tags",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": true,
            },
          },
          {
            "description": "Whether environments should be included in the exported data.",
            "in": "query",
            "name": "environments",
            "schema": {
              "anyOf": [
                {
                  "type": "boolean",
                },
                {
                  "minLength": 1,
                  "type": "string",
                },
                {
                  "type": "number",
                },
              ],
              "default": true,
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/stateSchema",
                },
              },
            },
            "description": "stateSchema",
          },
        },
        "tags": [
          "Import/Export",
        ],
      },
    },
    "/api/admin/state/import": {
      "post": {
        "operationId": "import",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/stateSchema",
              },
            },
          },
          "description": "stateSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Import/Export",
        ],
      },
    },
    "/api/admin/strategies": {
      "get": {
        "operationId": "getAllStrategies",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategiesSchema",
                },
              },
            },
            "description": "strategiesSchema",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
      "post": {
        "operationId": "createStrategy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertStrategySchema",
              },
            },
          },
          "description": "upsertStrategySchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Strategies",
        ],
      },
    },
    "/api/admin/strategies/{name}": {
      "delete": {
        "operationId": "removeStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
      "get": {
        "operationId": "getStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/strategySchema",
                },
              },
            },
            "description": "strategySchema",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
    },
    "/api/admin/strategies/{strategyName}": {
      "put": {
        "operationId": "updateStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "strategyName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/upsertStrategySchema",
              },
            },
          },
          "description": "upsertStrategySchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
    },
    "/api/admin/strategies/{strategyName}/deprecate": {
      "post": {
        "operationId": "deprecateStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "strategyName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
    },
    "/api/admin/strategies/{strategyName}/reactivate": {
      "post": {
        "operationId": "reactivateStrategy",
        "parameters": [
          {
            "in": "path",
            "name": "strategyName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Strategies",
        ],
      },
    },
    "/api/admin/tag-types": {
      "get": {
        "operationId": "getTagTypes",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypesSchema",
                },
              },
            },
            "description": "tagTypesSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
      "post": {
        "operationId": "createTagType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema",
              },
            },
          },
          "description": "tagTypeSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tag-types/validate": {
      "post": {
        "operationId": "validateTagType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagTypeSchema",
              },
            },
          },
          "description": "tagTypeSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateTagTypeSchema",
                },
              },
            },
            "description": "validateTagTypeSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tag-types/{name}": {
      "delete": {
        "operationId": "deleteTagType",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Tags",
        ],
      },
      "get": {
        "operationId": "getTagType",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagTypeSchema",
                },
              },
            },
            "description": "tagTypeSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
      "put": {
        "operationId": "updateTagType",
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateTagTypeSchema",
              },
            },
          },
          "description": "updateTagTypeSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tags": {
      "get": {
        "operationId": "getTags",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema",
                },
              },
            },
            "description": "tagsSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
      "post": {
        "operationId": "createTag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagSchema",
              },
            },
          },
          "description": "tagSchema",
          "required": true,
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema",
                },
              },
            },
            "description": "The resource was successfully created.",
            "headers": {
              "location": {
                "description": "The location of the newly created resource.",
                "schema": {
                  "format": "uri",
                  "type": "string",
                },
              },
            },
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tags/features": {
      "put": {
        "operationId": "addTagToFeatures",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tagsBulkAddSchema",
              },
            },
          },
          "description": "tagsBulkAddSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tags/{type}": {
      "get": {
        "operationId": "getTagsByType",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagsSchema",
                },
              },
            },
            "description": "tagsSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/tags/{type}/{value}": {
      "delete": {
        "operationId": "deleteTag",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Tags",
        ],
      },
      "get": {
        "operationId": "getTag",
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "path",
            "name": "value",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tagWithVersionSchema",
                },
              },
            },
            "description": "tagWithVersionSchema",
          },
        },
        "tags": [
          "Tags",
        ],
      },
    },
    "/api/admin/ui-config": {
      "get": {
        "operationId": "getUiConfig",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/uiConfigSchema",
                },
              },
            },
            "description": "uiConfigSchema",
          },
        },
        "tags": [
          "Admin UI",
        ],
      },
      "post": {
        "operationId": "setUiConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/setUiConfigSchema",
              },
            },
          },
          "description": "setUiConfigSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Admin UI",
        ],
      },
    },
    "/api/admin/user": {
      "get": {
        "operationId": "getMe",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/meSchema",
                },
              },
            },
            "description": "meSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin": {
      "get": {
        "operationId": "getUsers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema",
                },
              },
            },
            "description": "usersSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
      "post": {
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserSchema",
              },
            },
          },
          "description": "createUserSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema",
                },
              },
            },
            "description": "userSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/access": {
      "get": {
        "operationId": "getBaseUsersAndGroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersGroupsBaseSchema",
                },
              },
            },
            "description": "usersGroupsBaseSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/reset-password": {
      "post": {
        "operationId": "resetUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/idSchema",
              },
            },
          },
          "description": "idSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resetPasswordSchema",
                },
              },
            },
            "description": "resetPasswordSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/search": {
      "get": {
        "operationId": "searchUsers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usersSchema",
                },
              },
            },
            "description": "usersSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/validate-password": {
      "post": {
        "operationId": "validateUserPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema",
              },
            },
          },
          "description": "passwordSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/{id}": {
      "delete": {
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Users",
        ],
      },
      "get": {
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema",
                },
              },
            },
            "description": "userSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
      "put": {
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserSchema",
              },
            },
          },
          "description": "updateUserSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema",
                },
              },
            },
            "description": "userSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user-admin/{id}/change-password": {
      "post": {
        "operationId": "changeUserPassword",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema",
              },
            },
          },
          "description": "passwordSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user/change-password": {
      "post": {
        "operationId": "changeMyPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/passwordSchema",
              },
            },
          },
          "description": "passwordSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
          "400": {
            "description": "passwordMismatch",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user/profile": {
      "get": {
        "operationId": "getProfile",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/profileSchema",
                },
              },
            },
            "description": "profileSchema",
          },
        },
        "tags": [
          "Users",
        ],
      },
    },
    "/api/admin/user/tokens": {
      "get": {
        "operationId": "getPats",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patsSchema",
                },
              },
            },
            "description": "patsSchema",
          },
        },
        "tags": [
          "Personal access tokens",
        ],
      },
      "post": {
        "operationId": "createPat",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/patSchema",
              },
            },
          },
          "description": "patSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/patSchema",
                },
              },
            },
            "description": "patSchema",
          },
        },
        "tags": [
          "Personal access tokens",
        ],
      },
    },
    "/api/admin/user/tokens/{id}": {
      "delete": {
        "operationId": "deletePat",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Personal access tokens",
        ],
      },
    },
    "/api/client/features": {
      "get": {
        "operationId": "getAllClientFeatures",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeaturesSchema",
                },
              },
            },
            "description": "clientFeaturesSchema",
          },
        },
        "tags": [
          "Client",
        ],
      },
    },
    "/api/client/features/{featureName}": {
      "get": {
        "operationId": "getClientFeature",
        "parameters": [
          {
            "in": "path",
            "name": "featureName",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clientFeatureSchema",
                },
              },
            },
            "description": "clientFeatureSchema",
          },
        },
        "tags": [
          "Client",
        ],
      },
    },
    "/api/client/metrics": {
      "post": {
        "operationId": "registerClientMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientMetricsSchema",
              },
            },
          },
          "description": "clientMetricsSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
          "400": {
            "description": "The request data does not match what we expect.",
          },
        },
        "tags": [
          "Client",
        ],
      },
    },
    "/api/client/register": {
      "post": {
        "operationId": "registerClientApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clientApplicationSchema",
              },
            },
          },
          "description": "clientApplicationSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Client",
        ],
      },
    },
    "/auth/reset/password": {
      "post": {
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordSchema",
              },
            },
          },
          "description": "changePasswordSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Auth",
        ],
      },
    },
    "/auth/reset/password-email": {
      "post": {
        "operationId": "sendResetPasswordEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/emailSchema",
              },
            },
          },
          "description": "emailSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Auth",
        ],
      },
    },
    "/auth/reset/validate": {
      "get": {
        "operationId": "validateToken",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tokenUserSchema",
                },
              },
            },
            "description": "tokenUserSchema",
          },
        },
        "tags": [
          "Auth",
        ],
      },
    },
    "/auth/reset/validate-password": {
      "post": {
        "operationId": "validatePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validatePasswordSchema",
              },
            },
          },
          "description": "validatePasswordSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Auth",
        ],
      },
    },
    "/auth/simple/login": {
      "post": {
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginSchema",
              },
            },
          },
          "description": "loginSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema",
                },
              },
            },
            "description": "userSchema",
          },
        },
        "tags": [
          "Auth",
        ],
      },
    },
    "/edge/metrics": {
      "post": {
        "operationId": "bulkMetrics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkMetricsSchema",
              },
            },
          },
          "description": "bulkMetricsSchema",
          "required": true,
        },
        "responses": {
          "202": {
            "description": "This response has no body.",
          },
        },
        "tags": [
          "Edge",
        ],
      },
    },
    "/edge/validate": {
      "post": {
        "operationId": "getValidTokens",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validateEdgeTokensSchema",
              },
            },
          },
          "description": "validateEdgeTokensSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validateEdgeTokensSchema",
                },
              },
            },
            "description": "validateEdgeTokensSchema",
          },
        },
        "tags": [
          "Edge",
        ],
      },
    },
    "/health": {
      "get": {
        "operationId": "getHealth",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema",
                },
              },
            },
            "description": "healthCheckSchema",
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/healthCheckSchema",
                },
              },
            },
            "description": "healthCheckSchema",
          },
        },
        "tags": [
          "Operational",
        ],
      },
    },
    "/invite/{token}/signup": {
      "post": {
        "description": "Create a user with the viewer root role and link them to the provided signup token",
        "operationId": "addPublicSignupTokenUser",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createInvitedUserSchema",
              },
            },
          },
          "description": "createInvitedUserSchema",
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userSchema",
                },
              },
            },
            "description": "userSchema",
          },
          "400": {
            "description": "The request data does not match what we expect.",
          },
          "409": {
            "description": "The provided resource can not be created or updated because it would conflict with the current state of the resource or with an already existing resource, respectively.",
          },
        },
        "summary": "Add a user via a signup token",
        "tags": [
          "Public signup tokens",
        ],
      },
    },
    "/invite/{token}/validate": {
      "get": {
        "operationId": "validatePublicSignupToken",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "description": "This response has no body.",
          },
          "400": {
            "description": "The request data does not match what we expect.",
          },
        },
        "summary": "Check whether a public sign-up token exists, has not expired and is enabled",
        "tags": [
          "Public signup tokens",
        ],
      },
    },
  },
  "security": [
    {
      "apiKey": [],
    },
  ],
  "servers": [
    {
      "url": "http://localhost:4242",
    },
  ],
  "tags": [
    {
      "description": "Create, update, and delete [Unleash addons](https://docs.getunleash.io/addons).",
      "name": "Addons",
    },
    {
      "description": "Configure the Unleash Admin UI.",
      "name": "Admin UI",
    },
    {
      "description": "Create, update, and delete [Unleash API tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys).",
      "name": "API tokens",
    },
    {
      "description": "Revive or permanently delete [archived feature toggles](https://docs.getunleash.io/advanced/archived_toggles).",
      "name": "Archive",
    },
    {
      "description": "Manage logins, passwords, etc.",
      "name": "Auth",
    },
    {
      "description": "API for managing [change requests](https://docs.getunleash.io/reference/change-requests).",
      "name": "Change Requests",
    },
    {
      "description": "Endpoints for [Unleash server-side clients](https://docs.getunleash.io/reference/sdks).",
      "name": "Client",
    },
    {
      "description": "Create, update, and delete [context fields](https://docs.getunleash.io/reference/unleash-context) that Unleash is aware of.",
      "name": "Context",
    },
    {
      "description": "Endpoints related to Unleash on the Edge.",
      "name": "Edge",
    },
    {
      "description": "Create, update, delete, enable or disable [environments](https://docs.getunleash.io/reference/environments) for this Unleash instance.",
      "name": "Environments",
    },
    {
      "description": "Read events from this Unleash instance.",
      "name": "Events",
    },
    {
      "description": "Create, update, and delete [features toggles](https://docs.getunleash.io/reference/feature-toggles).",
      "name": "Features",
    },
    {
      "description": "API for connecting client-side (frontend) applications to Unleash.",
      "name": "Frontend API",
    },
    {
      "description": "[Import and export](https://docs.getunleash.io/deploy/import_export) the state of your Unleash instance.",
      "name": "Import/Export",
    },
    {
      "description": "Instance admin endpoints used to manage the Unleash instance itself.",
      "name": "Instance Admin",
    },
    {
      "description": "Enable/disable the maintenance mode of Unleash.",
      "name": "Maintenance",
    },
    {
      "description": "Register, read, or delete metrics recorded by Unleash.",
      "name": "Metrics",
    },
    {
      "description": "Endpoints related to the operational status of this Unleash instance.",
      "name": "Operational",
    },
    {
      "description": "Create, update, and delete [Personal access tokens](https://docs.getunleash.io/reference/api-tokens-and-client-keys#personal-access-tokens).",
      "name": "Personal access tokens",
    },
    {
      "description": "Evaluate an Unleash context against your feature toggles.",
      "name": "Playground",
    },
    {
      "description": "Create, update, and delete [Unleash projects](https://docs.getunleash.io/reference/projects).",
      "name": "Projects",
    },
    {
      "description": "Create, update, and delete [Unleash Public Signup tokens](https://docs.getunleash.io/reference/public-signup-tokens).",
      "name": "Public signup tokens",
    },
    {
      "description": "Create, update, delete, and manage [segments](https://docs.getunleash.io/reference/segments).",
      "name": "Segments",
    },
    {
      "description": "Endpoints for managing [Service Accounts](https://docs.getunleash.io/reference/service-accounts), which enable programmatic access to the Unleash API.",
      "name": "Service Accounts",
    },
    {
      "description": "Create, update, delete, manage [custom strategies](https://docs.getunleash.io/reference/custom-activation-strategies).",
      "name": "Strategies",
    },
    {
      "description": "Create, update, and delete [tags and tag types](https://docs.getunleash.io/reference/tags).",
      "name": "Tags",
    },
    {
      "description": "Experimental endpoints that may change or disappear at any time.",
      "name": "Unstable",
    },
    {
      "description": "Manage users and passwords.",
      "name": "Users",
    },
  ],
}
`;
